/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    10787U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    10780U,	// BUNDLE
    11126U,	// LIFETIME_START
    10767U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// FRAME_ALLOC
    19261U,	// ADD4
    19261U,	// ADD4TLS
    16823U,	// ADD4o
    19261U,	// ADD8
    19261U,	// ADD8TLS
    19261U,	// ADD8TLS_
    16823U,	// ADD8o
    19093U,	// ADDC
    19093U,	// ADDC8
    16741U,	// ADDC8o
    16741U,	// ADDCo
    19609U,	// ADDE
    19609U,	// ADDE8
    16953U,	// ADDE8o
    16953U,	// ADDEo
    20196U,	// ADDI
    20196U,	// ADDI8
    19138U,	// ADDIC
    19138U,	// ADDIC8
    16782U,	// ADDICo
    23140U,	// ADDIS
    23140U,	// ADDIS8
    10558U,	// ADDISdtprelHA
    9497U,	// ADDISdtprelHA32
    10541U,	// ADDISgotTprelHA
    10513U,	// ADDIStlsgdHA
    10527U,	// ADDIStlsldHA
    10501U,	// ADDIStocHA
    10892U,	// ADDIdtprelL
    9700U,	// ADDIdtprelL32
    10855U,	// ADDItlsgdL
    9657U,	// ADDItlsgdL32
    10938U,	// ADDItlsgdLADDR
    9752U,	// ADDItlsgdLADDR32
    10867U,	// ADDItlsldL
    9671U,	// ADDItlsldL32
    10954U,	// ADDItlsldLADDR
    9770U,	// ADDItlsldLADDR32
    10845U,	// ADDItocL
    268455132U,	// ADDME
    268455132U,	// ADDME8
    268452432U,	// ADDME8o
    268452432U,	// ADDMEo
    268455203U,	// ADDZE
    268455203U,	// ADDZE8
    268452473U,	// ADDZE8o
    268452473U,	// ADDZEo
    296620U,	// ADJCALLSTACKDOWN
    8947391U,	// ADJCALLSTACKUP
    19437U,	// AND
    19437U,	// AND8
    16885U,	// AND8o
    19102U,	// ANDC
    19102U,	// ANDC8
    16748U,	// ANDC8o
    16748U,	// ANDCo
    17656U,	// ANDISo
    17656U,	// ANDISo8
    17149U,	// ANDIo
    17149U,	// ANDIo8
    11061U,	// ANDIo_1_EQ_BIT
    10451U,	// ANDIo_1_EQ_BIT8
    11077U,	// ANDIo_1_GT_BIT
    10468U,	// ANDIo_1_GT_BIT8
    16885U,	// ANDo
    554190429U,	// ATOMIC_CMP_SWAP_I16
    554190407U,	// ATOMIC_CMP_SWAP_I32
    9897U,	// ATOMIC_CMP_SWAP_I64
    10369U,	// ATOMIC_CMP_SWAP_I8
    10116U,	// ATOMIC_LOAD_ADD_I16
    9535U,	// ATOMIC_LOAD_ADD_I32
    9837U,	// ATOMIC_LOAD_ADD_I64
    10308U,	// ATOMIC_LOAD_ADD_I8
    10159U,	// ATOMIC_LOAD_AND_I16
    9578U,	// ATOMIC_LOAD_AND_I32
    9996U,	// ATOMIC_LOAD_AND_I64
    10349U,	// ATOMIC_LOAD_AND_I8
    10137U,	// ATOMIC_LOAD_NAND_I16
    9556U,	// ATOMIC_LOAD_NAND_I32
    9858U,	// ATOMIC_LOAD_NAND_I64
    10328U,	// ATOMIC_LOAD_NAND_I8
    10218U,	// ATOMIC_LOAD_OR_I16
    9637U,	// ATOMIC_LOAD_OR_I32
    9939U,	// ATOMIC_LOAD_OR_I64
    10408U,	// ATOMIC_LOAD_OR_I8
    10095U,	// ATOMIC_LOAD_SUB_I16
    9514U,	// ATOMIC_LOAD_SUB_I32
    9816U,	// ATOMIC_LOAD_SUB_I64
    10274U,	// ATOMIC_LOAD_SUB_I8
    10197U,	// ATOMIC_LOAD_XOR_I16
    9616U,	// ATOMIC_LOAD_XOR_I32
    9918U,	// ATOMIC_LOAD_XOR_I64
    10389U,	// ATOMIC_LOAD_XOR_I8
    10180U,	// ATOMIC_SWAP_I16
    9599U,	// ATOMIC_SWAP_I32
    9880U,	// ATOMIC_SWAP_I64
    10485U,	// ATOMIC_SWAP_I8
    11260U,	// ATTN
    313735U,	// B
    329561U,	// BA
    25182312U,	// BC
    879505U,	// BCC
    1141649U,	// BCCA
    1403793U,	// BCCCTR
    1403793U,	// BCCCTR8
    1665937U,	// BCCCTRL
    1665937U,	// BCCCTRL8
    1928081U,	// BCCL
    2190225U,	// BCCLA
    2452369U,	// BCCLR
    2714513U,	// BCCLRL
    2900122U,	// BCCTR
    2900122U,	// BCCTR8
    2900178U,	// BCCTR8n
    2900100U,	// BCCTRL
    2900100U,	// BCCTRL8
    2900158U,	// BCCTRL8n
    2900158U,	// BCCTRLn
    2900178U,	// BCCTRn
    25182320U,	// BCL
    2900112U,	// BCLR
    2900089U,	// BCLRL
    2900148U,	// BCLRLn
    2900169U,	// BCLRn
    311373U,	// BCLalways
    25182380U,	// BCLn
    11297U,	// BCTR
    11297U,	// BCTR8
    11254U,	// BCTRL
    11254U,	// BCTRL8
    98394U,	// BCTRL8_LDinto_toc
    25182373U,	// BCn
    320634U,	// BDNZ
    320634U,	// BDNZ8
    330108U,	// BDNZA
    327936U,	// BDNZAm
    327721U,	// BDNZAp
    315786U,	// BDNZL
    329872U,	// BDNZLA
    327920U,	// BDNZLAm
    327705U,	// BDNZLAp
    11290U,	// BDNZLR
    11290U,	// BDNZLR8
    11246U,	// BDNZLRL
    9439U,	// BDNZLRLm
    9407U,	// BDNZLRLp
    9455U,	// BDNZLRm
    9423U,	// BDNZLRp
    311567U,	// BDNZLm
    311352U,	// BDNZLp
    311581U,	// BDNZm
    311366U,	// BDNZp
    320572U,	// BDZ
    320572U,	// BDZ8
    330102U,	// BDZA
    327929U,	// BDZAm
    327714U,	// BDZAp
    315780U,	// BDZL
    329865U,	// BDZLA
    327912U,	// BDZLAm
    327697U,	// BDZLAp
    11284U,	// BDZLR
    11284U,	// BDZLR8
    11239U,	// BDZLRL
    9431U,	// BDZLRLm
    9399U,	// BDZLRLp
    9448U,	// BDZLRm
    9416U,	// BDZLRp
    311560U,	// BDZLm
    311345U,	// BDZLp
    311575U,	// BDZm
    311360U,	// BDZp
    315663U,	// BL
    315663U,	// BL8
    3199247U,	// BL8_NOP
    3264783U,	// BL8_NOP_TLS
    381199U,	// BL8_TLS
    381199U,	// BL8_TLS_
    329854U,	// BLA
    329854U,	// BLA8
    3213438U,	// BLA8_NOP
    11280U,	// BLR
    11280U,	// BLR8
    11234U,	// BLRL
    381199U,	// BL_TLS
    19417U,	// BPERMD
    19187U,	// BRINC
    20210U,	// CLRLSLDI
    17129U,	// CLRLSLDIo
    20552U,	// CLRLSLWI
    17227U,	// CLRLSLWIo
    20245U,	// CLRRDI
    17156U,	// CLRRDIo
    20593U,	// CLRRWI
    17256U,	// CLRRWIo
    18863U,	// CMPB
    18863U,	// CMPB8
    19481U,	// CMPD
    20238U,	// CMPDI
    19398U,	// CMPLD
    20202U,	// CMPLDI
    24328U,	// CMPLW
    20536U,	// CMPLWI
    24577U,	// CMPW
    20586U,	// CMPWI
    268455057U,	// CNTLZD
    268452400U,	// CNTLZDo
    268460251U,	// CNTLZW
    268460251U,	// CNTLZW8
    268453337U,	// CNTLZW8o
    268453337U,	// CNTLZWo
    10081U,	// CR6SET
    10067U,	// CR6UNSET
    19467U,	// CRAND
    19108U,	// CRANDC
    23863U,	// CREQV
    19451U,	// CRNAND
    22601U,	// CRNOR
    22615U,	// CROR
    19208U,	// CRORC
    33578295U,	// CRSET
    33577077U,	// CRUNSET
    22645U,	// CRXOR
    132951U,	// DCBA
    134450U,	// DCBF
    134837U,	// DCBI
    138286U,	// DCBST
    138214U,	// DCBT
    138298U,	// DCBTST
    140337U,	// DCBZ
    135549U,	// DCBZL
    268455623U,	// DCCCI
    19588U,	// DIVD
    19615U,	// DIVDE
    23710U,	// DIVDEU
    17742U,	// DIVDEUo
    16960U,	// DIVDEo
    23703U,	// DIVDU
    17734U,	// DIVDUo
    16937U,	// DIVDo
    24780U,	// DIVW
    19731U,	// DIVWE
    23718U,	// DIVWEU
    17751U,	// DIVWEUo
    17009U,	// DIVWEo
    23824U,	// DIVWU
    17769U,	// DIVWUo
    17874U,	// DIVWo
    416412U,	// DSS
    11227U,	// DSSALL
    847420469U,	// DST
    847420469U,	// DST64
    847420482U,	// DSTST
    847420482U,	// DSTST64
    847420495U,	// DSTSTT
    847420495U,	// DSTSTT64
    847420489U,	// DSTT
    847420489U,	// DSTT64
    10581U,	// DYNALLOC
    10238U,	// DYNALLOC8
    9715U,	// EH_SjLj_LongJmp32
    9959U,	// EH_SjLj_LongJmp64
    9734U,	// EH_SjLj_SetJmp32
    9978U,	// EH_SjLj_SetJmp64
    311297U,	// EH_SjLj_Setup
    23858U,	// EQV
    23858U,	// EQV8
    17784U,	// EQV8o
    17784U,	// EQVo
    268458199U,	// EVABS
    50355934U,	// EVADDIW
    268459385U,	// EVADDSMIAAW
    268459517U,	// EVADDSSIAAW
    268459451U,	// EVADDUMIAAW
    268459583U,	// EVADDUSIAAW
    24212U,	// EVADDW
    19474U,	// EVAND
    19116U,	// EVANDC
    22463U,	// EVCMPEQ
    23219U,	// EVCMPGTS
    23770U,	// EVCMPGTU
    23229U,	// EVCMPLTS
    23780U,	// EVCMPLTU
    268460072U,	// EVCNTLSW
    268460249U,	// EVCNTLZW
    23364U,	// EVDIVWS
    23822U,	// EVDIVWU
    23870U,	// EVEQV
    268454403U,	// EVEXTSB
    268455496U,	// EVEXTSH
    58739589U,	// EVLDD
    24908U,	// EVLDDX
    58740166U,	// EVLDH
    25012U,	// EVLDHX
    58744476U,	// EVLDW
    25573U,	// EVLDWX
    58743717U,	// EVLHHESPLAT
    25326U,	// EVLHHESPLATX
    58743742U,	// EVLHHOSSPLAT
    25353U,	// EVLHHOSSPLATX
    58743756U,	// EVLHHOUSPLAT
    25368U,	// EVLHHOUSPLATX
    58739901U,	// EVLWHE
    24983U,	// EVLWHEX
    58743443U,	// EVLWHOS
    25306U,	// EVLWHOSX
    58743997U,	// EVLWHOU
    25484U,	// EVLWHOUX
    58743730U,	// EVLWHSPLAT
    25340U,	// EVLWHSPLATX
    58743770U,	// EVLWWSPLAT
    25383U,	// EVLWWSPLATX
    20309U,	// EVMERGEHI
    21298U,	// EVMERGEHILO
    21287U,	// EVMERGELO
    20320U,	// EVMERGELOHI
    18141U,	// EVMHEGSMFAA
    21104U,	// EVMHEGSMFAN
    18189U,	// EVMHEGSMIAA
    21152U,	// EVMHEGSMIAN
    18226U,	// EVMHEGUMIAA
    21189U,	// EVMHEGUMIAN
    19774U,	// EVMHESMF
    18274U,	// EVMHESMFA
    23877U,	// EVMHESMFAAW
    24369U,	// EVMHESMFANW
    20363U,	// EVMHESMI
    18365U,	// EVMHESMIA
    23942U,	// EVMHESMIAAW
    24421U,	// EVMHESMIANW
    19849U,	// EVMHESSF
    18317U,	// EVMHESSFA
    23903U,	// EVMHESSFAAW
    24395U,	// EVMHESSFANW
    24074U,	// EVMHESSIAAW
    24499U,	// EVMHESSIANW
    20402U,	// EVMHEUMI
    18408U,	// EVMHEUMIA
    24008U,	// EVMHEUMIAAW
    24460U,	// EVMHEUMIANW
    24140U,	// EVMHEUSIAAW
    24538U,	// EVMHEUSIANW
    18154U,	// EVMHOGSMFAA
    21117U,	// EVMHOGSMFAN
    18202U,	// EVMHOGSMIAA
    21165U,	// EVMHOGSMIAN
    18239U,	// EVMHOGUMIAA
    21202U,	// EVMHOGUMIAN
    19794U,	// EVMHOSMF
    18296U,	// EVMHOSMFA
    23890U,	// EVMHOSMFAAW
    24382U,	// EVMHOSMFANW
    20383U,	// EVMHOSMI
    18387U,	// EVMHOSMIA
    23982U,	// EVMHOSMIAAW
    24447U,	// EVMHOSMIANW
    19869U,	// EVMHOSSF
    18339U,	// EVMHOSSFA
    23916U,	// EVMHOSSFAAW
    24408U,	// EVMHOSSFANW
    24114U,	// EVMHOSSIAAW
    24525U,	// EVMHOSSIANW
    20432U,	// EVMHOUMI
    18441U,	// EVMHOUMIA
    24048U,	// EVMHOUMIAAW
    24486U,	// EVMHOUMIANW
    24180U,	// EVMHOUSIAAW
    24564U,	// EVMHOUSIANW
    268454040U,	// EVMRA
    19784U,	// EVMWHSMF
    18285U,	// EVMWHSMFA
    20373U,	// EVMWHSMI
    18376U,	// EVMWHSMIA
    19859U,	// EVMWHSSF
    18328U,	// EVMWHSSFA
    20412U,	// EVMWHUMI
    18419U,	// EVMWHUMIA
    23969U,	// EVMWLSMIAAW
    24434U,	// EVMWLSMIANW
    24101U,	// EVMWLSSIAAW
    24512U,	// EVMWLSSIANW
    20422U,	// EVMWLUMI
    18430U,	// EVMWLUMIA
    24035U,	// EVMWLUMIAAW
    24473U,	// EVMWLUMIANW
    24167U,	// EVMWLUSIAAW
    24551U,	// EVMWLUSIANW
    19804U,	// EVMWSMF
    18307U,	// EVMWSMFA
    18167U,	// EVMWSMFAA
    21130U,	// EVMWSMFAN
    20393U,	// EVMWSMI
    18398U,	// EVMWSMIA
    18215U,	// EVMWSMIAA
    21178U,	// EVMWSMIAN
    19879U,	// EVMWSSF
    18350U,	// EVMWSSFA
    18178U,	// EVMWSSFAA
    21141U,	// EVMWSSFAN
    20442U,	// EVMWUMI
    18452U,	// EVMWUMIA
    18252U,	// EVMWUMIAA
    21215U,	// EVMWUMIAN
    19459U,	// EVNAND
    268455352U,	// EVNEG
    22608U,	// EVNOR
    22621U,	// EVOR
    19215U,	// EVORC
    24335U,	// EVRLW
    20544U,	// EVRLWI
    268459683U,	// EVRNDW
    24342U,	// EVSLW
    20570U,	// EVSLWI
    268455754U,	// EVSPLATFI
    268455966U,	// EVSPLATI
    23159U,	// EVSRWIS
    23732U,	// EVSRWIU
    23301U,	// EVSRWS
    23808U,	// EVSRWU
    58739596U,	// EVSTDD
    24916U,	// EVSTDDX
    58740173U,	// EVSTDH
    25020U,	// EVSTDHX
    58744491U,	// EVSTDW
    25581U,	// EVSTDWX
    58739909U,	// EVSTWHE
    24992U,	// EVSTWHEX
    58741534U,	// EVSTWHO
    25120U,	// EVSTWHOX
    58739994U,	// EVSTWWE
    25002U,	// EVSTWWEX
    58741579U,	// EVSTWWO
    25130U,	// EVSTWWOX
    268459411U,	// EVSUBFSMIAAW
    268459543U,	// EVSUBFSSIAAW
    268459477U,	// EVSUBFUMIAAW
    268459609U,	// EVSUBFUSIAAW
    24243U,	// EVSUBFW
    67133116U,	// EVSUBIFW
    22652U,	// EVXOR
    20220U,	// EXTLDI
    17140U,	// EXTLDIo
    20578U,	// EXTLWI
    17247U,	// EXTLWIo
    20269U,	// EXTRDI
    17183U,	// EXTRDIo
    20617U,	// EXTRWI
    17283U,	// EXTRWIo
    268454405U,	// EXTSB
    268454405U,	// EXTSB8
    268454405U,	// EXTSB8_32_64
    268452143U,	// EXTSB8o
    268452143U,	// EXTSBo
    268455498U,	// EXTSH
    268455498U,	// EXTSH8
    268455498U,	// EXTSH8_32_64
    268452523U,	// EXTSH8o
    268452523U,	// EXTSHo
    268460109U,	// EXTSW
    268460109U,	// EXTSW_32_64
    268453300U,	// EXTSW_32_64o
    268453300U,	// EXTSWo
    11265U,	// EnforceIEIO
    268458184U,	// FABSD
    268453009U,	// FABSDo
    268458184U,	// FABSS
    268453009U,	// FABSSo
    19260U,	// FADD
    22838U,	// FADDS
    17595U,	// FADDSo
    16822U,	// FADDo
    0U,	// FADDrtz
    268454824U,	// FCFID
    268458376U,	// FCFIDS
    268453078U,	// FCFIDSo
    268459130U,	// FCFIDU
    268458705U,	// FCFIDUS
    268453137U,	// FCFIDUSo
    268453181U,	// FCFIDUo
    268452310U,	// FCFIDo
    23750U,	// FCMPUD
    23750U,	// FCMPUS
    21239U,	// FCPSGND
    17358U,	// FCPSGNDo
    21239U,	// FCPSGNS
    17358U,	// FCPSGNSo
    268454833U,	// FCTID
    268461186U,	// FCTIDUZ
    268453402U,	// FCTIDUZo
    268461123U,	// FCTIDZ
    268453386U,	// FCTIDZo
    268452318U,	// FCTIDo
    268459753U,	// FCTIW
    268461197U,	// FCTIWUZ
    268453412U,	// FCTIWUZo
    268461208U,	// FCTIWZ
    268453422U,	// FCTIWZo
    268453261U,	// FCTIWo
    23849U,	// FDIV
    23294U,	// FDIVS
    17691U,	// FDIVSo
    17777U,	// FDIVo
    19268U,	// FMADD
    22847U,	// FMADDS
    17603U,	// FMADDSo
    16829U,	// FMADDo
    268458037U,	// FMR
    268452985U,	// FMRo
    19047U,	// FMSUB
    22817U,	// FMSUBS
    17576U,	// FMSUBSo
    16713U,	// FMSUBo
    20833U,	// FMUL
    23170U,	// FMULS
    17664U,	// FMULSo
    17316U,	// FMULo
    268458192U,	// FNABSD
    268453016U,	// FNABSDo
    268458192U,	// FNABSS
    268453016U,	// FNABSSo
    268455346U,	// FNEGD
    268452505U,	// FNEGDo
    268455346U,	// FNEGS
    268452505U,	// FNEGSo
    19277U,	// FNMADD
    22857U,	// FNMADDS
    17612U,	// FNMADDSo
    16837U,	// FNMADDo
    19056U,	// FNMSUB
    22827U,	// FNMSUBS
    17585U,	// FNMSUBSo
    16721U,	// FNMSUBo
    268455156U,	// FRE
    268458458U,	// FRES
    268453087U,	// FRESo
    268452449U,	// FREo
    268456478U,	// FRIMD
    268452790U,	// FRIMDo
    268456478U,	// FRIMS
    268452790U,	// FRIMSo
    268456712U,	// FRIND
    268452832U,	// FRINDo
    268456712U,	// FRINS
    268452832U,	// FRINSo
    268457562U,	// FRIPD
    268452918U,	// FRIPDo
    268457562U,	// FRIPS
    268452918U,	// FRIPSo
    268461172U,	// FRIZD
    268453395U,	// FRIZDo
    268461172U,	// FRIZS
    268453395U,	// FRIZSo
    268457802U,	// FRSP
    268452949U,	// FRSPo
    268455171U,	// FRSQRTE
    268458466U,	// FRSQRTES
    268453094U,	// FRSQRTESo
    268452455U,	// FRSQRTEo
    20785U,	// FSELD
    17309U,	// FSELDo
    20785U,	// FSELS
    17309U,	// FSELSo
    268459020U,	// FSQRT
    268458695U,	// FSQRTS
    268453128U,	// FSQRTSo
    268453164U,	// FSQRTo
    19039U,	// FSUB
    22808U,	// FSUBS
    17568U,	// FSUBSo
    16706U,	// FSUBo
    10984U,	// GETtlsADDR
    9803U,	// GETtlsADDR32
    10970U,	// GETtlsldADDR
    9788U,	// GETtlsldADDR32
    134843U,	// ICBI
    187372U,	// ICBT
    268455630U,	// ICCCI
    20562U,	// INSLWI
    17238U,	// INSLWIo
    20253U,	// INSRDI
    17165U,	// INSRDIo
    20601U,	// INSRWI
    17265U,	// INSRWIo
    20791U,	// ISEL
    20791U,	// ISEL8
    11163U,	// ISYNC
    75516031U,	// LA
    58738815U,	// LAx
    285237837U,	// LBARX
    1090544205U,	// LBARXL
    58745911U,	// LBZ
    58745911U,	// LBZ8
    25089U,	// LBZCIX
    83909911U,	// LBZU
    83909911U,	// LBZU8
    92300229U,	// LBZUX
    92300229U,	// LBZUX8
    285238293U,	// LBZX
    285238293U,	// LBZX8
    58739643U,	// LD
    285237844U,	// LDARX
    1090544212U,	// LDARXL
    285237865U,	// LDBRX
    25058U,	// LDCIX
    83909772U,	// LDU
    92300145U,	// LDUX
    285237619U,	// LDX
    10879U,	// LDgotTprelL
    9685U,	// LDgotTprelL32
    11175U,	// LDtoc
    11116U,	// LDtocBA
    11116U,	// LDtocCPT
    10827U,	// LDtocJTI
    10837U,	// LDtocL
    58739604U,	// LFD
    83909731U,	// LFDU
    92300128U,	// LFDUX
    285237599U,	// LFDX
    285237526U,	// LFIWAX
    285238307U,	// LFIWZX
    58743282U,	// LFS
    83909837U,	// LFSU
    92300205U,	// LFSUX
    285237953U,	// LFSX
    58738616U,	// LHA
    58738616U,	// LHA8
    285237851U,	// LHARX
    1090544219U,	// LHARXL
    83909719U,	// LHAU
    83909719U,	// LHAU8
    92300084U,	// LHAUX
    92300084U,	// LHAUX8
    285237509U,	// LHAX
    285237509U,	// LHAX8
    285237880U,	// LHBRX
    285237880U,	// LHBRX8
    58745931U,	// LHZ
    58745931U,	// LHZ8
    25097U,	// LHZCIX
    83909917U,	// LHZU
    83909917U,	// LHZU8
    92300236U,	// LHZUX
    92300236U,	// LHZUX8
    285238299U,	// LHZX
    285238299U,	// LHZX8
    100683632U,	// LI
    100683632U,	// LI8
    100686443U,	// LIS
    100686443U,	// LIS8
    58744605U,	// LMW
    20625U,	// LSWI
    285237540U,	// LVEBX
    285237701U,	// LVEHX
    285238262U,	// LVEWX
    285233497U,	// LVSL
    285235371U,	// LVSR
    285238234U,	// LVX
    285233520U,	// LVXL
    58738847U,	// LWA
    285237858U,	// LWARX
    1090544226U,	// LWARXL
    92300091U,	// LWAUX
    285237534U,	// LWAX
    285237534U,	// LWAX_32
    58738847U,	// LWA_32
    285237895U,	// LWBRX
    285237895U,	// LWBRX8
    58746016U,	// LWZ
    58746016U,	// LWZ8
    25105U,	// LWZCIX
    83909923U,	// LWZU
    83909923U,	// LWZU8
    92300243U,	// LWZUX
    92300243U,	// LWZUX8
    285238315U,	// LWZX
    285238315U,	// LWZX8
    11182U,	// LWZtoc
    285237634U,	// LXSDX
    285237475U,	// LXVD2X
    285237936U,	// LXVDSX
    285237492U,	// LXVW4X
    415701U,	// MBAR
    268455269U,	// MCRF
    268458487U,	// MCRFS
    284656U,	// MFCR
    284656U,	// MFCR8
    284856U,	// MFCTR
    284856U,	// MFCTR8
    268457947U,	// MFDCR
    285164U,	// MFFS
    279793U,	// MFFSo
    284711U,	// MFLR
    284711U,	// MFLR8
    284823U,	// MFMSR
    109071723U,	// MFOCRF
    109071723U,	// MFOCRF8
    268458115U,	// MFSPR
    268458115U,	// MFSPR8
    117463185U,	// MFSR
    268456718U,	// MFSRIN
    268454420U,	// MFTB
    3430531U,	// MFTB8
    3692675U,	// MFVRSAVE
    3692675U,	// MFVRSAVEv
    284670U,	// MFVSCR
    268454951U,	// MFVSRD
    268461221U,	// MFVSRWZ
    11169U,	// MSYNC
    268455291U,	// MTCRF
    268455291U,	// MTCRF8
    284863U,	// MTCTR
    284863U,	// MTCTR8
    284863U,	// MTCTR8loop
    284863U,	// MTCTRloop
    302159849U,	// MTDCR
    411191U,	// MTFSB0
    411199U,	// MTFSB1
    19842U,	// MTFSF
    20290U,	// MTFSFI
    17192U,	// MTFSFIo
    268455298U,	// MTFSFb
    17041U,	// MTFSFo
    284717U,	// MTLR
    284717U,	// MTLR8
    268458142U,	// MTMSR
    268454943U,	// MTMSRD
    200051U,	// MTOCRF
    200051U,	// MTOCRF8
    268458122U,	// MTSPR
    268458122U,	// MTSPR8
    219301U,	// MTSR
    268456726U,	// MTSRIN
    278748U,	// MTVRSAVE
    426204U,	// MTVRSAVEv
    284678U,	// MTVSCR
    268454959U,	// MTVSRD
    268454052U,	// MTVSRWA
    268461230U,	// MTVSRWZ
    19359U,	// MULHD
    23664U,	// MULHDU
    17716U,	// MULHDUo
    16846U,	// MULHDo
    24279U,	// MULHW
    23790U,	// MULHWU
    17760U,	// MULHWUo
    17797U,	// MULHWo
    19391U,	// MULLD
    16870U,	// MULLDo
    20340U,	// MULLI
    20340U,	// MULLI8
    24321U,	// MULLW
    17813U,	// MULLWo
    11008U,	// MoveGOTtoLR
    10996U,	// MovePCtoLR
    10438U,	// MovePCtoLR8
    19445U,	// NAND
    19445U,	// NAND8
    16884U,	// NAND8o
    16884U,	// NANDo
    268455347U,	// NEG
    268455347U,	// NEG8
    268452506U,	// NEG8o
    268452506U,	// NEGo
    11276U,	// NOP
    9473U,	// NOP_GT_PWR6
    9485U,	// NOP_GT_PWR7
    22596U,	// NOR
    22596U,	// NOR8
    17535U,	// NOR8o
    17535U,	// NORo
    22589U,	// OR
    22589U,	// OR8
    17536U,	// OR8o
    19203U,	// ORC
    19203U,	// ORC8
    16798U,	// ORC8o
    16798U,	// ORCo
    20494U,	// ORI
    20494U,	// ORI8
    23153U,	// ORIS
    23153U,	// ORIS8
    17536U,	// ORo
    268454994U,	// POPCNTD
    268460142U,	// POPCNTW
    11093U,	// PPC32GOT
    11103U,	// PPC32PICGOT
    20451U,	// QVALIGNI
    20451U,	// QVALIGNIb
    20451U,	// QVALIGNIs
    20499U,	// QVESPLATI
    20499U,	// QVESPLATIb
    20499U,	// QVESPLATIs
    268458182U,	// QVFABS
    268458182U,	// QVFABSs
    19258U,	// QVFADD
    22836U,	// QVFADDS
    22836U,	// QVFADDSs
    268454822U,	// QVFCFID
    268458374U,	// QVFCFIDS
    268459128U,	// QVFCFIDU
    268458703U,	// QVFCFIDUS
    268454822U,	// QVFCFIDb
    22453U,	// QVFCMPEQ
    22453U,	// QVFCMPEQb
    22453U,	// QVFCMPEQbs
    23538U,	// QVFCMPGT
    23538U,	// QVFCMPGTb
    23538U,	// QVFCMPGTbs
    23554U,	// QVFCMPLT
    23554U,	// QVFCMPLTb
    23554U,	// QVFCMPLTbs
    21237U,	// QVFCPSGN
    21237U,	// QVFCPSGNs
    268454831U,	// QVFCTID
    268459138U,	// QVFCTIDU
    268461184U,	// QVFCTIDUZ
    268461121U,	// QVFCTIDZ
    268454831U,	// QVFCTIDb
    268459751U,	// QVFCTIW
    268459254U,	// QVFCTIWU
    268461195U,	// QVFCTIWUZ
    268461206U,	// QVFCTIWZ
    20739U,	// QVFLOGICAL
    20739U,	// QVFLOGICALb
    20739U,	// QVFLOGICALs
    19266U,	// QVFMADD
    22845U,	// QVFMADDS
    22845U,	// QVFMADDSs
    268458035U,	// QVFMR
    268458035U,	// QVFMRb
    268458035U,	// QVFMRs
    19045U,	// QVFMSUB
    22815U,	// QVFMSUBS
    22815U,	// QVFMSUBSs
    20831U,	// QVFMUL
    23168U,	// QVFMULS
    23168U,	// QVFMULSs
    268458190U,	// QVFNABS
    268458190U,	// QVFNABSs
    268455344U,	// QVFNEG
    268455344U,	// QVFNEGs
    19275U,	// QVFNMADD
    22855U,	// QVFNMADDS
    22855U,	// QVFNMADDSs
    19054U,	// QVFNMSUB
    22825U,	// QVFNMSUBS
    22825U,	// QVFNMSUBSs
    21043U,	// QVFPERM
    21043U,	// QVFPERMs
    268455154U,	// QVFRE
    268458456U,	// QVFRES
    268458456U,	// QVFRESs
    268456476U,	// QVFRIM
    268456476U,	// QVFRIMs
    268456710U,	// QVFRIN
    268456710U,	// QVFRINs
    268457560U,	// QVFRIP
    268457560U,	// QVFRIPs
    268461170U,	// QVFRIZ
    268461170U,	// QVFRIZs
    268457800U,	// QVFRSP
    268457800U,	// QVFRSPs
    268455169U,	// QVFRSQRTE
    268458464U,	// QVFRSQRTES
    268458464U,	// QVFRSQRTESs
    20783U,	// QVFSEL
    20783U,	// QVFSELb
    20783U,	// QVFSELbb
    20783U,	// QVFSELbs
    19037U,	// QVFSUB
    22806U,	// QVFSUBS
    22806U,	// QVFSUBSs
    21226U,	// QVFTSTNAN
    21226U,	// QVFTSTNANb
    21226U,	// QVFTSTNANbs
    19312U,	// QVFXMADD
    22895U,	// QVFXMADDS
    20839U,	// QVFXMUL
    23177U,	// QVFXMULS
    19285U,	// QVFXXCPNMADD
    22866U,	// QVFXXCPNMADDS
    19322U,	// QVFXXMADD
    22906U,	// QVFXXMADDS
    19299U,	// QVFXXNPMADD
    22881U,	// QVFXXNPMADDS
    125849301U,	// QVGPCI
    285238089U,	// QVLFCDUX
    285231368U,	// QVLFCDUXA
    285237561U,	// QVLFCDX
    285231288U,	// QVLFCDXA
    285238166U,	// QVLFCSUX
    285231412U,	// QVLFCSUXA
    285237917U,	// QVLFCSX
    285231328U,	// QVLFCSXA
    285237917U,	// QVLFCSXs
    92300126U,	// QVLFDUX
    285231391U,	// QVLFDUXA
    285237597U,	// QVLFDX
    285231309U,	// QVLFDXA
    285237597U,	// QVLFDXb
    285237524U,	// QVLFIWAX
    285231277U,	// QVLFIWAXA
    285238305U,	// QVLFIWZX
    285231467U,	// QVLFIWZXA
    92300203U,	// QVLFSUX
    285231435U,	// QVLFSUXA
    285237951U,	// QVLFSX
    285231349U,	// QVLFSXA
    285237951U,	// QVLFSXb
    285237951U,	// QVLFSXs
    285237614U,	// QVLPCLDX
    285237968U,	// QVLPCLSX
    3957456U,	// QVLPCLSXint
    285237624U,	// QVLPCRDX
    285237988U,	// QVLPCRSX
    285238099U,	// QVSTFCDUX
    285231379U,	// QVSTFCDUXA
    285233357U,	// QVSTFCDUXI
    285231180U,	// QVSTFCDUXIA
    285237570U,	// QVSTFCDX
    285231298U,	// QVSTFCDXA
    285233315U,	// QVSTFCDXI
    285231134U,	// QVSTFCDXIA
    285238176U,	// QVSTFCSUX
    285231423U,	// QVSTFCSUXA
    285233380U,	// QVSTFCSUXI
    285231205U,	// QVSTFCSUXIA
    285237926U,	// QVSTFCSX
    285231338U,	// QVSTFCSXA
    285233336U,	// QVSTFCSXI
    285231157U,	// QVSTFCSXIA
    285237926U,	// QVSTFCSXs
    92447591U,	// QVSTFDUX
    285231401U,	// QVSTFDUXA
    285233369U,	// QVSTFDUXI
    285231193U,	// QVSTFDUXIA
    285237605U,	// QVSTFDX
    285231318U,	// QVSTFDXA
    285233326U,	// QVSTFDXI
    285231146U,	// QVSTFDXIA
    285237605U,	// QVSTFDXb
    285238277U,	// QVSTFIWX
    285231456U,	// QVSTFIWXA
    92447668U,	// QVSTFSUX
    285231445U,	// QVSTFSUXA
    285233392U,	// QVSTFSUXI
    285231218U,	// QVSTFSUXIA
    92447668U,	// QVSTFSUXs
    285237959U,	// QVSTFSX
    285231358U,	// QVSTFSXA
    285233347U,	// QVSTFSXI
    285231169U,	// QVSTFSXIA
    285237959U,	// QVSTFSXs
    10916U,	// RESTORE_CR
    11033U,	// RESTORE_CRBIT
    10797U,	// RESTORE_VRSAVE
    11207U,	// RFCI
    11218U,	// RFDI
    11223U,	// RFI
    11190U,	// RFID
    11212U,	// RFMCI
    20760U,	// RLDCL
    17292U,	// RLDCLo
    22498U,	// RLDCR
    17512U,	// RLDCRo
    19145U,	// RLDIC
    20767U,	// RLDICL
    20767U,	// RLDICL_32_64
    17300U,	// RLDICLo
    22518U,	// RLDICR
    17520U,	// RLDICRo
    16790U,	// RLDICo
    1384140667U,	// RLDIMI
    1384137521U,	// RLDIMIo
    1652576131U,	// RLWIMI
    1652576131U,	// RLWIMI8
    1652572986U,	// RLWIMI8o
    20355U,	// RLWIMIbm
    1652572986U,	// RLWIMIo
    17210U,	// RLWIMIobm
    21028U,	// RLWINM
    21028U,	// RLWINM8
    17341U,	// RLWINM8o
    21028U,	// RLWINMbm
    17341U,	// RLWINMo
    17341U,	// RLWINMobm
    21036U,	// RLWNM
    21036U,	// RLWNM8
    17350U,	// RLWNM8o
    21036U,	// RLWNMbm
    17350U,	// RLWNMo
    17350U,	// RLWNMobm
    20261U,	// ROTRDI
    17174U,	// ROTRDIo
    20609U,	// ROTRWI
    17274U,	// ROTRWIo
    10573U,	// ReadTB
    281366U,	// SC
    10017U,	// SELECT_CC_F4
    10249U,	// SELECT_CC_F8
    10042U,	// SELECT_CC_I4
    10294U,	// SELECT_CC_I8
    10591U,	// SELECT_CC_QBRC
    10620U,	// SELECT_CC_QFRC
    10709U,	// SELECT_CC_QSRC
    10680U,	// SELECT_CC_VRRC
    10649U,	// SELECT_CC_VSFRC
    10738U,	// SELECT_CC_VSRC
    10031U,	// SELECT_F4
    10263U,	// SELECT_F8
    10056U,	// SELECT_I4
    10427U,	// SELECT_I8
    10607U,	// SELECT_QBRC
    10636U,	// SELECT_QFRC
    10725U,	// SELECT_QSRC
    10696U,	// SELECT_VRRC
    10666U,	// SELECT_VSFRC
    10754U,	// SELECT_VSRC
    11141U,	// SLBIA
    281806U,	// SLBIE
    268455078U,	// SLBMFEE
    268455161U,	// SLBMTE
    19412U,	// SLD
    20214U,	// SLDI
    17133U,	// SLDIo
    16878U,	// SLDo
    24344U,	// SLW
    24344U,	// SLW8
    17821U,	// SLW8o
    20556U,	// SLWI
    17231U,	// SLWIo
    17821U,	// SLWo
    10928U,	// SPILL_CR
    11048U,	// SPILL_CRBIT
    10813U,	// SPILL_VRSAVE
    19252U,	// SRAD
    20189U,	// SRADI
    17121U,	// SRADIo
    16815U,	// SRADo
    24206U,	// SRAW
    20520U,	// SRAWI
    17219U,	// SRAWIo
    17790U,	// SRAWo
    19490U,	// SRD
    20255U,	// SRDI
    17167U,	// SRDIo
    16898U,	// SRDo
    24584U,	// SRW
    24584U,	// SRW8
    17827U,	// SRW8o
    20603U,	// SRWI
    17267U,	// SRWIo
    17827U,	// SRWo
    58739244U,	// STB
    58739244U,	// STB8
    25050U,	// STBCIX
    285230562U,	// STBCX
    84057181U,	// STBU
    84057181U,	// STBU8
    92447554U,	// STBUX
    92447554U,	// STBUX8
    285237555U,	// STBX
    285237555U,	// STBX8
    58739803U,	// STD
    285237872U,	// STDBRX
    25065U,	// STDCIX
    285230570U,	// STDCX
    84057233U,	// STDU
    92447607U,	// STDUX
    285237649U,	// STDX
    58739609U,	// STFD
    84057193U,	// STFDU
    92447593U,	// STFDUX
    285237607U,	// STFDX
    285238279U,	// STFIWX
    58743294U,	// STFS
    84057299U,	// STFSU
    92447670U,	// STFSUX
    285237961U,	// STFSX
    58740331U,	// STH
    58740331U,	// STH8
    285237887U,	// STHBRX
    25073U,	// STHCIX
    285230578U,	// STHCX
    84057262U,	// STHU
    84057262U,	// STHU8
    92447621U,	// STHUX
    92447621U,	// STHUX8
    285237716U,	// STHX
    285237716U,	// STHX8
    58744610U,	// STMW
    20631U,	// STSWI
    285237547U,	// STVEBX
    285237708U,	// STVEHX
    285238269U,	// STVEWX
    285238239U,	// STVX
    285233526U,	// STVXL
    58744951U,	// STW
    58744951U,	// STW8
    285237902U,	// STWBRX
    25081U,	// STWCIX
    285230586U,	// STWCX
    84057352U,	// STWU
    84057352U,	// STWU8
    92447678U,	// STWUX
    92447678U,	// STWUX8
    285238287U,	// STWX
    285238287U,	// STWX8
    285237641U,	// STXSDX
    285237483U,	// STXVD2X
    285237500U,	// STXVW4X
    19768U,	// SUBF
    19768U,	// SUBF8
    17034U,	// SUBF8o
    19124U,	// SUBFC
    19124U,	// SUBFC8
    16766U,	// SUBFC8o
    16766U,	// SUBFCo
    19638U,	// SUBFE
    19638U,	// SUBFE8
    16968U,	// SUBFE8o
    16968U,	// SUBFEo
    19152U,	// SUBFIC
    19152U,	// SUBFIC8
    268455139U,	// SUBFME
    268455139U,	// SUBFME8
    268452440U,	// SUBFME8o
    268452440U,	// SUBFMEo
    268455210U,	// SUBFZE
    268455210U,	// SUBFZE8
    268452481U,	// SUBFZE8o
    268452481U,	// SUBFZEo
    17034U,	// SUBFo
    20161U,	// SUBI
    19131U,	// SUBIC
    16774U,	// SUBICo
    23133U,	// SUBIS
    281338U,	// SYNC
    427299U,	// TABORT
    4424051U,	// TABORTDC
    4686537U,	// TABORTDCI
    4424100U,	// TABORTWC
    4686549U,	// TABORTWCI
    313735U,	// TAILB
    313735U,	// TAILB8
    329561U,	// TAILBA
    329561U,	// TAILBA8
    11297U,	// TAILBCTR
    11297U,	// TAILBCTR8
    246743U,	// TBEGIN
    282875U,	// TCHECK
    11021U,	// TCHECK_RET
    269027024U,	// TCRETURNai
    269026931U,	// TCRETURNai8
    269011738U,	// TCRETURNdi
    269010561U,	// TCRETURNdi8
    268982216U,	// TCRETURNri
    268977807U,	// TCRETURNri8
    150615U,	// TD
    151349U,	// TDI
    246267U,	// TEND
    11147U,	// TLBIA
    4885717U,	// TLBIE
    282919U,	// TLBIEL
    268460299U,	// TLBIVAX
    281528U,	// TLBLD
    282477U,	// TLBLI
    11195U,	// TLBRE
    19691U,	// TLBRE2
    268460694U,	// TLBSX
    25238U,	// TLBSX2
    17922U,	// TLBSX2D
    11155U,	// TLBSYNC
    11201U,	// TLBWE
    19724U,	// TLBWE2
    11271U,	// TRAP
    9463U,	// TRECHKPT
    426923U,	// TRECLAIM
    246923U,	// TSR
    155744U,	// TW
    151710U,	// TWI
    268453533U,	// UPDATE_VRSAVE
    10905U,	// UpdateGBR
    24709U,	// VADDCUW
    21979U,	// VADDFP
    22769U,	// VADDSBS
    23086U,	// VADDSHS
    23328U,	// VADDSWS
    20900U,	// VADDUBM
    22797U,	// VADDUBS
    20928U,	// VADDUDM
    20967U,	// VADDUHM
    23114U,	// VADDUHS
    21086U,	// VADDUWM
    23355U,	// VADDUWS
    19475U,	// VAND
    19117U,	// VANDC
    18884U,	// VAVGSB
    19977U,	// VAVGSH
    24598U,	// VAVGSW
    19002U,	// VAVGUB
    20089U,	// VAVGUH
    24727U,	// VAVGUW
    1921016504U,	// VCFSX
    2147508920U,	// VCFSX_0
    1921016702U,	// VCFUX
    2147509118U,	// VCFUX_0
    22552U,	// VCIPHER
    23585U,	// VCIPHERLAST
    268454538U,	// VCLZB
    268455050U,	// VCLZD
    268455598U,	// VCLZH
    268460242U,	// VCLZW
    21943U,	// VCMPBFP
    17419U,	// VCMPBFPo
    22042U,	// VCMPEQFP
    17440U,	// VCMPEQFPo
    19027U,	// VCMPEQUB
    16695U,	// VCMPEQUBo
    19560U,	// VCMPEQUD
    16915U,	// VCMPEQUDo
    20114U,	// VCMPEQUH
    17075U,	// VCMPEQUHo
    24752U,	// VCMPEQUW
    17852U,	// VCMPEQUWo
    21996U,	// VCMPGEFP
    17429U,	// VCMPGEFPo
    22052U,	// VCMPGTFP
    17451U,	// VCMPGTFPo
    18937U,	// VCMPGTSB
    16676U,	// VCMPGTSBo
    19519U,	// VCMPGTSD
    16904U,	// VCMPGTSDo
    20030U,	// VCMPGTSH
    17056U,	// VCMPGTSHo
    24643U,	// VCMPGTSW
    17833U,	// VCMPGTSWo
    19064U,	// VCMPGTUB
    16730U,	// VCMPGTUBo
    19570U,	// VCMPGTUD
    16926U,	// VCMPGTUDo
    20124U,	// VCMPGTUH
    17086U,	// VCMPGTUHo
    24762U,	// VCMPGTUW
    17863U,	// VCMPGTUWo
    1921014677U,	// VCTSXS
    2147507093U,	// VCTSXS_0
    1921014685U,	// VCTUXS
    2147507101U,	// VCTUXS_0
    23871U,	// VEQV
    268457469U,	// VEXPTEFP
    268457443U,	// VLOGEFP
    21970U,	// VMADDFP
    22062U,	// VMAXFP
    18956U,	// VMAXSB
    19529U,	// VMAXSD
    20049U,	// VMAXSH
    24660U,	// VMAXSW
    19074U,	// VMAXUB
    19580U,	// VMAXUD
    20134U,	// VMAXUH
    24772U,	// VMAXUW
    23063U,	// VMHADDSHS
    23074U,	// VMHRADDSHS
    22034U,	// VMINFP
    18920U,	// VMINSB
    19511U,	// VMINSD
    20013U,	// VMINSH
    24626U,	// VMINSW
    19010U,	// VMINUB
    19552U,	// VMINUD
    20097U,	// VMINUH
    24735U,	// VMINUW
    20956U,	// VMLADDUHM
    18826U,	// VMRGHB
    19925U,	// VMRGHH
    24262U,	// VMRGHW
    18834U,	// VMRGLB
    19933U,	// VMRGLH
    24304U,	// VMRGLW
    20881U,	// VMSUMMBM
    20937U,	// VMSUMSHM
    23095U,	// VMSUMSHS
    20909U,	// VMSUMUBM
    20976U,	// VMSUMUHM
    23123U,	// VMSUMUHS
    18875U,	// VMULESB
    19968U,	// VMULESH
    24589U,	// VMULESW
    18993U,	// VMULEUB
    20080U,	// VMULEUH
    24718U,	// VMULEUW
    18928U,	// VMULOSB
    20021U,	// VMULOSH
    24634U,	// VMULOSW
    19018U,	// VMULOUB
    20105U,	// VMULOUH
    24743U,	// VMULOUW
    21095U,	// VMULUWM
    19460U,	// VNAND
    22542U,	// VNCIPHER
    23571U,	// VNCIPHERLAST
    21952U,	// VNMSUBFP
    22609U,	// VNOR
    22622U,	// VOR
    19216U,	// VORC
    21052U,	// VPERM
    22635U,	// VPERMXOR
    25149U,	// VPKPX
    23201U,	// VPKSHSS
    23258U,	// VPKSHUS
    23210U,	// VPKSWSS
    23276U,	// VPKSWUS
    21059U,	// VPKUHUM
    23267U,	// VPKUHUS
    21068U,	// VPKUWUM
    23285U,	// VPKUWUS
    18854U,	// VPMSUMB
    19425U,	// VPMSUMD
    19953U,	// VPMSUMH
    24360U,	// VPMSUMW
    268454434U,	// VPOPCNTB
    268454993U,	// VPOPCNTD
    268455521U,	// VPOPCNTH
    268460141U,	// VPOPCNTW
    268457462U,	// VREFP
    268456442U,	// VRFIM
    268456703U,	// VRFIN
    268457526U,	// VRFIP
    268461136U,	// VRFIZ
    18842U,	// VRLB
    19405U,	// VRLD
    19941U,	// VRLH
    24336U,	// VRLW
    268457479U,	// VRSQRTEFP
    268460569U,	// VSBOX
    20797U,	// VSEL
    19239U,	// VSHASIGMAD
    24193U,	// VSHASIGMAW
    20826U,	// VSL
    18848U,	// VSLB
    19411U,	// VSLD
    20461U,	// VSLDOI
    19947U,	// VSLH
    21311U,	// VSLO
    24343U,	// VSLW
    1921010202U,	// VSPLTB
    1921011289U,	// VSPLTH
    134236629U,	// VSPLTISB
    134237722U,	// VSPLTISH
    134242334U,	// VSPLTISW
    1921015900U,	// VSPLTW
    22700U,	// VSR
    18819U,	// VSRAB
    19251U,	// VSRAD
    19903U,	// VSRAH
    24205U,	// VSRAW
    18869U,	// VSRB
    19497U,	// VSRD
    19962U,	// VSRH
    21317U,	// VSRO
    24583U,	// VSRW
    24700U,	// VSUBCUW
    21962U,	// VSUBFP
    22760U,	// VSUBSBS
    23054U,	// VSUBSHS
    23319U,	// VSUBSWS
    20891U,	// VSUBUBM
    22788U,	// VSUBUBS
    20919U,	// VSUBUDM
    20947U,	// VSUBUHM
    23105U,	// VSUBUHS
    21077U,	// VSUBUWM
    23346U,	// VSUBUWS
    23309U,	// VSUM2SWS
    22750U,	// VSUM4SBS
    23044U,	// VSUM4SHS
    22778U,	// VSUM4UBS
    23337U,	// VSUMSWS
    268460596U,	// VUPKHPX
    268454348U,	// VUPKHSB
    268455441U,	// VUPKHSH
    268460612U,	// VUPKLPX
    268454367U,	// VUPKLSB
    268455460U,	// VUPKLSH
    22653U,	// VXOR
    33577085U,	// V_SET0
    33577085U,	// V_SET0B
    33577085U,	// V_SET0H
    5005342U,	// V_SETALLONES
    5005342U,	// V_SETALLONESB
    5005342U,	// V_SETALLONESH
    285692U,	// WAIT
    281775U,	// WRTEE
    282426U,	// WRTEEI
    22630U,	// XOR
    22630U,	// XOR8
    17541U,	// XOR8o
    20493U,	// XORI
    20493U,	// XORI8
    23152U,	// XORIS
    23152U,	// XORIS8
    17541U,	// XORo
    268457240U,	// XSABSDP
    21442U,	// XSADDDP
    21723U,	// XSCMPODP
    21855U,	// XSCMPUDP
    21683U,	// XSCPSGNDP
    268457769U,	// XSCVDPSP
    268458384U,	// XSCVDPSXDS
    268458829U,	// XSCVDPSXWS
    268458420U,	// XSCVDPUXDS
    268458865U,	// XSCVDPUXWS
    268457189U,	// XSCVSPDP
    268456916U,	// XSCVSXDDP
    268456938U,	// XSCVUXDDP
    21865U,	// XSDIVDP
    2457883546U,	// XSMADDADP
    2457883805U,	// XSMADDMDP
    21925U,	// XSMAXDP
    21705U,	// XSMINDP
    2457883500U,	// XSMSUBADP
    2457883759U,	// XSMSUBMDP
    21573U,	// XSMULDP
    268457220U,	// XSNABSDP
    268457011U,	// XSNEGDP
    2457883522U,	// XSNMADDADP
    2457883781U,	// XSNMADDMDP
    2457883476U,	// XSNMSUBADP
    2457883735U,	// XSNMSUBMDP
    268455925U,	// XSRDPI
    268454616U,	// XSRDPIC
    268456449U,	// XSRDPIM
    268457533U,	// XSRDPIP
    268461143U,	// XSRDPIZ
    268456971U,	// XSREDP
    268456987U,	// XSRSQRTEDP
    268457269U,	// XSSQRTDP
    21424U,	// XSSUBDP
    21874U,	// XSTDIVDP
    268457279U,	// XSTSQRTDP
    268457249U,	// XVABSDP
    268457818U,	// XVABSSP
    21451U,	// XVADDDP
    22167U,	// XVADDSP
    21753U,	// XVCMPEQDP
    17395U,	// XVCMPEQDPo
    22333U,	// XVCMPEQSP
    17481U,	// XVCMPEQSPo
    21504U,	// XVCMPGEDP
    17383U,	// XVCMPGEDPo
    22198U,	// XVCMPGESP
    17469U,	// XVCMPGESPo
    21802U,	// XVCMPGTDP
    17407U,	// XVCMPGTDPo
    22371U,	// XVCMPGTSP
    17500U,	// XVCMPGTSPo
    21694U,	// XVCPSGNDP
    22293U,	// XVCPSGNSP
    268457779U,	// XVCVDPSP
    268458396U,	// XVCVDPSXDS
    268458841U,	// XVCVDPSXWS
    268458432U,	// XVCVDPUXDS
    268458877U,	// XVCVDPUXWS
    268457199U,	// XVCVSPDP
    268458408U,	// XVCVSPSXDS
    268458853U,	// XVCVSPSXWS
    268458444U,	// XVCVSPUXDS
    268458889U,	// XVCVSPUXWS
    268456927U,	// XVCVSXDDP
    268457632U,	// XVCVSXDSP
    268457359U,	// XVCVSXWDP
    268457878U,	// XVCVSXWSP
    268456949U,	// XVCVUXDDP
    268457643U,	// XVCVUXDSP
    268457370U,	// XVCVUXWDP
    268457889U,	// XVCVUXWSP
    21894U,	// XVDIVDP
    22413U,	// XVDIVSP
    2457883557U,	// XVMADDADP
    2457884291U,	// XVMADDASP
    2457883816U,	// XVMADDMDP
    2457884426U,	// XVMADDMSP
    21934U,	// XVMAXDP
    22444U,	// XVMAXSP
    21714U,	// XVMINDP
    22304U,	// XVMINSP
    2457883511U,	// XVMSUBADP
    2457884268U,	// XVMSUBASP
    2457883770U,	// XVMSUBMDP
    2457884403U,	// XVMSUBMSP
    21582U,	// XVMULDP
    22238U,	// XVMULSP
    268457230U,	// XVNABSDP
    268457808U,	// XVNABSSP
    268457020U,	// XVNEGDP
    268457685U,	// XVNEGSP
    2457883534U,	// XVNMADDADP
    2457884279U,	// XVNMADDASP
    2457883793U,	// XVNMADDMDP
    2457884414U,	// XVNMADDMSP
    2457883488U,	// XVNMSUBADP
    2457884256U,	// XVNMSUBASP
    2457883747U,	// XVNMSUBMDP
    2457884391U,	// XVNMSUBMSP
    268455933U,	// XVRDPI
    268454625U,	// XVRDPIC
    268456458U,	// XVRDPIM
    268457542U,	// XVRDPIP
    268461152U,	// XVRDPIZ
    268456979U,	// XVREDP
    268457665U,	// XVRESP
    268455941U,	// XVRSPI
    268454634U,	// XVRSPIC
    268456467U,	// XVRSPIM
    268457551U,	// XVRSPIP
    268461161U,	// XVRSPIZ
    268456999U,	// XVRSQRTEDP
    268457673U,	// XVRSQRTESP
    268457301U,	// XVSQRTDP
    268457849U,	// XVSQRTSP
    21433U,	// XVSUBDP
    22158U,	// XVSUBSP
    21884U,	// XVTDIVDP
    22403U,	// XVTDIVSP
    268457290U,	// XVTSQRTDP
    268457838U,	// XVTSQRTSP
    19434U,	// XXLAND
    19099U,	// XXLANDC
    23855U,	// XXLEQV
    19442U,	// XXLNAND
    22593U,	// XXLNOR
    22586U,	// XXLOR
    19200U,	// XXLORC
    22586U,	// XXLORf
    22627U,	// XXLXOR
    24270U,	// XXMRGHW
    24312U,	// XXMRGLW
    20228U,	// XXPERMDI
    20803U,	// XXSEL
    20527U,	// XXSLDWI
    24676U,	// XXSPLTW
    150161U,	// gBC
    149341U,	// gBCA
    153777U,	// gBCCTR
    151889U,	// gBCCTRL
    151827U,	// gBCL
    149635U,	// gBCLA
    153633U,	// gBCLR
    151882U,	// gBCLRL
    0U
  };

  static const uint16_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// FRAME_ALLOC
    0U,	// ADD4
    0U,	// ADD4TLS
    0U,	// ADD4o
    0U,	// ADD8
    0U,	// ADD8TLS
    0U,	// ADD8TLS_
    0U,	// ADD8o
    0U,	// ADDC
    0U,	// ADDC8
    0U,	// ADDC8o
    0U,	// ADDCo
    0U,	// ADDE
    0U,	// ADDE8
    0U,	// ADDE8o
    0U,	// ADDEo
    1U,	// ADDI
    1U,	// ADDI8
    1U,	// ADDIC
    1U,	// ADDIC8
    1U,	// ADDICo
    1U,	// ADDIS
    1U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISdtprelHA32
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIdtprelL
    0U,	// ADDIdtprelL32
    0U,	// ADDItlsgdL
    0U,	// ADDItlsgdL32
    0U,	// ADDItlsgdLADDR
    0U,	// ADDItlsgdLADDR32
    0U,	// ADDItlsldL
    0U,	// ADDItlsldL32
    0U,	// ADDItlsldLADDR
    0U,	// ADDItlsldLADDR32
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8o
    0U,	// ADDMEo
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8o
    0U,	// ADDZEo
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND
    0U,	// AND8
    0U,	// AND8o
    0U,	// ANDC
    0U,	// ANDC8
    0U,	// ANDC8o
    0U,	// ANDCo
    2U,	// ANDISo
    2U,	// ANDISo8
    2U,	// ANDIo
    2U,	// ANDIo8
    0U,	// ANDIo_1_EQ_BIT
    0U,	// ANDIo_1_EQ_BIT8
    0U,	// ANDIo_1_GT_BIT
    0U,	// ANDIo_1_GT_BIT8
    0U,	// ANDo
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATTN
    0U,	// B
    0U,	// BA
    0U,	// BC
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCCTR
    0U,	// BCCCTR8
    0U,	// BCCCTRL
    0U,	// BCCCTRL8
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCLR
    0U,	// BCCLRL
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTR8n
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCCTRL8n
    0U,	// BCCTRLn
    0U,	// BCCTRn
    0U,	// BCL
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLRLn
    0U,	// BCLRn
    0U,	// BCLalways
    0U,	// BCLn
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BCTRL8_LDinto_toc
    0U,	// BCn
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_TLS
    0U,	// BL8_TLS
    0U,	// BL8_TLS_
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLR
    0U,	// BLR8
    0U,	// BLRL
    0U,	// BL_TLS
    0U,	// BPERMD
    0U,	// BRINC
    19U,	// CLRLSLDI
    19U,	// CLRLSLDIo
    52U,	// CLRLSLWI
    52U,	// CLRLSLWIo
    3U,	// CLRRDI
    3U,	// CLRRDIo
    4U,	// CLRRWI
    4U,	// CLRRWIo
    0U,	// CMPB
    0U,	// CMPB8
    0U,	// CMPD
    1U,	// CMPDI
    0U,	// CMPLD
    2U,	// CMPLDI
    0U,	// CMPLW
    2U,	// CMPLWI
    0U,	// CMPW
    1U,	// CMPWI
    0U,	// CNTLZD
    0U,	// CNTLZDo
    0U,	// CNTLZW
    0U,	// CNTLZW8
    0U,	// CNTLZW8o
    0U,	// CNTLZWo
    0U,	// CR6SET
    0U,	// CR6UNSET
    0U,	// CRAND
    0U,	// CRANDC
    0U,	// CREQV
    0U,	// CRNAND
    0U,	// CRNOR
    0U,	// CROR
    0U,	// CRORC
    5U,	// CRSET
    5U,	// CRUNSET
    0U,	// CRXOR
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBT
    0U,	// DCBTST
    0U,	// DCBZ
    0U,	// DCBZL
    0U,	// DCCCI
    0U,	// DIVD
    0U,	// DIVDE
    0U,	// DIVDEU
    0U,	// DIVDEUo
    0U,	// DIVDEo
    0U,	// DIVDU
    0U,	// DIVDUo
    0U,	// DIVDo
    0U,	// DIVW
    0U,	// DIVWE
    0U,	// DIVWEU
    0U,	// DIVWEUo
    0U,	// DIVWEo
    0U,	// DIVWU
    0U,	// DIVWUo
    0U,	// DIVWo
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    0U,	// EQV
    0U,	// EQV8
    0U,	// EQV8o
    0U,	// EQVo
    0U,	// EVABS
    0U,	// EVADDIW
    0U,	// EVADDSMIAAW
    0U,	// EVADDSSIAAW
    0U,	// EVADDUMIAAW
    0U,	// EVADDUSIAAW
    0U,	// EVADDW
    0U,	// EVAND
    0U,	// EVANDC
    0U,	// EVCMPEQ
    0U,	// EVCMPGTS
    0U,	// EVCMPGTU
    0U,	// EVCMPLTS
    0U,	// EVCMPLTU
    0U,	// EVCNTLSW
    0U,	// EVCNTLZW
    0U,	// EVDIVWS
    0U,	// EVDIVWU
    0U,	// EVEQV
    0U,	// EVEXTSB
    0U,	// EVEXTSH
    0U,	// EVLDD
    0U,	// EVLDDX
    0U,	// EVLDH
    0U,	// EVLDHX
    0U,	// EVLDW
    0U,	// EVLDWX
    0U,	// EVLHHESPLAT
    0U,	// EVLHHESPLATX
    0U,	// EVLHHOSSPLAT
    0U,	// EVLHHOSSPLATX
    0U,	// EVLHHOUSPLAT
    0U,	// EVLHHOUSPLATX
    0U,	// EVLWHE
    0U,	// EVLWHEX
    0U,	// EVLWHOS
    0U,	// EVLWHOSX
    0U,	// EVLWHOU
    0U,	// EVLWHOUX
    0U,	// EVLWHSPLAT
    0U,	// EVLWHSPLATX
    0U,	// EVLWWSPLAT
    0U,	// EVLWWSPLATX
    0U,	// EVMERGEHI
    0U,	// EVMERGEHILO
    0U,	// EVMERGELO
    0U,	// EVMERGELOHI
    0U,	// EVMHEGSMFAA
    0U,	// EVMHEGSMFAN
    0U,	// EVMHEGSMIAA
    0U,	// EVMHEGSMIAN
    0U,	// EVMHEGUMIAA
    0U,	// EVMHEGUMIAN
    0U,	// EVMHESMF
    0U,	// EVMHESMFA
    0U,	// EVMHESMFAAW
    0U,	// EVMHESMFANW
    0U,	// EVMHESMI
    0U,	// EVMHESMIA
    0U,	// EVMHESMIAAW
    0U,	// EVMHESMIANW
    0U,	// EVMHESSF
    0U,	// EVMHESSFA
    0U,	// EVMHESSFAAW
    0U,	// EVMHESSFANW
    0U,	// EVMHESSIAAW
    0U,	// EVMHESSIANW
    0U,	// EVMHEUMI
    0U,	// EVMHEUMIA
    0U,	// EVMHEUMIAAW
    0U,	// EVMHEUMIANW
    0U,	// EVMHEUSIAAW
    0U,	// EVMHEUSIANW
    0U,	// EVMHOGSMFAA
    0U,	// EVMHOGSMFAN
    0U,	// EVMHOGSMIAA
    0U,	// EVMHOGSMIAN
    0U,	// EVMHOGUMIAA
    0U,	// EVMHOGUMIAN
    0U,	// EVMHOSMF
    0U,	// EVMHOSMFA
    0U,	// EVMHOSMFAAW
    0U,	// EVMHOSMFANW
    0U,	// EVMHOSMI
    0U,	// EVMHOSMIA
    0U,	// EVMHOSMIAAW
    0U,	// EVMHOSMIANW
    0U,	// EVMHOSSF
    0U,	// EVMHOSSFA
    0U,	// EVMHOSSFAAW
    0U,	// EVMHOSSFANW
    0U,	// EVMHOSSIAAW
    0U,	// EVMHOSSIANW
    0U,	// EVMHOUMI
    0U,	// EVMHOUMIA
    0U,	// EVMHOUMIAAW
    0U,	// EVMHOUMIANW
    0U,	// EVMHOUSIAAW
    0U,	// EVMHOUSIANW
    0U,	// EVMRA
    0U,	// EVMWHSMF
    0U,	// EVMWHSMFA
    0U,	// EVMWHSMI
    0U,	// EVMWHSMIA
    0U,	// EVMWHSSF
    0U,	// EVMWHSSFA
    0U,	// EVMWHUMI
    0U,	// EVMWHUMIA
    0U,	// EVMWLSMIAAW
    0U,	// EVMWLSMIANW
    0U,	// EVMWLSSIAAW
    0U,	// EVMWLSSIANW
    0U,	// EVMWLUMI
    0U,	// EVMWLUMIA
    0U,	// EVMWLUMIAAW
    0U,	// EVMWLUMIANW
    0U,	// EVMWLUSIAAW
    0U,	// EVMWLUSIANW
    0U,	// EVMWSMF
    0U,	// EVMWSMFA
    0U,	// EVMWSMFAA
    0U,	// EVMWSMFAN
    0U,	// EVMWSMI
    0U,	// EVMWSMIA
    0U,	// EVMWSMIAA
    0U,	// EVMWSMIAN
    0U,	// EVMWSSF
    0U,	// EVMWSSFA
    0U,	// EVMWSSFAA
    0U,	// EVMWSSFAN
    0U,	// EVMWUMI
    0U,	// EVMWUMIA
    0U,	// EVMWUMIAA
    0U,	// EVMWUMIAN
    0U,	// EVNAND
    0U,	// EVNEG
    0U,	// EVNOR
    0U,	// EVOR
    0U,	// EVORC
    0U,	// EVRLW
    4U,	// EVRLWI
    0U,	// EVRNDW
    0U,	// EVSLW
    4U,	// EVSLWI
    0U,	// EVSPLATFI
    0U,	// EVSPLATI
    4U,	// EVSRWIS
    4U,	// EVSRWIU
    0U,	// EVSRWS
    0U,	// EVSRWU
    0U,	// EVSTDD
    0U,	// EVSTDDX
    0U,	// EVSTDH
    0U,	// EVSTDHX
    0U,	// EVSTDW
    0U,	// EVSTDWX
    0U,	// EVSTWHE
    0U,	// EVSTWHEX
    0U,	// EVSTWHO
    0U,	// EVSTWHOX
    0U,	// EVSTWWE
    0U,	// EVSTWWEX
    0U,	// EVSTWWO
    0U,	// EVSTWWOX
    0U,	// EVSUBFSMIAAW
    0U,	// EVSUBFSSIAAW
    0U,	// EVSUBFUMIAAW
    0U,	// EVSUBFUSIAAW
    0U,	// EVSUBFW
    0U,	// EVSUBIFW
    0U,	// EVXOR
    19U,	// EXTLDI
    19U,	// EXTLDIo
    52U,	// EXTLWI
    52U,	// EXTLWIo
    19U,	// EXTRDI
    19U,	// EXTRDIo
    52U,	// EXTRWI
    52U,	// EXTRWIo
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8_32_64
    0U,	// EXTSB8o
    0U,	// EXTSBo
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8_32_64
    0U,	// EXTSH8o
    0U,	// EXTSHo
    0U,	// EXTSW
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64o
    0U,	// EXTSWo
    0U,	// EnforceIEIO
    0U,	// FABSD
    0U,	// FABSDo
    0U,	// FABSS
    0U,	// FABSSo
    0U,	// FADD
    0U,	// FADDS
    0U,	// FADDSo
    0U,	// FADDo
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDSo
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUSo
    0U,	// FCFIDUo
    0U,	// FCFIDo
    0U,	// FCMPUD
    0U,	// FCMPUS
    0U,	// FCPSGND
    0U,	// FCPSGNDo
    0U,	// FCPSGNS
    0U,	// FCPSGNSo
    0U,	// FCTID
    0U,	// FCTIDUZ
    0U,	// FCTIDUZo
    0U,	// FCTIDZ
    0U,	// FCTIDZo
    0U,	// FCTIDo
    0U,	// FCTIW
    0U,	// FCTIWUZ
    0U,	// FCTIWUZo
    0U,	// FCTIWZ
    0U,	// FCTIWZo
    0U,	// FCTIWo
    0U,	// FDIV
    0U,	// FDIVS
    0U,	// FDIVSo
    0U,	// FDIVo
    80U,	// FMADD
    80U,	// FMADDS
    80U,	// FMADDSo
    80U,	// FMADDo
    0U,	// FMR
    0U,	// FMRo
    80U,	// FMSUB
    80U,	// FMSUBS
    80U,	// FMSUBSo
    80U,	// FMSUBo
    0U,	// FMUL
    0U,	// FMULS
    0U,	// FMULSo
    0U,	// FMULo
    0U,	// FNABSD
    0U,	// FNABSDo
    0U,	// FNABSS
    0U,	// FNABSSo
    0U,	// FNEGD
    0U,	// FNEGDo
    0U,	// FNEGS
    0U,	// FNEGSo
    80U,	// FNMADD
    80U,	// FNMADDS
    80U,	// FNMADDSo
    80U,	// FNMADDo
    80U,	// FNMSUB
    80U,	// FNMSUBS
    80U,	// FNMSUBSo
    80U,	// FNMSUBo
    0U,	// FRE
    0U,	// FRES
    0U,	// FRESo
    0U,	// FREo
    0U,	// FRIMD
    0U,	// FRIMDo
    0U,	// FRIMS
    0U,	// FRIMSo
    0U,	// FRIND
    0U,	// FRINDo
    0U,	// FRINS
    0U,	// FRINSo
    0U,	// FRIPD
    0U,	// FRIPDo
    0U,	// FRIPS
    0U,	// FRIPSo
    0U,	// FRIZD
    0U,	// FRIZDo
    0U,	// FRIZS
    0U,	// FRIZSo
    0U,	// FRSP
    0U,	// FRSPo
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTESo
    0U,	// FRSQRTEo
    80U,	// FSELD
    80U,	// FSELDo
    80U,	// FSELS
    80U,	// FSELSo
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTSo
    0U,	// FSQRTo
    0U,	// FSUB
    0U,	// FSUBS
    0U,	// FSUBSo
    0U,	// FSUBo
    0U,	// GETtlsADDR
    0U,	// GETtlsADDR32
    0U,	// GETtlsldADDR
    0U,	// GETtlsldADDR32
    0U,	// ICBI
    0U,	// ICBT
    0U,	// ICCCI
    52U,	// INSLWI
    52U,	// INSLWIo
    19U,	// INSRDI
    19U,	// INSRDIo
    52U,	// INSRWI
    52U,	// INSRWIo
    80U,	// ISEL
    80U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LAx
    0U,	// LBARX
    0U,	// LBARXL
    0U,	// LBZ
    0U,	// LBZ8
    0U,	// LBZCIX
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    0U,	// LD
    0U,	// LDARX
    0U,	// LDARXL
    0U,	// LDBRX
    0U,	// LDCIX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    0U,	// LDgotTprelL
    0U,	// LDgotTprelL32
    0U,	// LDtoc
    0U,	// LDtocBA
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LFD
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHARX
    0U,	// LHARXL
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHBRX8
    0U,	// LHZ
    0U,	// LHZ8
    0U,	// LHZCIX
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    4U,	// LSWI
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    0U,	// LWARXL
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWAX_32
    0U,	// LWA_32
    0U,	// LWBRX
    0U,	// LWBRX8
    0U,	// LWZ
    0U,	// LWZ8
    0U,	// LWZCIX
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    0U,	// LWZtoc
    0U,	// LXSDX
    0U,	// LXVD2X
    0U,	// LXVDSX
    0U,	// LXVW4X
    0U,	// MBAR
    0U,	// MCRF
    0U,	// MCRFS
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFDCR
    0U,	// MFFS
    0U,	// MFFSo
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFMSR
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFSPR
    0U,	// MFSPR8
    0U,	// MFSR
    0U,	// MFSRIN
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVSCR
    0U,	// MFVSRD
    0U,	// MFVSRWZ
    0U,	// MSYNC
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTDCR
    0U,	// MTFSB0
    0U,	// MTFSB1
    80U,	// MTFSF
    0U,	// MTFSFI
    0U,	// MTFSFIo
    0U,	// MTFSFb
    80U,	// MTFSFo
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTMSR
    0U,	// MTMSRD
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTSPR
    0U,	// MTSPR8
    0U,	// MTSR
    0U,	// MTSRIN
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVSCR
    0U,	// MTVSRD
    0U,	// MTVSRWA
    0U,	// MTVSRWZ
    0U,	// MULHD
    0U,	// MULHDU
    0U,	// MULHDUo
    0U,	// MULHDo
    0U,	// MULHW
    0U,	// MULHWU
    0U,	// MULHWUo
    0U,	// MULHWo
    0U,	// MULLD
    0U,	// MULLDo
    1U,	// MULLI
    1U,	// MULLI8
    0U,	// MULLW
    0U,	// MULLWo
    0U,	// MoveGOTtoLR
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    0U,	// NAND
    0U,	// NAND8
    0U,	// NAND8o
    0U,	// NANDo
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8o
    0U,	// NEGo
    0U,	// NOP
    0U,	// NOP_GT_PWR6
    0U,	// NOP_GT_PWR7
    0U,	// NOR
    0U,	// NOR8
    0U,	// NOR8o
    0U,	// NORo
    0U,	// OR
    0U,	// OR8
    0U,	// OR8o
    0U,	// ORC
    0U,	// ORC8
    0U,	// ORC8o
    0U,	// ORCo
    2U,	// ORI
    2U,	// ORI8
    2U,	// ORIS
    2U,	// ORIS8
    0U,	// ORo
    0U,	// POPCNTD
    0U,	// POPCNTW
    0U,	// PPC32GOT
    0U,	// PPC32PICGOT
    112U,	// QVALIGNI
    112U,	// QVALIGNIb
    112U,	// QVALIGNIs
    6U,	// QVESPLATI
    6U,	// QVESPLATIb
    6U,	// QVESPLATIs
    0U,	// QVFABS
    0U,	// QVFABSs
    0U,	// QVFADD
    0U,	// QVFADDS
    0U,	// QVFADDSs
    0U,	// QVFCFID
    0U,	// QVFCFIDS
    0U,	// QVFCFIDU
    0U,	// QVFCFIDUS
    0U,	// QVFCFIDb
    0U,	// QVFCMPEQ
    0U,	// QVFCMPEQb
    0U,	// QVFCMPEQbs
    0U,	// QVFCMPGT
    0U,	// QVFCMPGTb
    0U,	// QVFCMPGTbs
    0U,	// QVFCMPLT
    0U,	// QVFCMPLTb
    0U,	// QVFCMPLTbs
    0U,	// QVFCPSGN
    0U,	// QVFCPSGNs
    0U,	// QVFCTID
    0U,	// QVFCTIDU
    0U,	// QVFCTIDUZ
    0U,	// QVFCTIDZ
    0U,	// QVFCTIDb
    0U,	// QVFCTIW
    0U,	// QVFCTIWU
    0U,	// QVFCTIWUZ
    0U,	// QVFCTIWZ
    144U,	// QVFLOGICAL
    144U,	// QVFLOGICALb
    144U,	// QVFLOGICALs
    7U,	// QVFMADD
    7U,	// QVFMADDS
    7U,	// QVFMADDSs
    0U,	// QVFMR
    0U,	// QVFMRb
    0U,	// QVFMRs
    7U,	// QVFMSUB
    7U,	// QVFMSUBS
    7U,	// QVFMSUBSs
    0U,	// QVFMUL
    0U,	// QVFMULS
    0U,	// QVFMULSs
    0U,	// QVFNABS
    0U,	// QVFNABSs
    0U,	// QVFNEG
    0U,	// QVFNEGs
    7U,	// QVFNMADD
    7U,	// QVFNMADDS
    7U,	// QVFNMADDSs
    7U,	// QVFNMSUB
    7U,	// QVFNMSUBS
    7U,	// QVFNMSUBSs
    80U,	// QVFPERM
    80U,	// QVFPERMs
    0U,	// QVFRE
    0U,	// QVFRES
    0U,	// QVFRESs
    0U,	// QVFRIM
    0U,	// QVFRIMs
    0U,	// QVFRIN
    0U,	// QVFRINs
    0U,	// QVFRIP
    0U,	// QVFRIPs
    0U,	// QVFRIZ
    0U,	// QVFRIZs
    0U,	// QVFRSP
    0U,	// QVFRSPs
    0U,	// QVFRSQRTE
    0U,	// QVFRSQRTES
    0U,	// QVFRSQRTESs
    7U,	// QVFSEL
    7U,	// QVFSELb
    7U,	// QVFSELbb
    7U,	// QVFSELbs
    0U,	// QVFSUB
    0U,	// QVFSUBS
    0U,	// QVFSUBSs
    0U,	// QVFTSTNAN
    0U,	// QVFTSTNANb
    0U,	// QVFTSTNANbs
    7U,	// QVFXMADD
    7U,	// QVFXMADDS
    0U,	// QVFXMUL
    0U,	// QVFXMULS
    7U,	// QVFXXCPNMADD
    7U,	// QVFXXCPNMADDS
    7U,	// QVFXXMADD
    7U,	// QVFXXMADDS
    7U,	// QVFXXNPMADD
    7U,	// QVFXXNPMADDS
    0U,	// QVGPCI
    0U,	// QVLFCDUX
    0U,	// QVLFCDUXA
    0U,	// QVLFCDX
    0U,	// QVLFCDXA
    0U,	// QVLFCSUX
    0U,	// QVLFCSUXA
    0U,	// QVLFCSX
    0U,	// QVLFCSXA
    0U,	// QVLFCSXs
    0U,	// QVLFDUX
    0U,	// QVLFDUXA
    0U,	// QVLFDX
    0U,	// QVLFDXA
    0U,	// QVLFDXb
    0U,	// QVLFIWAX
    0U,	// QVLFIWAXA
    0U,	// QVLFIWZX
    0U,	// QVLFIWZXA
    0U,	// QVLFSUX
    0U,	// QVLFSUXA
    0U,	// QVLFSX
    0U,	// QVLFSXA
    0U,	// QVLFSXb
    0U,	// QVLFSXs
    0U,	// QVLPCLDX
    0U,	// QVLPCLSX
    0U,	// QVLPCLSXint
    0U,	// QVLPCRDX
    0U,	// QVLPCRSX
    0U,	// QVSTFCDUX
    0U,	// QVSTFCDUXA
    0U,	// QVSTFCDUXI
    0U,	// QVSTFCDUXIA
    0U,	// QVSTFCDX
    0U,	// QVSTFCDXA
    0U,	// QVSTFCDXI
    0U,	// QVSTFCDXIA
    0U,	// QVSTFCSUX
    0U,	// QVSTFCSUXA
    0U,	// QVSTFCSUXI
    0U,	// QVSTFCSUXIA
    0U,	// QVSTFCSX
    0U,	// QVSTFCSXA
    0U,	// QVSTFCSXI
    0U,	// QVSTFCSXIA
    0U,	// QVSTFCSXs
    0U,	// QVSTFDUX
    0U,	// QVSTFDUXA
    0U,	// QVSTFDUXI
    0U,	// QVSTFDUXIA
    0U,	// QVSTFDX
    0U,	// QVSTFDXA
    0U,	// QVSTFDXI
    0U,	// QVSTFDXIA
    0U,	// QVSTFDXb
    0U,	// QVSTFIWX
    0U,	// QVSTFIWXA
    0U,	// QVSTFSUX
    0U,	// QVSTFSUXA
    0U,	// QVSTFSUXI
    0U,	// QVSTFSUXIA
    0U,	// QVSTFSUXs
    0U,	// QVSTFSX
    0U,	// QVSTFSXA
    0U,	// QVSTFSXI
    0U,	// QVSTFSXIA
    0U,	// QVSTFSXs
    0U,	// RESTORE_CR
    0U,	// RESTORE_CRBIT
    0U,	// RESTORE_VRSAVE
    0U,	// RFCI
    0U,	// RFDI
    0U,	// RFI
    0U,	// RFID
    0U,	// RFMCI
    16U,	// RLDCL
    16U,	// RLDCLo
    16U,	// RLDCR
    16U,	// RLDCRo
    19U,	// RLDIC
    19U,	// RLDICL
    19U,	// RLDICL_32_64
    19U,	// RLDICLo
    19U,	// RLDICR
    19U,	// RLDICRo
    19U,	// RLDICo
    0U,	// RLDIMI
    0U,	// RLDIMIo
    0U,	// RLWIMI
    0U,	// RLWIMI8
    0U,	// RLWIMI8o
    84U,	// RLWIMIbm
    0U,	// RLWIMIo
    84U,	// RLWIMIobm
    308U,	// RLWINM
    308U,	// RLWINM8
    308U,	// RLWINM8o
    84U,	// RLWINMbm
    308U,	// RLWINMo
    84U,	// RLWINMobm
    304U,	// RLWNM
    304U,	// RLWNM8
    304U,	// RLWNM8o
    84U,	// RLWNMbm
    304U,	// RLWNMo
    84U,	// RLWNMobm
    3U,	// ROTRDI
    3U,	// ROTRDIo
    4U,	// ROTRWI
    4U,	// ROTRWIo
    0U,	// ReadTB
    0U,	// SC
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_QBRC
    0U,	// SELECT_CC_QFRC
    0U,	// SELECT_CC_QSRC
    0U,	// SELECT_CC_VRRC
    0U,	// SELECT_CC_VSFRC
    0U,	// SELECT_CC_VSRC
    0U,	// SELECT_F4
    0U,	// SELECT_F8
    0U,	// SELECT_I4
    0U,	// SELECT_I8
    0U,	// SELECT_QBRC
    0U,	// SELECT_QFRC
    0U,	// SELECT_QSRC
    0U,	// SELECT_VRRC
    0U,	// SELECT_VSFRC
    0U,	// SELECT_VSRC
    0U,	// SLBIA
    0U,	// SLBIE
    0U,	// SLBMFEE
    0U,	// SLBMTE
    0U,	// SLD
    3U,	// SLDI
    3U,	// SLDIo
    0U,	// SLDo
    0U,	// SLW
    0U,	// SLW8
    0U,	// SLW8o
    4U,	// SLWI
    4U,	// SLWIo
    0U,	// SLWo
    0U,	// SPILL_CR
    0U,	// SPILL_CRBIT
    0U,	// SPILL_VRSAVE
    0U,	// SRAD
    3U,	// SRADI
    3U,	// SRADIo
    0U,	// SRADo
    0U,	// SRAW
    4U,	// SRAWI
    4U,	// SRAWIo
    0U,	// SRAWo
    0U,	// SRD
    3U,	// SRDI
    3U,	// SRDIo
    0U,	// SRDo
    0U,	// SRW
    0U,	// SRW8
    0U,	// SRW8o
    4U,	// SRWI
    4U,	// SRWIo
    0U,	// SRWo
    0U,	// STB
    0U,	// STB8
    0U,	// STBCIX
    0U,	// STBCX
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    0U,	// STD
    0U,	// STDBRX
    0U,	// STDCIX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    0U,	// STFD
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    0U,	// STHCIX
    0U,	// STHCX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    0U,	// STMW
    4U,	// STSWI
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    0U,	// STWBRX
    0U,	// STWCIX
    0U,	// STWCX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    0U,	// STXSDX
    0U,	// STXVD2X
    0U,	// STXVW4X
    0U,	// SUBF
    0U,	// SUBF8
    0U,	// SUBF8o
    0U,	// SUBFC
    0U,	// SUBFC8
    0U,	// SUBFC8o
    0U,	// SUBFCo
    0U,	// SUBFE
    0U,	// SUBFE8
    0U,	// SUBFE8o
    0U,	// SUBFEo
    1U,	// SUBFIC
    1U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8o
    0U,	// SUBFMEo
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8o
    0U,	// SUBFZEo
    0U,	// SUBFo
    1U,	// SUBI
    1U,	// SUBIC
    1U,	// SUBICo
    1U,	// SUBIS
    0U,	// SYNC
    0U,	// TABORT
    0U,	// TABORTDC
    0U,	// TABORTDCI
    0U,	// TABORTWC
    0U,	// TABORTWCI
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TBEGIN
    0U,	// TCHECK
    0U,	// TCHECK_RET
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    0U,	// TD
    1U,	// TDI
    0U,	// TEND
    0U,	// TLBIA
    0U,	// TLBIE
    0U,	// TLBIEL
    0U,	// TLBIVAX
    0U,	// TLBLD
    0U,	// TLBLI
    0U,	// TLBRE
    0U,	// TLBRE2
    0U,	// TLBSX
    0U,	// TLBSX2
    0U,	// TLBSX2D
    0U,	// TLBSYNC
    0U,	// TLBWE
    0U,	// TLBWE2
    0U,	// TRAP
    0U,	// TRECHKPT
    0U,	// TRECLAIM
    0U,	// TSR
    0U,	// TW
    1U,	// TWI
    0U,	// UPDATE_VRSAVE
    0U,	// UpdateGBR
    0U,	// VADDCUW
    0U,	// VADDFP
    0U,	// VADDSBS
    0U,	// VADDSHS
    0U,	// VADDSWS
    0U,	// VADDUBM
    0U,	// VADDUBS
    0U,	// VADDUDM
    0U,	// VADDUHM
    0U,	// VADDUHS
    0U,	// VADDUWM
    0U,	// VADDUWS
    0U,	// VAND
    0U,	// VANDC
    0U,	// VAVGSB
    0U,	// VAVGSH
    0U,	// VAVGSW
    0U,	// VAVGUB
    0U,	// VAVGUH
    0U,	// VAVGUW
    0U,	// VCFSX
    0U,	// VCFSX_0
    0U,	// VCFUX
    0U,	// VCFUX_0
    0U,	// VCIPHER
    0U,	// VCIPHERLAST
    0U,	// VCLZB
    0U,	// VCLZD
    0U,	// VCLZH
    0U,	// VCLZW
    0U,	// VCMPBFP
    0U,	// VCMPBFPo
    0U,	// VCMPEQFP
    0U,	// VCMPEQFPo
    0U,	// VCMPEQUB
    0U,	// VCMPEQUBo
    0U,	// VCMPEQUD
    0U,	// VCMPEQUDo
    0U,	// VCMPEQUH
    0U,	// VCMPEQUHo
    0U,	// VCMPEQUW
    0U,	// VCMPEQUWo
    0U,	// VCMPGEFP
    0U,	// VCMPGEFPo
    0U,	// VCMPGTFP
    0U,	// VCMPGTFPo
    0U,	// VCMPGTSB
    0U,	// VCMPGTSBo
    0U,	// VCMPGTSD
    0U,	// VCMPGTSDo
    0U,	// VCMPGTSH
    0U,	// VCMPGTSHo
    0U,	// VCMPGTSW
    0U,	// VCMPGTSWo
    0U,	// VCMPGTUB
    0U,	// VCMPGTUBo
    0U,	// VCMPGTUD
    0U,	// VCMPGTUDo
    0U,	// VCMPGTUH
    0U,	// VCMPGTUHo
    0U,	// VCMPGTUW
    0U,	// VCMPGTUWo
    0U,	// VCTSXS
    0U,	// VCTSXS_0
    0U,	// VCTUXS
    0U,	// VCTUXS_0
    0U,	// VEQV
    0U,	// VEXPTEFP
    0U,	// VLOGEFP
    80U,	// VMADDFP
    0U,	// VMAXFP
    0U,	// VMAXSB
    0U,	// VMAXSD
    0U,	// VMAXSH
    0U,	// VMAXSW
    0U,	// VMAXUB
    0U,	// VMAXUD
    0U,	// VMAXUH
    0U,	// VMAXUW
    80U,	// VMHADDSHS
    80U,	// VMHRADDSHS
    0U,	// VMINFP
    0U,	// VMINSB
    0U,	// VMINSD
    0U,	// VMINSH
    0U,	// VMINSW
    0U,	// VMINUB
    0U,	// VMINUD
    0U,	// VMINUH
    0U,	// VMINUW
    80U,	// VMLADDUHM
    0U,	// VMRGHB
    0U,	// VMRGHH
    0U,	// VMRGHW
    0U,	// VMRGLB
    0U,	// VMRGLH
    0U,	// VMRGLW
    80U,	// VMSUMMBM
    80U,	// VMSUMSHM
    80U,	// VMSUMSHS
    80U,	// VMSUMUBM
    80U,	// VMSUMUHM
    80U,	// VMSUMUHS
    0U,	// VMULESB
    0U,	// VMULESH
    0U,	// VMULESW
    0U,	// VMULEUB
    0U,	// VMULEUH
    0U,	// VMULEUW
    0U,	// VMULOSB
    0U,	// VMULOSH
    0U,	// VMULOSW
    0U,	// VMULOUB
    0U,	// VMULOUH
    0U,	// VMULOUW
    0U,	// VMULUWM
    0U,	// VNAND
    0U,	// VNCIPHER
    0U,	// VNCIPHERLAST
    80U,	// VNMSUBFP
    0U,	// VNOR
    0U,	// VOR
    0U,	// VORC
    80U,	// VPERM
    80U,	// VPERMXOR
    0U,	// VPKPX
    0U,	// VPKSHSS
    0U,	// VPKSHUS
    0U,	// VPKSWSS
    0U,	// VPKSWUS
    0U,	// VPKUHUM
    0U,	// VPKUHUS
    0U,	// VPKUWUM
    0U,	// VPKUWUS
    0U,	// VPMSUMB
    0U,	// VPMSUMD
    0U,	// VPMSUMH
    0U,	// VPMSUMW
    0U,	// VPOPCNTB
    0U,	// VPOPCNTD
    0U,	// VPOPCNTH
    0U,	// VPOPCNTW
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    0U,	// VRLB
    0U,	// VRLD
    0U,	// VRLH
    0U,	// VRLW
    0U,	// VRSQRTEFP
    0U,	// VSBOX
    80U,	// VSEL
    8U,	// VSHASIGMAD
    8U,	// VSHASIGMAW
    0U,	// VSL
    0U,	// VSLB
    0U,	// VSLD
    48U,	// VSLDOI
    0U,	// VSLH
    0U,	// VSLO
    0U,	// VSLW
    0U,	// VSPLTB
    0U,	// VSPLTH
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    0U,	// VSPLTW
    0U,	// VSR
    0U,	// VSRAB
    0U,	// VSRAD
    0U,	// VSRAH
    0U,	// VSRAW
    0U,	// VSRB
    0U,	// VSRD
    0U,	// VSRH
    0U,	// VSRO
    0U,	// VSRW
    0U,	// VSUBCUW
    0U,	// VSUBFP
    0U,	// VSUBSBS
    0U,	// VSUBSHS
    0U,	// VSUBSWS
    0U,	// VSUBUBM
    0U,	// VSUBUBS
    0U,	// VSUBUDM
    0U,	// VSUBUHM
    0U,	// VSUBUHS
    0U,	// VSUBUWM
    0U,	// VSUBUWS
    0U,	// VSUM2SWS
    0U,	// VSUM4SBS
    0U,	// VSUM4SHS
    0U,	// VSUM4UBS
    0U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VXOR
    5U,	// V_SET0
    5U,	// V_SET0B
    5U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// WRTEE
    0U,	// WRTEEI
    0U,	// XOR
    0U,	// XOR8
    0U,	// XOR8o
    2U,	// XORI
    2U,	// XORI8
    2U,	// XORIS
    2U,	// XORIS8
    0U,	// XORo
    0U,	// XSABSDP
    0U,	// XSADDDP
    0U,	// XSCMPODP
    0U,	// XSCMPUDP
    0U,	// XSCPSGNDP
    0U,	// XSCVDPSP
    0U,	// XSCVDPSXDS
    0U,	// XSCVDPSXWS
    0U,	// XSCVDPUXDS
    0U,	// XSCVDPUXWS
    0U,	// XSCVSPDP
    0U,	// XSCVSXDDP
    0U,	// XSCVUXDDP
    0U,	// XSDIVDP
    0U,	// XSMADDADP
    0U,	// XSMADDMDP
    0U,	// XSMAXDP
    0U,	// XSMINDP
    0U,	// XSMSUBADP
    0U,	// XSMSUBMDP
    0U,	// XSMULDP
    0U,	// XSNABSDP
    0U,	// XSNEGDP
    0U,	// XSNMADDADP
    0U,	// XSNMADDMDP
    0U,	// XSNMSUBADP
    0U,	// XSNMSUBMDP
    0U,	// XSRDPI
    0U,	// XSRDPIC
    0U,	// XSRDPIM
    0U,	// XSRDPIP
    0U,	// XSRDPIZ
    0U,	// XSREDP
    0U,	// XSRSQRTEDP
    0U,	// XSSQRTDP
    0U,	// XSSUBDP
    0U,	// XSTDIVDP
    0U,	// XSTSQRTDP
    0U,	// XVABSDP
    0U,	// XVABSSP
    0U,	// XVADDDP
    0U,	// XVADDSP
    0U,	// XVCMPEQDP
    0U,	// XVCMPEQDPo
    0U,	// XVCMPEQSP
    0U,	// XVCMPEQSPo
    0U,	// XVCMPGEDP
    0U,	// XVCMPGEDPo
    0U,	// XVCMPGESP
    0U,	// XVCMPGESPo
    0U,	// XVCMPGTDP
    0U,	// XVCMPGTDPo
    0U,	// XVCMPGTSP
    0U,	// XVCMPGTSPo
    0U,	// XVCPSGNDP
    0U,	// XVCPSGNSP
    0U,	// XVCVDPSP
    0U,	// XVCVDPSXDS
    0U,	// XVCVDPSXWS
    0U,	// XVCVDPUXDS
    0U,	// XVCVDPUXWS
    0U,	// XVCVSPDP
    0U,	// XVCVSPSXDS
    0U,	// XVCVSPSXWS
    0U,	// XVCVSPUXDS
    0U,	// XVCVSPUXWS
    0U,	// XVCVSXDDP
    0U,	// XVCVSXDSP
    0U,	// XVCVSXWDP
    0U,	// XVCVSXWSP
    0U,	// XVCVUXDDP
    0U,	// XVCVUXDSP
    0U,	// XVCVUXWDP
    0U,	// XVCVUXWSP
    0U,	// XVDIVDP
    0U,	// XVDIVSP
    0U,	// XVMADDADP
    0U,	// XVMADDASP
    0U,	// XVMADDMDP
    0U,	// XVMADDMSP
    0U,	// XVMAXDP
    0U,	// XVMAXSP
    0U,	// XVMINDP
    0U,	// XVMINSP
    0U,	// XVMSUBADP
    0U,	// XVMSUBASP
    0U,	// XVMSUBMDP
    0U,	// XVMSUBMSP
    0U,	// XVMULDP
    0U,	// XVMULSP
    0U,	// XVNABSDP
    0U,	// XVNABSSP
    0U,	// XVNEGDP
    0U,	// XVNEGSP
    0U,	// XVNMADDADP
    0U,	// XVNMADDASP
    0U,	// XVNMADDMDP
    0U,	// XVNMADDMSP
    0U,	// XVNMSUBADP
    0U,	// XVNMSUBASP
    0U,	// XVNMSUBMDP
    0U,	// XVNMSUBMSP
    0U,	// XVRDPI
    0U,	// XVRDPIC
    0U,	// XVRDPIM
    0U,	// XVRDPIP
    0U,	// XVRDPIZ
    0U,	// XVREDP
    0U,	// XVRESP
    0U,	// XVRSPI
    0U,	// XVRSPIC
    0U,	// XVRSPIM
    0U,	// XVRSPIP
    0U,	// XVRSPIZ
    0U,	// XVRSQRTEDP
    0U,	// XVRSQRTESP
    0U,	// XVSQRTDP
    0U,	// XVSQRTSP
    0U,	// XVSUBDP
    0U,	// XVSUBSP
    0U,	// XVTDIVDP
    0U,	// XVTDIVSP
    0U,	// XVTSQRTDP
    0U,	// XVTSQRTSP
    0U,	// XXLAND
    0U,	// XXLANDC
    0U,	// XXLEQV
    0U,	// XXLNAND
    0U,	// XXLNOR
    0U,	// XXLOR
    0U,	// XXLORC
    0U,	// XXLORf
    0U,	// XXLXOR
    0U,	// XXMRGHW
    0U,	// XXMRGLW
    112U,	// XXPERMDI
    80U,	// XXSEL
    112U,	// XXSLDWI
    6U,	// XXSPLTW
    9U,	// gBC
    10U,	// gBCA
    0U,	// gBCCTR
    0U,	// gBCCTRL
    9U,	// gBCL
    10U,	// gBCLA
    0U,	// gBCLR
    0U,	// gBCLRL
    0U
  };

  static const char AsmStrs[] = {
  /* 0 */ '#', 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 9, 0,
  /* 16 */ 'b', 'd', 'z', 'l', 'a', '+', 32, 0,
  /* 24 */ 'b', 'd', 'n', 'z', 'l', 'a', '+', 32, 0,
  /* 33 */ 'b', 'd', 'z', 'a', '+', 32, 0,
  /* 40 */ 'b', 'd', 'n', 'z', 'a', '+', 32, 0,
  /* 48 */ 'b', 'd', 'z', 'l', '+', 32, 0,
  /* 55 */ 'b', 'd', 'n', 'z', 'l', '+', 32, 0,
  /* 63 */ 'b', 'd', 'z', '+', 32, 0,
  /* 69 */ 'b', 'd', 'n', 'z', '+', 32, 0,
  /* 76 */ 'b', 'c', 'l', 32, '2', '0', ',', 32, '3', '1', ',', 32, 0,
  /* 89 */ 'b', 'c', 't', 'r', 'l', 10, 9, 'l', 'd', 32, '2', ',', 32, 0,
  /* 103 */ 'b', 'c', 32, '1', '2', ',', 32, 0,
  /* 111 */ 'b', 'c', 'l', 32, '1', '2', ',', 32, 0,
  /* 120 */ 'b', 'c', 'l', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 131 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 143 */ 'b', 'c', 'l', 'r', 32, '1', '2', ',', 32, 0,
  /* 153 */ 'b', 'c', 'c', 't', 'r', 32, '1', '2', ',', 32, 0,
  /* 164 */ 'b', 'c', 32, '4', ',', 32, 0,
  /* 171 */ 'b', 'c', 'l', 32, '4', ',', 32, 0,
  /* 179 */ 'b', 'c', 'l', 'r', 'l', 32, '4', ',', 32, 0,
  /* 189 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '4', ',', 32, 0,
  /* 200 */ 'b', 'c', 'l', 'r', 32, '4', ',', 32, 0,
  /* 209 */ 'b', 'c', 'c', 't', 'r', 32, '4', ',', 32, 0,
  /* 219 */ 'm', 't', 's', 'p', 'r', 32, '2', '5', '6', ',', 32, 0,
  /* 231 */ 'b', 'd', 'z', 'l', 'a', '-', 32, 0,
  /* 239 */ 'b', 'd', 'n', 'z', 'l', 'a', '-', 32, 0,
  /* 248 */ 'b', 'd', 'z', 'a', '-', 32, 0,
  /* 255 */ 'b', 'd', 'n', 'z', 'a', '-', 32, 0,
  /* 263 */ 'b', 'd', 'z', 'l', '-', 32, 0,
  /* 270 */ 'b', 'd', 'n', 'z', 'l', '-', 32, 0,
  /* 278 */ 'b', 'd', 'z', '-', 32, 0,
  /* 284 */ 'b', 'd', 'n', 'z', '-', 32, 0,
  /* 291 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', '.', 32, 0,
  /* 302 */ 'e', 'x', 't', 's', 'b', '.', 32, 0,
  /* 310 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', '.', 32, 0,
  /* 321 */ 'f', 's', 'u', 'b', '.', 32, 0,
  /* 328 */ 'f', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 336 */ 'f', 'n', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 345 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', '.', 32, 0,
  /* 356 */ 'a', 'd', 'd', 'c', '.', 32, 0,
  /* 363 */ 'a', 'n', 'd', 'c', '.', 32, 0,
  /* 370 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', '.', 32, 0,
  /* 381 */ 's', 'u', 'b', 'f', 'c', '.', 32, 0,
  /* 389 */ 's', 'u', 'b', 'i', 'c', '.', 32, 0,
  /* 397 */ 'a', 'd', 'd', 'i', 'c', '.', 32, 0,
  /* 405 */ 'r', 'l', 'd', 'i', 'c', '.', 32, 0,
  /* 413 */ 'o', 'r', 'c', '.', 32, 0,
  /* 419 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', '.', 32, 0,
  /* 430 */ 's', 'r', 'a', 'd', '.', 32, 0,
  /* 437 */ 'f', 'a', 'd', 'd', '.', 32, 0,
  /* 444 */ 'f', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 452 */ 'f', 'n', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 461 */ 'm', 'u', 'l', 'h', 'd', '.', 32, 0,
  /* 469 */ 'f', 'c', 'f', 'i', 'd', '.', 32, 0,
  /* 477 */ 'f', 'c', 't', 'i', 'd', '.', 32, 0,
  /* 485 */ 'm', 'u', 'l', 'l', 'd', '.', 32, 0,
  /* 493 */ 's', 'l', 'd', '.', 32, 0,
  /* 499 */ 'n', 'a', 'n', 'd', '.', 32, 0,
  /* 506 */ 't', 'e', 'n', 'd', '.', 32, 0,
  /* 513 */ 's', 'r', 'd', '.', 32, 0,
  /* 519 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', '.', 32, 0,
  /* 530 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', '.', 32, 0,
  /* 541 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', '.', 32, 0,
  /* 552 */ 'd', 'i', 'v', 'd', '.', 32, 0,
  /* 559 */ 'c', 'n', 't', 'l', 'z', 'd', '.', 32, 0,
  /* 568 */ 'a', 'd', 'd', 'e', '.', 32, 0,
  /* 575 */ 'd', 'i', 'v', 'd', 'e', '.', 32, 0,
  /* 583 */ 's', 'u', 'b', 'f', 'e', '.', 32, 0,
  /* 591 */ 'a', 'd', 'd', 'm', 'e', '.', 32, 0,
  /* 599 */ 's', 'u', 'b', 'f', 'm', 'e', '.', 32, 0,
  /* 608 */ 'f', 'r', 'e', '.', 32, 0,
  /* 614 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', 32, 0,
  /* 624 */ 'd', 'i', 'v', 'w', 'e', '.', 32, 0,
  /* 632 */ 'a', 'd', 'd', 'z', 'e', '.', 32, 0,
  /* 640 */ 's', 'u', 'b', 'f', 'z', 'e', '.', 32, 0,
  /* 649 */ 's', 'u', 'b', 'f', '.', 32, 0,
  /* 656 */ 'm', 't', 'f', 's', 'f', '.', 32, 0,
  /* 664 */ 'f', 'n', 'e', 'g', '.', 32, 0,
  /* 671 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', '.', 32, 0,
  /* 682 */ 'e', 'x', 't', 's', 'h', '.', 32, 0,
  /* 690 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', '.', 32, 0,
  /* 701 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', '.', 32, 0,
  /* 712 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', 'i', '.', 32, 0,
  /* 724 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', 'i', '.', 32, 0,
  /* 736 */ 's', 'r', 'a', 'd', 'i', '.', 32, 0,
  /* 744 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', '.', 32, 0,
  /* 755 */ 'e', 'x', 't', 'l', 'd', 'i', '.', 32, 0,
  /* 764 */ 'a', 'n', 'd', 'i', '.', 32, 0,
  /* 771 */ 'c', 'l', 'r', 'r', 'd', 'i', '.', 32, 0,
  /* 780 */ 'i', 'n', 's', 'r', 'd', 'i', '.', 32, 0,
  /* 789 */ 'r', 'o', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 798 */ 'e', 'x', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 807 */ 'm', 't', 'f', 's', 'f', 'i', '.', 32, 0,
  /* 816 */ 'r', 'l', 'd', 'i', 'm', 'i', '.', 32, 0,
  /* 825 */ 'r', 'l', 'w', 'i', 'm', 'i', '.', 32, 0,
  /* 834 */ 's', 'r', 'a', 'w', 'i', '.', 32, 0,
  /* 842 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 853 */ 'i', 'n', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 862 */ 'e', 'x', 't', 'l', 'w', 'i', '.', 32, 0,
  /* 871 */ 'c', 'l', 'r', 'r', 'w', 'i', '.', 32, 0,
  /* 880 */ 'i', 'n', 's', 'r', 'w', 'i', '.', 32, 0,
  /* 889 */ 'r', 'o', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 898 */ 'e', 'x', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 907 */ 'r', 'l', 'd', 'c', 'l', '.', 32, 0,
  /* 915 */ 'r', 'l', 'd', 'i', 'c', 'l', '.', 32, 0,
  /* 924 */ 'f', 's', 'e', 'l', '.', 32, 0,
  /* 931 */ 'f', 'm', 'u', 'l', '.', 32, 0,
  /* 938 */ 't', 'r', 'e', 'c', 'l', 'a', 'i', 'm', '.', 32, 0,
  /* 949 */ 'f', 'r', 'i', 'm', '.', 32, 0,
  /* 956 */ 'r', 'l', 'w', 'i', 'n', 'm', '.', 32, 0,
  /* 965 */ 'r', 'l', 'w', 'n', 'm', '.', 32, 0,
  /* 973 */ 'f', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 982 */ 't', 'b', 'e', 'g', 'i', 'n', '.', 32, 0,
  /* 991 */ 'f', 'r', 'i', 'n', '.', 32, 0,
  /* 998 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', '.', 32, 0,
  /* 1010 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', '.', 32, 0,
  /* 1022 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', '.', 32, 0,
  /* 1034 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', '.', 32, 0,
  /* 1044 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', '.', 32, 0,
  /* 1055 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', '.', 32, 0,
  /* 1066 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', '.', 32, 0,
  /* 1077 */ 'f', 'r', 'i', 'p', '.', 32, 0,
  /* 1084 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', '.', 32, 0,
  /* 1096 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', '.', 32, 0,
  /* 1108 */ 'f', 'r', 's', 'p', '.', 32, 0,
  /* 1115 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', '.', 32, 0,
  /* 1127 */ 'r', 'l', 'd', 'c', 'r', '.', 32, 0,
  /* 1135 */ 'r', 'l', 'd', 'i', 'c', 'r', '.', 32, 0,
  /* 1144 */ 'f', 'm', 'r', '.', 32, 0,
  /* 1150 */ 'n', 'o', 'r', '.', 32, 0,
  /* 1156 */ 'x', 'o', 'r', '.', 32, 0,
  /* 1162 */ 't', 's', 'r', '.', 32, 0,
  /* 1168 */ 'f', 'a', 'b', 's', '.', 32, 0,
  /* 1175 */ 'f', 'n', 'a', 'b', 's', '.', 32, 0,
  /* 1183 */ 'f', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1191 */ 'f', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1200 */ 'f', 'n', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1210 */ 'f', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1218 */ 'f', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1227 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1237 */ 'f', 'c', 'f', 'i', 'd', 's', '.', 32, 0,
  /* 1246 */ 'f', 'r', 'e', 's', '.', 32, 0,
  /* 1253 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 's', '.', 32, 0,
  /* 1264 */ 'm', 'f', 'f', 's', '.', 32, 0,
  /* 1271 */ 'a', 'n', 'd', 'i', 's', '.', 32, 0,
  /* 1279 */ 'f', 'm', 'u', 'l', 's', '.', 32, 0,
  /* 1287 */ 'f', 's', 'q', 'r', 't', 's', '.', 32, 0,
  /* 1296 */ 'f', 'c', 'f', 'i', 'd', 'u', 's', '.', 32, 0,
  /* 1306 */ 'f', 'd', 'i', 'v', 's', '.', 32, 0,
  /* 1314 */ 't', 'a', 'b', 'o', 'r', 't', '.', 32, 0,
  /* 1323 */ 'f', 's', 'q', 'r', 't', '.', 32, 0,
  /* 1331 */ 'm', 'u', 'l', 'h', 'd', 'u', '.', 32, 0,
  /* 1340 */ 'f', 'c', 'f', 'i', 'd', 'u', '.', 32, 0,
  /* 1349 */ 'd', 'i', 'v', 'd', 'u', '.', 32, 0,
  /* 1357 */ 'd', 'i', 'v', 'd', 'e', 'u', '.', 32, 0,
  /* 1366 */ 'd', 'i', 'v', 'w', 'e', 'u', '.', 32, 0,
  /* 1375 */ 'm', 'u', 'l', 'h', 'w', 'u', '.', 32, 0,
  /* 1384 */ 'd', 'i', 'v', 'w', 'u', '.', 32, 0,
  /* 1392 */ 'f', 'd', 'i', 'v', '.', 32, 0,
  /* 1399 */ 'e', 'q', 'v', '.', 32, 0,
  /* 1405 */ 's', 'r', 'a', 'w', '.', 32, 0,
  /* 1412 */ 'm', 'u', 'l', 'h', 'w', '.', 32, 0,
  /* 1420 */ 'f', 'c', 't', 'i', 'w', '.', 32, 0,
  /* 1428 */ 'm', 'u', 'l', 'l', 'w', '.', 32, 0,
  /* 1436 */ 's', 'l', 'w', '.', 32, 0,
  /* 1442 */ 's', 'r', 'w', '.', 32, 0,
  /* 1448 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', '.', 32, 0,
  /* 1459 */ 'e', 'x', 't', 's', 'w', '.', 32, 0,
  /* 1467 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', '.', 32, 0,
  /* 1478 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', '.', 32, 0,
  /* 1489 */ 'd', 'i', 'v', 'w', '.', 32, 0,
  /* 1496 */ 'c', 'n', 't', 'l', 'z', 'w', '.', 32, 0,
  /* 1505 */ 's', 't', 'b', 'c', 'x', '.', 32, 0,
  /* 1513 */ 's', 't', 'd', 'c', 'x', '.', 32, 0,
  /* 1521 */ 's', 't', 'h', 'c', 'x', '.', 32, 0,
  /* 1529 */ 's', 't', 'w', 'c', 'x', '.', 32, 0,
  /* 1537 */ 't', 'l', 'b', 's', 'x', '.', 32, 0,
  /* 1545 */ 'f', 'c', 't', 'i', 'd', 'z', '.', 32, 0,
  /* 1554 */ 'f', 'r', 'i', 'z', '.', 32, 0,
  /* 1561 */ 'f', 'c', 't', 'i', 'd', 'u', 'z', '.', 32, 0,
  /* 1571 */ 'f', 'c', 't', 'i', 'w', 'u', 'z', '.', 32, 0,
  /* 1581 */ 'f', 'c', 't', 'i', 'w', 'z', '.', 32, 0,
  /* 1590 */ 'm', 't', 'f', 's', 'b', '0', 32, 0,
  /* 1598 */ 'm', 't', 'f', 's', 'b', '1', 32, 0,
  /* 1606 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 32, 0,
  /* 1628 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 32, 0,
  /* 1650 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', '8', 32, 0,
  /* 1664 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', '8', 32, 0,
  /* 1678 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', '8', 32, 0,
  /* 1692 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 32, 0,
  /* 1707 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 1726 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 1743 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 32, 0,
  /* 1756 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 1769 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 1782 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 1793 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'a', 32, 0,
  /* 1804 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 1817 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 1830 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 1841 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 1854 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 1867 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 1878 */ 'd', 'c', 'b', 'a', 32, 0,
  /* 1884 */ 'b', 'c', 'a', 32, 0,
  /* 1889 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 32, 0,
  /* 1900 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 'a', 32, 0,
  /* 1911 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 32, 0,
  /* 1922 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 32, 0,
  /* 1932 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 32, 0,
  /* 1943 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 'a', 32, 0,
  /* 1954 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 32, 0,
  /* 1965 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 32, 0,
  /* 1975 */ 'l', 'h', 'a', 32, 0,
  /* 1980 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 32, 0,
  /* 1991 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 'a', 32, 0,
  /* 2002 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 32, 0,
  /* 2013 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 32, 0,
  /* 2023 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 32, 0,
  /* 2034 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 'a', 32, 0,
  /* 2045 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 32, 0,
  /* 2056 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 32, 0,
  /* 2067 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 32, 0,
  /* 2077 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 'a', 32, 0,
  /* 2089 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 'a', 32, 0,
  /* 2100 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 'a', 32, 0,
  /* 2112 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 'a', 32, 0,
  /* 2123 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2136 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2148 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2161 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2173 */ 'b', 'l', 'a', 32, 0,
  /* 2178 */ 'b', 'c', 'l', 'a', 32, 0,
  /* 2184 */ 'b', 'd', 'z', 'l', 'a', 32, 0,
  /* 2191 */ 'b', 'd', 'n', 'z', 'l', 'a', 32, 0,
  /* 2199 */ 'e', 'v', 'm', 'r', 'a', 32, 0,
  /* 2206 */ 'l', 'w', 'a', 32, 0,
  /* 2211 */ 'm', 't', 'v', 's', 'r', 'w', 'a', 32, 0,
  /* 2220 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 'a', 32, 0,
  /* 2231 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2241 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2252 */ 'q', 'v', 'l', 'f', 'd', 'x', 'a', 32, 0,
  /* 2261 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'a', 32, 0,
  /* 2271 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2281 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2292 */ 'q', 'v', 'l', 'f', 's', 'x', 'a', 32, 0,
  /* 2301 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'a', 32, 0,
  /* 2311 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2322 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2334 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 2344 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 2355 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 2366 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 2378 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 2388 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 2399 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 'a', 32, 0,
  /* 2410 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 'a', 32, 0,
  /* 2421 */ 'b', 'd', 'z', 'a', 32, 0,
  /* 2427 */ 'b', 'd', 'n', 'z', 'a', 32, 0,
  /* 2434 */ 'v', 's', 'r', 'a', 'b', 32, 0,
  /* 2441 */ 'v', 'm', 'r', 'g', 'h', 'b', 32, 0,
  /* 2449 */ 'v', 'm', 'r', 'g', 'l', 'b', 32, 0,
  /* 2457 */ 'v', 'r', 'l', 'b', 32, 0,
  /* 2463 */ 'v', 's', 'l', 'b', 32, 0,
  /* 2469 */ 'v', 'p', 'm', 's', 'u', 'm', 'b', 32, 0,
  /* 2478 */ 'c', 'm', 'p', 'b', 32, 0,
  /* 2484 */ 'v', 's', 'r', 'b', 32, 0,
  /* 2490 */ 'v', 'm', 'u', 'l', 'e', 's', 'b', 32, 0,
  /* 2499 */ 'v', 'a', 'v', 'g', 's', 'b', 32, 0,
  /* 2507 */ 'v', 'u', 'p', 'k', 'h', 's', 'b', 32, 0,
  /* 2516 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'b', 32, 0,
  /* 2526 */ 'v', 'u', 'p', 'k', 'l', 's', 'b', 32, 0,
  /* 2535 */ 'v', 'm', 'i', 'n', 's', 'b', 32, 0,
  /* 2543 */ 'v', 'm', 'u', 'l', 'o', 's', 'b', 32, 0,
  /* 2552 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', 32, 0,
  /* 2562 */ 'e', 'v', 'e', 'x', 't', 's', 'b', 32, 0,
  /* 2571 */ 'v', 'm', 'a', 'x', 's', 'b', 32, 0,
  /* 2579 */ 'm', 'f', 't', 'b', 32, 0,
  /* 2585 */ 'v', 's', 'p', 'l', 't', 'b', 32, 0,
  /* 2593 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'b', 32, 0,
  /* 2603 */ 's', 't', 'b', 32, 0,
  /* 2608 */ 'v', 'm', 'u', 'l', 'e', 'u', 'b', 32, 0,
  /* 2617 */ 'v', 'a', 'v', 'g', 'u', 'b', 32, 0,
  /* 2625 */ 'v', 'm', 'i', 'n', 'u', 'b', 32, 0,
  /* 2633 */ 'v', 'm', 'u', 'l', 'o', 'u', 'b', 32, 0,
  /* 2642 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', 32, 0,
  /* 2652 */ 'q', 'v', 'f', 's', 'u', 'b', 32, 0,
  /* 2660 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 32, 0,
  /* 2669 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 32, 0,
  /* 2679 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', 32, 0,
  /* 2689 */ 'v', 'm', 'a', 'x', 'u', 'b', 32, 0,
  /* 2697 */ 'v', 'c', 'l', 'z', 'b', 32, 0,
  /* 2704 */ 'b', 'c', 32, 0,
  /* 2708 */ 'a', 'd', 'd', 'c', 32, 0,
  /* 2714 */ 'x', 'x', 'l', 'a', 'n', 'd', 'c', 32, 0,
  /* 2723 */ 'c', 'r', 'a', 'n', 'd', 'c', 32, 0,
  /* 2731 */ 'e', 'v', 'a', 'n', 'd', 'c', 32, 0,
  /* 2739 */ 's', 'u', 'b', 'f', 'c', 32, 0,
  /* 2746 */ 's', 'u', 'b', 'i', 'c', 32, 0,
  /* 2753 */ 'a', 'd', 'd', 'i', 'c', 32, 0,
  /* 2760 */ 'r', 'l', 'd', 'i', 'c', 32, 0,
  /* 2767 */ 's', 'u', 'b', 'f', 'i', 'c', 32, 0,
  /* 2775 */ 'x', 's', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 2784 */ 'x', 'v', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 2793 */ 'x', 'v', 'r', 's', 'p', 'i', 'c', 32, 0,
  /* 2802 */ 'b', 'r', 'i', 'n', 'c', 32, 0,
  /* 2809 */ 's', 'y', 'n', 'c', 32, 0,
  /* 2815 */ 'x', 'x', 'l', 'o', 'r', 'c', 32, 0,
  /* 2823 */ 'c', 'r', 'o', 'r', 'c', 32, 0,
  /* 2830 */ 'e', 'v', 'o', 'r', 'c', 32, 0,
  /* 2837 */ 's', 'c', 32, 0,
  /* 2841 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 32, 0,
  /* 2854 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'd', 32, 0,
  /* 2866 */ 'v', 's', 'r', 'a', 'd', 32, 0,
  /* 2873 */ 'q', 'v', 'f', 'a', 'd', 'd', 32, 0,
  /* 2881 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 32, 0,
  /* 2890 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 2900 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 2914 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 32, 0,
  /* 2927 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 2937 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 2948 */ 'e', 'v', 'l', 'd', 'd', 32, 0,
  /* 2955 */ 'e', 'v', 's', 't', 'd', 'd', 32, 0,
  /* 2963 */ 'l', 'f', 'd', 32, 0,
  /* 2968 */ 's', 't', 'f', 'd', 32, 0,
  /* 2974 */ 'm', 'u', 'l', 'h', 'd', 32, 0,
  /* 2981 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 32, 0,
  /* 2990 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 32, 0,
  /* 2999 */ 't', 'l', 'b', 'l', 'd', 32, 0,
  /* 3006 */ 'm', 'u', 'l', 'l', 'd', 32, 0,
  /* 3013 */ 'c', 'm', 'p', 'l', 'd', 32, 0,
  /* 3020 */ 'v', 'r', 'l', 'd', 32, 0,
  /* 3026 */ 'v', 's', 'l', 'd', 32, 0,
  /* 3032 */ 'b', 'p', 'e', 'r', 'm', 'd', 32, 0,
  /* 3040 */ 'v', 'p', 'm', 's', 'u', 'm', 'd', 32, 0,
  /* 3049 */ 'x', 'x', 'l', 'a', 'n', 'd', 32, 0,
  /* 3057 */ 'x', 'x', 'l', 'n', 'a', 'n', 'd', 32, 0,
  /* 3066 */ 'c', 'r', 'n', 'a', 'n', 'd', 32, 0,
  /* 3074 */ 'e', 'v', 'n', 'a', 'n', 'd', 32, 0,
  /* 3082 */ 'c', 'r', 'a', 'n', 'd', 32, 0,
  /* 3089 */ 'e', 'v', 'a', 'n', 'd', 32, 0,
  /* 3096 */ 'c', 'm', 'p', 'd', 32, 0,
  /* 3102 */ 'm', 't', 'm', 's', 'r', 'd', 32, 0,
  /* 3110 */ 'm', 'f', 'v', 's', 'r', 'd', 32, 0,
  /* 3118 */ 'm', 't', 'v', 's', 'r', 'd', 32, 0,
  /* 3126 */ 'v', 'm', 'i', 'n', 's', 'd', 32, 0,
  /* 3134 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', 32, 0,
  /* 3144 */ 'v', 'm', 'a', 'x', 's', 'd', 32, 0,
  /* 3152 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'd', 32, 0,
  /* 3162 */ 's', 't', 'd', 32, 0,
  /* 3167 */ 'v', 'm', 'i', 'n', 'u', 'd', 32, 0,
  /* 3175 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', 32, 0,
  /* 3185 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', 32, 0,
  /* 3195 */ 'v', 'm', 'a', 'x', 'u', 'd', 32, 0,
  /* 3203 */ 'd', 'i', 'v', 'd', 32, 0,
  /* 3209 */ 'v', 'c', 'l', 'z', 'd', 32, 0,
  /* 3216 */ 'c', 'n', 't', 'l', 'z', 'd', 32, 0,
  /* 3224 */ 'a', 'd', 'd', 'e', 32, 0,
  /* 3230 */ 'd', 'i', 'v', 'd', 'e', 32, 0,
  /* 3237 */ 's', 'l', 'b', 'm', 'f', 'e', 'e', 32, 0,
  /* 3246 */ 'w', 'r', 't', 'e', 'e', 32, 0,
  /* 3253 */ 's', 'u', 'b', 'f', 'e', 32, 0,
  /* 3260 */ 'e', 'v', 'l', 'w', 'h', 'e', 32, 0,
  /* 3268 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 32, 0,
  /* 3277 */ 's', 'l', 'b', 'i', 'e', 32, 0,
  /* 3284 */ 't', 'l', 'b', 'i', 'e', 32, 0,
  /* 3291 */ 'a', 'd', 'd', 'm', 'e', 32, 0,
  /* 3298 */ 's', 'u', 'b', 'f', 'm', 'e', 32, 0,
  /* 3306 */ 't', 'l', 'b', 'r', 'e', 32, 0,
  /* 3313 */ 'q', 'v', 'f', 'r', 'e', 32, 0,
  /* 3320 */ 's', 'l', 'b', 'm', 't', 'e', 32, 0,
  /* 3328 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 32, 0,
  /* 3339 */ 't', 'l', 'b', 'w', 'e', 32, 0,
  /* 3346 */ 'd', 'i', 'v', 'w', 'e', 32, 0,
  /* 3353 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 32, 0,
  /* 3362 */ 'a', 'd', 'd', 'z', 'e', 32, 0,
  /* 3369 */ 's', 'u', 'b', 'f', 'z', 'e', 32, 0,
  /* 3377 */ 'd', 'c', 'b', 'f', 32, 0,
  /* 3383 */ 's', 'u', 'b', 'f', 32, 0,
  /* 3389 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 32, 0,
  /* 3399 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 32, 0,
  /* 3409 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 32, 0,
  /* 3419 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 32, 0,
  /* 3428 */ 'm', 'c', 'r', 'f', 32, 0,
  /* 3434 */ 'm', 'f', 'o', 'c', 'r', 'f', 32, 0,
  /* 3442 */ 'm', 't', 'o', 'c', 'r', 'f', 32, 0,
  /* 3450 */ 'm', 't', 'c', 'r', 'f', 32, 0,
  /* 3457 */ 'm', 't', 'f', 's', 'f', 32, 0,
  /* 3464 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 32, 0,
  /* 3474 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 32, 0,
  /* 3484 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 32, 0,
  /* 3494 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 32, 0,
  /* 3503 */ 'q', 'v', 'f', 'n', 'e', 'g', 32, 0,
  /* 3511 */ 'e', 'v', 'n', 'e', 'g', 32, 0,
  /* 3518 */ 'v', 's', 'r', 'a', 'h', 32, 0,
  /* 3525 */ 'e', 'v', 'l', 'd', 'h', 32, 0,
  /* 3532 */ 'e', 'v', 's', 't', 'd', 'h', 32, 0,
  /* 3540 */ 'v', 'm', 'r', 'g', 'h', 'h', 32, 0,
  /* 3548 */ 'v', 'm', 'r', 'g', 'l', 'h', 32, 0,
  /* 3556 */ 'v', 'r', 'l', 'h', 32, 0,
  /* 3562 */ 'v', 's', 'l', 'h', 32, 0,
  /* 3568 */ 'v', 'p', 'm', 's', 'u', 'm', 'h', 32, 0,
  /* 3577 */ 'v', 's', 'r', 'h', 32, 0,
  /* 3583 */ 'v', 'm', 'u', 'l', 'e', 's', 'h', 32, 0,
  /* 3592 */ 'v', 'a', 'v', 'g', 's', 'h', 32, 0,
  /* 3600 */ 'v', 'u', 'p', 'k', 'h', 's', 'h', 32, 0,
  /* 3609 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'h', 32, 0,
  /* 3619 */ 'v', 'u', 'p', 'k', 'l', 's', 'h', 32, 0,
  /* 3628 */ 'v', 'm', 'i', 'n', 's', 'h', 32, 0,
  /* 3636 */ 'v', 'm', 'u', 'l', 'o', 's', 'h', 32, 0,
  /* 3645 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', 32, 0,
  /* 3655 */ 'e', 'v', 'e', 'x', 't', 's', 'h', 32, 0,
  /* 3664 */ 'v', 'm', 'a', 'x', 's', 'h', 32, 0,
  /* 3672 */ 'v', 's', 'p', 'l', 't', 'h', 32, 0,
  /* 3680 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'h', 32, 0,
  /* 3690 */ 's', 't', 'h', 32, 0,
  /* 3695 */ 'v', 'm', 'u', 'l', 'e', 'u', 'h', 32, 0,
  /* 3704 */ 'v', 'a', 'v', 'g', 'u', 'h', 32, 0,
  /* 3712 */ 'v', 'm', 'i', 'n', 'u', 'h', 32, 0,
  /* 3720 */ 'v', 'm', 'u', 'l', 'o', 'u', 'h', 32, 0,
  /* 3729 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', 32, 0,
  /* 3739 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', 32, 0,
  /* 3749 */ 'v', 'm', 'a', 'x', 'u', 'h', 32, 0,
  /* 3757 */ 'v', 'c', 'l', 'z', 'h', 32, 0,
  /* 3764 */ 'd', 'c', 'b', 'i', 32, 0,
  /* 3770 */ 'i', 'c', 'b', 'i', 32, 0,
  /* 3776 */ 's', 'u', 'b', 'i', 32, 0,
  /* 3782 */ 'd', 'c', 'c', 'c', 'i', 32, 0,
  /* 3789 */ 'i', 'c', 'c', 'c', 'i', 32, 0,
  /* 3796 */ 'q', 'v', 'g', 'p', 'c', 'i', 32, 0,
  /* 3804 */ 's', 'r', 'a', 'd', 'i', 32, 0,
  /* 3811 */ 'a', 'd', 'd', 'i', 32, 0,
  /* 3817 */ 'c', 'm', 'p', 'l', 'd', 'i', 32, 0,
  /* 3825 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', 32, 0,
  /* 3835 */ 'e', 'x', 't', 'l', 'd', 'i', 32, 0,
  /* 3843 */ 'x', 'x', 'p', 'e', 'r', 'm', 'd', 'i', 32, 0,
  /* 3853 */ 'c', 'm', 'p', 'd', 'i', 32, 0,
  /* 3860 */ 'c', 'l', 'r', 'r', 'd', 'i', 32, 0,
  /* 3868 */ 'i', 'n', 's', 'r', 'd', 'i', 32, 0,
  /* 3876 */ 'r', 'o', 't', 'r', 'd', 'i', 32, 0,
  /* 3884 */ 'e', 'x', 't', 'r', 'd', 'i', 32, 0,
  /* 3892 */ 't', 'd', 'i', 32, 0,
  /* 3897 */ 'w', 'r', 't', 'e', 'e', 'i', 32, 0,
  /* 3905 */ 'm', 't', 'f', 's', 'f', 'i', 32, 0,
  /* 3913 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'f', 'i', 32, 0,
  /* 3924 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 32, 0,
  /* 3935 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 'h', 'i', 32, 0,
  /* 3948 */ 't', 'l', 'b', 'l', 'i', 32, 0,
  /* 3955 */ 'm', 'u', 'l', 'l', 'i', 32, 0,
  /* 3962 */ 'r', 'l', 'd', 'i', 'm', 'i', 32, 0,
  /* 3970 */ 'r', 'l', 'w', 'i', 'm', 'i', 32, 0,
  /* 3978 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 32, 0,
  /* 3988 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 32, 0,
  /* 3998 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 32, 0,
  /* 4008 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 32, 0,
  /* 4017 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 32, 0,
  /* 4027 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 32, 0,
  /* 4037 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 32, 0,
  /* 4047 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 32, 0,
  /* 4057 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 32, 0,
  /* 4066 */ 'q', 'v', 'a', 'l', 'i', 'g', 'n', 'i', 32, 0,
  /* 4076 */ 'v', 's', 'l', 'd', 'o', 'i', 32, 0,
  /* 4084 */ 'x', 's', 'r', 'd', 'p', 'i', 32, 0,
  /* 4092 */ 'x', 'v', 'r', 'd', 'p', 'i', 32, 0,
  /* 4100 */ 'x', 'v', 'r', 's', 'p', 'i', 32, 0,
  /* 4108 */ 'x', 'o', 'r', 'i', 32, 0,
  /* 4114 */ 'q', 'v', 'e', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 4125 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 4135 */ 's', 'r', 'a', 'w', 'i', 32, 0,
  /* 4142 */ 'x', 'x', 's', 'l', 'd', 'w', 'i', 32, 0,
  /* 4151 */ 'c', 'm', 'p', 'l', 'w', 'i', 32, 0,
  /* 4159 */ 'e', 'v', 'r', 'l', 'w', 'i', 32, 0,
  /* 4167 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', 32, 0,
  /* 4177 */ 'i', 'n', 's', 'l', 'w', 'i', 32, 0,
  /* 4185 */ 'e', 'v', 's', 'l', 'w', 'i', 32, 0,
  /* 4193 */ 'e', 'x', 't', 'l', 'w', 'i', 32, 0,
  /* 4201 */ 'c', 'm', 'p', 'w', 'i', 32, 0,
  /* 4208 */ 'c', 'l', 'r', 'r', 'w', 'i', 32, 0,
  /* 4216 */ 'i', 'n', 's', 'r', 'w', 'i', 32, 0,
  /* 4224 */ 'r', 'o', 't', 'r', 'w', 'i', 32, 0,
  /* 4232 */ 'e', 'x', 't', 'r', 'w', 'i', 32, 0,
  /* 4240 */ 'l', 's', 'w', 'i', 32, 0,
  /* 4246 */ 's', 't', 's', 'w', 'i', 32, 0,
  /* 4253 */ 't', 'w', 'i', 32, 0,
  /* 4258 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 32, 0,
  /* 4269 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 32, 0,
  /* 4279 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 32, 0,
  /* 4290 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 32, 0,
  /* 4300 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 32, 0,
  /* 4312 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 32, 0,
  /* 4323 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 32, 0,
  /* 4335 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 32, 0,
  /* 4346 */ 't', 'c', 'h', 'e', 'c', 'k', 32, 0,
  /* 4354 */ 'q', 'v', 'f', 'l', 'o', 'g', 'i', 'c', 'a', 'l', 32, 0,
  /* 4366 */ 'b', 'l', 32, 0,
  /* 4370 */ 'b', 'c', 'l', 32, 0,
  /* 4375 */ 'r', 'l', 'd', 'c', 'l', 32, 0,
  /* 4382 */ 'r', 'l', 'd', 'i', 'c', 'l', 32, 0,
  /* 4390 */ 't', 'l', 'b', 'i', 'e', 'l', 32, 0,
  /* 4398 */ 'q', 'v', 'f', 's', 'e', 'l', 32, 0,
  /* 4406 */ 'i', 's', 'e', 'l', 32, 0,
  /* 4412 */ 'v', 's', 'e', 'l', 32, 0,
  /* 4418 */ 'x', 'x', 's', 'e', 'l', 32, 0,
  /* 4425 */ 'b', 'c', 'l', 'r', 'l', 32, 0,
  /* 4432 */ 'b', 'c', 'c', 't', 'r', 'l', 32, 0,
  /* 4440 */ 'l', 'v', 's', 'l', 32, 0,
  /* 4446 */ 'q', 'v', 'f', 'm', 'u', 'l', 32, 0,
  /* 4454 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 32, 0,
  /* 4463 */ 'l', 'v', 'x', 'l', 32, 0,
  /* 4469 */ 's', 't', 'v', 'x', 'l', 32, 0,
  /* 4476 */ 'd', 'c', 'b', 'z', 'l', 32, 0,
  /* 4483 */ 'b', 'd', 'z', 'l', 32, 0,
  /* 4489 */ 'b', 'd', 'n', 'z', 'l', 32, 0,
  /* 4496 */ 'v', 'm', 's', 'u', 'm', 'm', 'b', 'm', 32, 0,
  /* 4506 */ 'v', 's', 'u', 'b', 'u', 'b', 'm', 32, 0,
  /* 4515 */ 'v', 'a', 'd', 'd', 'u', 'b', 'm', 32, 0,
  /* 4524 */ 'v', 'm', 's', 'u', 'm', 'u', 'b', 'm', 32, 0,
  /* 4534 */ 'v', 's', 'u', 'b', 'u', 'd', 'm', 32, 0,
  /* 4543 */ 'v', 'a', 'd', 'd', 'u', 'd', 'm', 32, 0,
  /* 4552 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 'm', 32, 0,
  /* 4562 */ 'v', 's', 'u', 'b', 'u', 'h', 'm', 32, 0,
  /* 4571 */ 'v', 'm', 'l', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 4582 */ 'v', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 4591 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 'm', 32, 0,
  /* 4601 */ 'v', 'r', 'f', 'i', 'm', 32, 0,
  /* 4608 */ 'x', 's', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 4617 */ 'x', 'v', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 4626 */ 'x', 'v', 'r', 's', 'p', 'i', 'm', 32, 0,
  /* 4635 */ 'q', 'v', 'f', 'r', 'i', 'm', 32, 0,
  /* 4643 */ 'r', 'l', 'w', 'i', 'n', 'm', 32, 0,
  /* 4651 */ 'r', 'l', 'w', 'n', 'm', 32, 0,
  /* 4658 */ 'q', 'v', 'f', 'p', 'e', 'r', 'm', 32, 0,
  /* 4667 */ 'v', 'p', 'e', 'r', 'm', 32, 0,
  /* 4674 */ 'v', 'p', 'k', 'u', 'h', 'u', 'm', 32, 0,
  /* 4683 */ 'v', 'p', 'k', 'u', 'w', 'u', 'm', 32, 0,
  /* 4692 */ 'v', 's', 'u', 'b', 'u', 'w', 'm', 32, 0,
  /* 4701 */ 'v', 'a', 'd', 'd', 'u', 'w', 'm', 32, 0,
  /* 4710 */ 'v', 'm', 'u', 'l', 'u', 'w', 'm', 32, 0,
  /* 4719 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 4732 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 4745 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 4756 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'n', 32, 0,
  /* 4767 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 4780 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 4793 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 4804 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 4817 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 4830 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 4841 */ 'q', 'v', 'f', 't', 's', 't', 'n', 'a', 'n', 32, 0,
  /* 4852 */ 'q', 'v', 'f', 'c', 'p', 's', 'g', 'n', 32, 0,
  /* 4862 */ 'v', 'r', 'f', 'i', 'n', 32, 0,
  /* 4869 */ 'q', 'v', 'f', 'r', 'i', 'n', 32, 0,
  /* 4877 */ 'm', 'f', 's', 'r', 'i', 'n', 32, 0,
  /* 4885 */ 'm', 't', 's', 'r', 'i', 'n', 32, 0,
  /* 4893 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 32, 0,
  /* 4902 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 32, 0,
  /* 4913 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 'l', 'o', 32, 0,
  /* 4926 */ 'v', 's', 'l', 'o', 32, 0,
  /* 4932 */ 'v', 's', 'r', 'o', 32, 0,
  /* 4938 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 32, 0,
  /* 4947 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 4959 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 4971 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 4982 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 4993 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5005 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5017 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5028 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5039 */ 'x', 's', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 5048 */ 'x', 'v', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 5057 */ 'x', 's', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 5066 */ 'x', 'v', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 5075 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 5086 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 5097 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 5108 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 5119 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 5130 */ 'x', 's', 'r', 'e', 'd', 'p', 32, 0,
  /* 5138 */ 'x', 'v', 'r', 'e', 'd', 'p', 32, 0,
  /* 5146 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 5158 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 5170 */ 'x', 's', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 5179 */ 'x', 'v', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 5188 */ 'x', 's', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 5197 */ 'x', 'v', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 5206 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 5218 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 5230 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 5241 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 5252 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 5264 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 5276 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 5287 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 5298 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 5309 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 5320 */ 'x', 's', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 5329 */ 'x', 'v', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 5338 */ 'x', 's', 'c', 'm', 'p', 'o', 'd', 'p', 32, 0,
  /* 5348 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 5358 */ 'x', 'v', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 5368 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 5379 */ 'x', 's', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 5389 */ 'x', 'v', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 5399 */ 'x', 's', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 5408 */ 'x', 'v', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 5417 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 5428 */ 'x', 's', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 5438 */ 'x', 's', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 5449 */ 'x', 'v', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 5460 */ 'x', 'v', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 5470 */ 'x', 's', 'c', 'm', 'p', 'u', 'd', 'p', 32, 0,
  /* 5480 */ 'x', 's', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 5489 */ 'x', 's', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 5499 */ 'x', 'v', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 5509 */ 'x', 'v', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 5518 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 'd', 'p', 32, 0,
  /* 5529 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 'd', 'p', 32, 0,
  /* 5540 */ 'x', 's', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 5549 */ 'x', 'v', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 5558 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', 32, 0,
  /* 5567 */ 'v', 'n', 'm', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 5577 */ 'v', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 5585 */ 'v', 'm', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 5594 */ 'v', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 5602 */ 'v', 'l', 'o', 'g', 'e', 'f', 'p', 32, 0,
  /* 5611 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', 32, 0,
  /* 5621 */ 'v', 'r', 'e', 'f', 'p', 32, 0,
  /* 5628 */ 'v', 'e', 'x', 'p', 't', 'e', 'f', 'p', 32, 0,
  /* 5638 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 'f', 'p', 32, 0,
  /* 5649 */ 'v', 'm', 'i', 'n', 'f', 'p', 32, 0,
  /* 5657 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', 32, 0,
  /* 5667 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', 32, 0,
  /* 5677 */ 'v', 'm', 'a', 'x', 'f', 'p', 32, 0,
  /* 5685 */ 'v', 'r', 'f', 'i', 'p', 32, 0,
  /* 5692 */ 'x', 's', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 5701 */ 'x', 'v', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 5710 */ 'x', 'v', 'r', 's', 'p', 'i', 'p', 32, 0,
  /* 5719 */ 'q', 'v', 'f', 'r', 'i', 'p', 32, 0,
  /* 5727 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 5739 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 5750 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 5762 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 5773 */ 'x', 'v', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 5782 */ 'x', 'v', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 5791 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 5802 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 5813 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', 32, 0,
  /* 5824 */ 'x', 'v', 'r', 'e', 's', 'p', 32, 0,
  /* 5832 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 5844 */ 'x', 'v', 'n', 'e', 'g', 's', 'p', 32, 0,
  /* 5853 */ 'x', 'v', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 5862 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 5874 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 5885 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 5897 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 5908 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 's', 'p', 32, 0,
  /* 5919 */ 'x', 'v', 'm', 'i', 'n', 's', 'p', 32, 0,
  /* 5928 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 5938 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 5948 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', 32, 0,
  /* 5959 */ 'q', 'v', 'f', 'r', 's', 'p', 32, 0,
  /* 5967 */ 'x', 'v', 'n', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 5977 */ 'x', 'v', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 5986 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', 32, 0,
  /* 5997 */ 'x', 'v', 't', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 6008 */ 'x', 'v', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 6018 */ 'x', 'v', 't', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 6028 */ 'x', 'v', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 6037 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 's', 'p', 32, 0,
  /* 6048 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 's', 'p', 32, 0,
  /* 6059 */ 'x', 'v', 'm', 'a', 'x', 's', 'p', 32, 0,
  /* 6068 */ 'q', 'v', 'f', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 6078 */ 'e', 'v', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 6087 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 32, 0,
  /* 6100 */ 'm', 'b', 'a', 'r', 32, 0,
  /* 6106 */ 'm', 'f', 'd', 'c', 'r', 32, 0,
  /* 6113 */ 'r', 'l', 'd', 'c', 'r', 32, 0,
  /* 6120 */ 'm', 't', 'd', 'c', 'r', 32, 0,
  /* 6127 */ 'm', 'f', 'c', 'r', 32, 0,
  /* 6133 */ 'r', 'l', 'd', 'i', 'c', 'r', 32, 0,
  /* 6141 */ 'm', 'f', 'v', 's', 'c', 'r', 32, 0,
  /* 6149 */ 'm', 't', 'v', 's', 'c', 'r', 32, 0,
  /* 6157 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 6167 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 6176 */ 'b', 'c', 'l', 'r', 32, 0,
  /* 6182 */ 'm', 'f', 'l', 'r', 32, 0,
  /* 6188 */ 'm', 't', 'l', 'r', 32, 0,
  /* 6194 */ 'q', 'v', 'f', 'm', 'r', 32, 0,
  /* 6201 */ 'x', 'x', 'l', 'o', 'r', 32, 0,
  /* 6208 */ 'x', 'x', 'l', 'n', 'o', 'r', 32, 0,
  /* 6216 */ 'c', 'r', 'n', 'o', 'r', 32, 0,
  /* 6223 */ 'e', 'v', 'n', 'o', 'r', 32, 0,
  /* 6230 */ 'c', 'r', 'o', 'r', 32, 0,
  /* 6236 */ 'e', 'v', 'o', 'r', 32, 0,
  /* 6242 */ 'x', 'x', 'l', 'x', 'o', 'r', 32, 0,
  /* 6250 */ 'v', 'p', 'e', 'r', 'm', 'x', 'o', 'r', 32, 0,
  /* 6260 */ 'c', 'r', 'x', 'o', 'r', 32, 0,
  /* 6267 */ 'e', 'v', 'x', 'o', 'r', 32, 0,
  /* 6274 */ 'm', 'f', 's', 'p', 'r', 32, 0,
  /* 6281 */ 'm', 't', 's', 'p', 'r', 32, 0,
  /* 6288 */ 'm', 'f', 's', 'r', 32, 0,
  /* 6294 */ 'm', 'f', 'm', 's', 'r', 32, 0,
  /* 6301 */ 'm', 't', 'm', 's', 'r', 32, 0,
  /* 6308 */ 'm', 't', 's', 'r', 32, 0,
  /* 6314 */ 'l', 'v', 's', 'r', 32, 0,
  /* 6320 */ 'b', 'c', 'c', 't', 'r', 32, 0,
  /* 6327 */ 'm', 'f', 'c', 't', 'r', 32, 0,
  /* 6334 */ 'm', 't', 'c', 't', 'r', 32, 0,
  /* 6341 */ 'q', 'v', 'f', 'a', 'b', 's', 32, 0,
  /* 6349 */ 'q', 'v', 'f', 'n', 'a', 'b', 's', 32, 0,
  /* 6358 */ 'e', 'v', 'a', 'b', 's', 32, 0,
  /* 6365 */ 'v', 's', 'u', 'm', '4', 's', 'b', 's', 32, 0,
  /* 6375 */ 'v', 's', 'u', 'b', 's', 'b', 's', 32, 0,
  /* 6384 */ 'v', 'a', 'd', 'd', 's', 'b', 's', 32, 0,
  /* 6393 */ 'v', 's', 'u', 'm', '4', 'u', 'b', 's', 32, 0,
  /* 6403 */ 'v', 's', 'u', 'b', 'u', 'b', 's', 32, 0,
  /* 6412 */ 'v', 'a', 'd', 'd', 'u', 'b', 's', 32, 0,
  /* 6421 */ 'q', 'v', 'f', 's', 'u', 'b', 's', 32, 0,
  /* 6430 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 6440 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 6451 */ 'q', 'v', 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 6460 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 6470 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 6481 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 6496 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 6510 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 6521 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 6533 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 's', 32, 0,
  /* 6543 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 6555 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 6567 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 6579 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 6591 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 6603 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 6615 */ 'q', 'v', 'f', 'r', 'e', 's', 32, 0,
  /* 6623 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 's', 32, 0,
  /* 6635 */ 'm', 'f', 'f', 's', 32, 0,
  /* 6641 */ 'l', 'f', 's', 32, 0,
  /* 6646 */ 'm', 'c', 'r', 'f', 's', 32, 0,
  /* 6653 */ 's', 't', 'f', 's', 32, 0,
  /* 6659 */ 'v', 's', 'u', 'm', '4', 's', 'h', 's', 32, 0,
  /* 6669 */ 'v', 's', 'u', 'b', 's', 'h', 's', 32, 0,
  /* 6678 */ 'v', 'm', 'h', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 6689 */ 'v', 'm', 'h', 'r', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 6701 */ 'v', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 6710 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 's', 32, 0,
  /* 6720 */ 'v', 's', 'u', 'b', 'u', 'h', 's', 32, 0,
  /* 6729 */ 'v', 'a', 'd', 'd', 'u', 'h', 's', 32, 0,
  /* 6738 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 's', 32, 0,
  /* 6748 */ 's', 'u', 'b', 'i', 's', 32, 0,
  /* 6755 */ 'a', 'd', 'd', 'i', 's', 32, 0,
  /* 6762 */ 'l', 'i', 's', 32, 0,
  /* 6767 */ 'x', 'o', 'r', 'i', 's', 32, 0,
  /* 6774 */ 'e', 'v', 's', 'r', 'w', 'i', 's', 32, 0,
  /* 6783 */ 'q', 'v', 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 6792 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 's', 32, 0,
  /* 6802 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 32, 0,
  /* 6811 */ 'd', 's', 's', 32, 0,
  /* 6816 */ 'v', 'p', 'k', 's', 'h', 's', 's', 32, 0,
  /* 6825 */ 'v', 'p', 'k', 's', 'w', 's', 's', 32, 0,
  /* 6834 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 's', 32, 0,
  /* 6844 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 's', 32, 0,
  /* 6854 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 6862 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 's', 32, 0,
  /* 6873 */ 'v', 'p', 'k', 's', 'h', 'u', 's', 32, 0,
  /* 6882 */ 'v', 'p', 'k', 'u', 'h', 'u', 's', 32, 0,
  /* 6891 */ 'v', 'p', 'k', 's', 'w', 'u', 's', 32, 0,
  /* 6900 */ 'v', 'p', 'k', 'u', 'w', 'u', 's', 32, 0,
  /* 6909 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 6916 */ 'e', 'v', 's', 'r', 'w', 's', 32, 0,
  /* 6924 */ 'v', 's', 'u', 'm', '2', 's', 'w', 's', 32, 0,
  /* 6934 */ 'v', 's', 'u', 'b', 's', 'w', 's', 32, 0,
  /* 6943 */ 'v', 'a', 'd', 'd', 's', 'w', 's', 32, 0,
  /* 6952 */ 'v', 's', 'u', 'm', 's', 'w', 's', 32, 0,
  /* 6961 */ 'v', 's', 'u', 'b', 'u', 'w', 's', 32, 0,
  /* 6970 */ 'v', 'a', 'd', 'd', 'u', 'w', 's', 32, 0,
  /* 6979 */ 'e', 'v', 'd', 'i', 'v', 'w', 's', 32, 0,
  /* 6988 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 7000 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 7012 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 7024 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 7036 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 7048 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 7060 */ 'v', 'c', 't', 's', 'x', 's', 32, 0,
  /* 7068 */ 'v', 'c', 't', 'u', 'x', 's', 32, 0,
  /* 7076 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 7089 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 7101 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 7115 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 7129 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 7141 */ 'd', 'c', 'b', 't', 32, 0,
  /* 7147 */ 'i', 'c', 'b', 't', 32, 0,
  /* 7153 */ 'q', 'v', 'f', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 7163 */ 'w', 'a', 'i', 't', 32, 0,
  /* 7169 */ 'q', 'v', 'f', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 7179 */ 'f', 's', 'q', 'r', 't', 32, 0,
  /* 7186 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 7200 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 7213 */ 'd', 'c', 'b', 's', 't', 32, 0,
  /* 7220 */ 'd', 's', 't', 32, 0,
  /* 7225 */ 'd', 'c', 'b', 't', 's', 't', 32, 0,
  /* 7233 */ 'd', 's', 't', 's', 't', 32, 0,
  /* 7240 */ 'd', 's', 't', 't', 32, 0,
  /* 7246 */ 'd', 's', 't', 's', 't', 't', 32, 0,
  /* 7254 */ 'l', 'h', 'a', 'u', 32, 0,
  /* 7260 */ 's', 't', 'b', 'u', 32, 0,
  /* 7266 */ 'l', 'f', 'd', 'u', 32, 0,
  /* 7272 */ 's', 't', 'f', 'd', 'u', 32, 0,
  /* 7279 */ 'm', 'u', 'l', 'h', 'd', 'u', 32, 0,
  /* 7287 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 32, 0,
  /* 7297 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 32, 0,
  /* 7307 */ 'l', 'd', 'u', 32, 0,
  /* 7312 */ 's', 't', 'd', 'u', 32, 0,
  /* 7318 */ 'd', 'i', 'v', 'd', 'u', 32, 0,
  /* 7325 */ 'd', 'i', 'v', 'd', 'e', 'u', 32, 0,
  /* 7333 */ 'd', 'i', 'v', 'w', 'e', 'u', 32, 0,
  /* 7341 */ 's', 't', 'h', 'u', 32, 0,
  /* 7347 */ 'e', 'v', 's', 'r', 'w', 'i', 'u', 32, 0,
  /* 7356 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 32, 0,
  /* 7365 */ 'f', 'c', 'm', 'p', 'u', 32, 0,
  /* 7372 */ 'l', 'f', 's', 'u', 32, 0,
  /* 7378 */ 's', 't', 'f', 's', 'u', 32, 0,
  /* 7385 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 'u', 32, 0,
  /* 7395 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 'u', 32, 0,
  /* 7405 */ 'm', 'u', 'l', 'h', 'w', 'u', 32, 0,
  /* 7413 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 32, 0,
  /* 7423 */ 'e', 'v', 's', 'r', 'w', 'u', 32, 0,
  /* 7431 */ 's', 't', 'w', 'u', 32, 0,
  /* 7437 */ 'e', 'v', 'd', 'i', 'v', 'w', 'u', 32, 0,
  /* 7446 */ 'l', 'b', 'z', 'u', 32, 0,
  /* 7452 */ 'l', 'h', 'z', 'u', 32, 0,
  /* 7458 */ 'l', 'w', 'z', 'u', 32, 0,
  /* 7464 */ 'f', 'd', 'i', 'v', 32, 0,
  /* 7470 */ 'x', 'x', 'l', 'e', 'q', 'v', 32, 0,
  /* 7478 */ 'c', 'r', 'e', 'q', 'v', 32, 0,
  /* 7485 */ 'e', 'v', 'e', 'q', 'v', 32, 0,
  /* 7492 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 7505 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 7518 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 7531 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 7544 */ 'e', 'v', 'a', 'd', 'd', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 7557 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 7570 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 7584 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 7597 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 7610 */ 'e', 'v', 'a', 'd', 'd', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 7623 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 7636 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 7650 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 7663 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 7676 */ 'e', 'v', 'a', 'd', 'd', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 7689 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 7702 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 7716 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 7729 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 7742 */ 'e', 'v', 'a', 'd', 'd', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 7755 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 7768 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 7782 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 7795 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 7808 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'w', 32, 0,
  /* 7820 */ 'v', 's', 'r', 'a', 'w', 32, 0,
  /* 7827 */ 'e', 'v', 'a', 'd', 'd', 'w', 32, 0,
  /* 7835 */ 'e', 'v', 'l', 'd', 'w', 32, 0,
  /* 7842 */ 'e', 'v', 'r', 'n', 'd', 'w', 32, 0,
  /* 7850 */ 'e', 'v', 's', 't', 'd', 'w', 32, 0,
  /* 7858 */ 'e', 'v', 's', 'u', 'b', 'f', 'w', 32, 0,
  /* 7867 */ 'e', 'v', 's', 'u', 'b', 'i', 'f', 'w', 32, 0,
  /* 7877 */ 'v', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 7885 */ 'x', 'x', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 7894 */ 'm', 'u', 'l', 'h', 'w', 32, 0,
  /* 7901 */ 'e', 'v', 'a', 'd', 'd', 'i', 'w', 32, 0,
  /* 7910 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 32, 0,
  /* 7919 */ 'v', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 7927 */ 'x', 'x', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 7936 */ 'm', 'u', 'l', 'l', 'w', 32, 0,
  /* 7943 */ 'c', 'm', 'p', 'l', 'w', 32, 0,
  /* 7950 */ 'e', 'v', 'r', 'l', 'w', 32, 0,
  /* 7957 */ 'e', 'v', 's', 'l', 'w', 32, 0,
  /* 7964 */ 'l', 'm', 'w', 32, 0,
  /* 7969 */ 's', 't', 'm', 'w', 32, 0,
  /* 7975 */ 'v', 'p', 'm', 's', 'u', 'm', 'w', 32, 0,
  /* 7984 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 7997 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 8010 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 8023 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 8036 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 8049 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 8062 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 8075 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 8088 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 8101 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 8114 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 8127 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 8140 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 8153 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 8166 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 8179 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 8192 */ 'c', 'm', 'p', 'w', 32, 0,
  /* 8198 */ 'v', 's', 'r', 'w', 32, 0,
  /* 8204 */ 'v', 'm', 'u', 'l', 'e', 's', 'w', 32, 0,
  /* 8213 */ 'v', 'a', 'v', 'g', 's', 'w', 32, 0,
  /* 8221 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'w', 32, 0,
  /* 8231 */ 'e', 'v', 'c', 'n', 't', 'l', 's', 'w', 32, 0,
  /* 8241 */ 'v', 'm', 'i', 'n', 's', 'w', 32, 0,
  /* 8249 */ 'v', 'm', 'u', 'l', 'o', 's', 'w', 32, 0,
  /* 8258 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', 32, 0,
  /* 8268 */ 'e', 'x', 't', 's', 'w', 32, 0,
  /* 8275 */ 'v', 'm', 'a', 'x', 's', 'w', 32, 0,
  /* 8283 */ 'v', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 8291 */ 'x', 'x', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 8300 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'w', 32, 0,
  /* 8310 */ 's', 't', 'w', 32, 0,
  /* 8315 */ 'v', 's', 'u', 'b', 'c', 'u', 'w', 32, 0,
  /* 8324 */ 'v', 'a', 'd', 'd', 'c', 'u', 'w', 32, 0,
  /* 8333 */ 'v', 'm', 'u', 'l', 'e', 'u', 'w', 32, 0,
  /* 8342 */ 'v', 'a', 'v', 'g', 'u', 'w', 32, 0,
  /* 8350 */ 'v', 'm', 'i', 'n', 'u', 'w', 32, 0,
  /* 8358 */ 'v', 'm', 'u', 'l', 'o', 'u', 'w', 32, 0,
  /* 8367 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', 32, 0,
  /* 8377 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', 32, 0,
  /* 8387 */ 'v', 'm', 'a', 'x', 'u', 'w', 32, 0,
  /* 8395 */ 'd', 'i', 'v', 'w', 32, 0,
  /* 8401 */ 'v', 'c', 'l', 'z', 'w', 32, 0,
  /* 8408 */ 'e', 'v', 'c', 'n', 't', 'l', 'z', 'w', 32, 0,
  /* 8418 */ 'l', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 8426 */ 's', 't', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 8435 */ 'l', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 8443 */ 's', 't', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 8452 */ 'l', 'h', 'a', 'x', 32, 0,
  /* 8458 */ 't', 'l', 'b', 'i', 'v', 'a', 'x', 32, 0,
  /* 8467 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 32, 0,
  /* 8477 */ 'l', 'w', 'a', 'x', 32, 0,
  /* 8483 */ 'l', 'v', 'e', 'b', 'x', 32, 0,
  /* 8490 */ 's', 't', 'v', 'e', 'b', 'x', 32, 0,
  /* 8498 */ 's', 't', 'b', 'x', 32, 0,
  /* 8504 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 32, 0,
  /* 8513 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 32, 0,
  /* 8523 */ 'e', 'v', 'l', 'd', 'd', 'x', 32, 0,
  /* 8531 */ 'e', 'v', 's', 't', 'd', 'd', 'x', 32, 0,
  /* 8540 */ 'q', 'v', 'l', 'f', 'd', 'x', 32, 0,
  /* 8548 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 32, 0,
  /* 8557 */ 'q', 'v', 'l', 'p', 'c', 'l', 'd', 'x', 32, 0,
  /* 8567 */ 'q', 'v', 'l', 'p', 'c', 'r', 'd', 'x', 32, 0,
  /* 8577 */ 'l', 'x', 's', 'd', 'x', 32, 0,
  /* 8584 */ 's', 't', 'x', 's', 'd', 'x', 32, 0,
  /* 8592 */ 's', 't', 'd', 'x', 32, 0,
  /* 8598 */ 'e', 'v', 'l', 'w', 'h', 'e', 'x', 32, 0,
  /* 8607 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 'x', 32, 0,
  /* 8617 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 'x', 32, 0,
  /* 8627 */ 'e', 'v', 'l', 'd', 'h', 'x', 32, 0,
  /* 8635 */ 'e', 'v', 's', 't', 'd', 'h', 'x', 32, 0,
  /* 8644 */ 'l', 'v', 'e', 'h', 'x', 32, 0,
  /* 8651 */ 's', 't', 'v', 'e', 'h', 'x', 32, 0,
  /* 8659 */ 's', 't', 'h', 'x', 32, 0,
  /* 8665 */ 's', 't', 'b', 'c', 'i', 'x', 32, 0,
  /* 8673 */ 'l', 'd', 'c', 'i', 'x', 32, 0,
  /* 8680 */ 's', 't', 'd', 'c', 'i', 'x', 32, 0,
  /* 8688 */ 's', 't', 'h', 'c', 'i', 'x', 32, 0,
  /* 8696 */ 's', 't', 'w', 'c', 'i', 'x', 32, 0,
  /* 8704 */ 'l', 'b', 'z', 'c', 'i', 'x', 32, 0,
  /* 8712 */ 'l', 'h', 'z', 'c', 'i', 'x', 32, 0,
  /* 8720 */ 'l', 'w', 'z', 'c', 'i', 'x', 32, 0,
  /* 8728 */ 'v', 's', 'b', 'o', 'x', 32, 0,
  /* 8735 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 'x', 32, 0,
  /* 8745 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 'x', 32, 0,
  /* 8755 */ 'v', 'u', 'p', 'k', 'h', 'p', 'x', 32, 0,
  /* 8764 */ 'v', 'p', 'k', 'p', 'x', 32, 0,
  /* 8771 */ 'v', 'u', 'p', 'k', 'l', 'p', 'x', 32, 0,
  /* 8780 */ 'l', 'b', 'a', 'r', 'x', 32, 0,
  /* 8787 */ 'l', 'd', 'a', 'r', 'x', 32, 0,
  /* 8794 */ 'l', 'h', 'a', 'r', 'x', 32, 0,
  /* 8801 */ 'l', 'w', 'a', 'r', 'x', 32, 0,
  /* 8808 */ 'l', 'd', 'b', 'r', 'x', 32, 0,
  /* 8815 */ 's', 't', 'd', 'b', 'r', 'x', 32, 0,
  /* 8823 */ 'l', 'h', 'b', 'r', 'x', 32, 0,
  /* 8830 */ 's', 't', 'h', 'b', 'r', 'x', 32, 0,
  /* 8838 */ 'l', 'w', 'b', 'r', 'x', 32, 0,
  /* 8845 */ 's', 't', 'w', 'b', 'r', 'x', 32, 0,
  /* 8853 */ 't', 'l', 'b', 's', 'x', 32, 0,
  /* 8860 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 32, 0,
  /* 8869 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 32, 0,
  /* 8879 */ 'l', 'x', 'v', 'd', 's', 'x', 32, 0,
  /* 8887 */ 'v', 'c', 'f', 's', 'x', 32, 0,
  /* 8894 */ 'q', 'v', 'l', 'f', 's', 'x', 32, 0,
  /* 8902 */ 'q', 'v', 's', 't', 'f', 's', 'x', 32, 0,
  /* 8911 */ 'q', 'v', 'l', 'p', 'c', 'l', 's', 'x', 32, 0,
  /* 8921 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 'x', 32, 0,
  /* 8931 */ 'q', 'v', 'l', 'p', 'c', 'r', 's', 'x', 32, 0,
  /* 8941 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 8955 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 8968 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 8983 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 8998 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 9011 */ 'l', 'h', 'a', 'u', 'x', 32, 0,
  /* 9018 */ 'l', 'w', 'a', 'u', 'x', 32, 0,
  /* 9025 */ 's', 't', 'b', 'u', 'x', 32, 0,
  /* 9032 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 9042 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 9053 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 32, 0,
  /* 9062 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 32, 0,
  /* 9072 */ 'l', 'd', 'u', 'x', 32, 0,
  /* 9078 */ 's', 't', 'd', 'u', 'x', 32, 0,
  /* 9085 */ 'v', 'c', 'f', 'u', 'x', 32, 0,
  /* 9092 */ 's', 't', 'h', 'u', 'x', 32, 0,
  /* 9099 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 'x', 32, 0,
  /* 9109 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 9119 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 9130 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 32, 0,
  /* 9139 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 32, 0,
  /* 9149 */ 's', 't', 'w', 'u', 'x', 32, 0,
  /* 9156 */ 'l', 'b', 'z', 'u', 'x', 32, 0,
  /* 9163 */ 'l', 'h', 'z', 'u', 'x', 32, 0,
  /* 9170 */ 'l', 'w', 'z', 'u', 'x', 32, 0,
  /* 9177 */ 'l', 'v', 'x', 32, 0,
  /* 9182 */ 's', 't', 'v', 'x', 32, 0,
  /* 9188 */ 'e', 'v', 'l', 'd', 'w', 'x', 32, 0,
  /* 9196 */ 'e', 'v', 's', 't', 'd', 'w', 'x', 32, 0,
  /* 9205 */ 'l', 'v', 'e', 'w', 'x', 32, 0,
  /* 9212 */ 's', 't', 'v', 'e', 'w', 'x', 32, 0,
  /* 9220 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 32, 0,
  /* 9230 */ 's', 't', 'w', 'x', 32, 0,
  /* 9236 */ 'l', 'b', 'z', 'x', 32, 0,
  /* 9242 */ 'l', 'h', 'z', 'x', 32, 0,
  /* 9248 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 32, 0,
  /* 9258 */ 'l', 'w', 'z', 'x', 32, 0,
  /* 9264 */ 'd', 'c', 'b', 'z', 32, 0,
  /* 9270 */ 'l', 'b', 'z', 32, 0,
  /* 9275 */ 'b', 'd', 'z', 32, 0,
  /* 9280 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'z', 32, 0,
  /* 9290 */ 'l', 'h', 'z', 32, 0,
  /* 9295 */ 'v', 'r', 'f', 'i', 'z', 32, 0,
  /* 9302 */ 'x', 's', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 9311 */ 'x', 'v', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 9320 */ 'x', 'v', 'r', 's', 'p', 'i', 'z', 32, 0,
  /* 9329 */ 'q', 'v', 'f', 'r', 'i', 'z', 32, 0,
  /* 9337 */ 'b', 'd', 'n', 'z', 32, 0,
  /* 9343 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 'z', 32, 0,
  /* 9354 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 'z', 32, 0,
  /* 9365 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'z', 32, 0,
  /* 9375 */ 'l', 'w', 'z', 32, 0,
  /* 9380 */ 'm', 'f', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 9389 */ 'm', 't', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 9398 */ 'b', 'd', 'z', 'l', 'r', 'l', '+', 0,
  /* 9406 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '+', 0,
  /* 9415 */ 'b', 'd', 'z', 'l', 'r', '+', 0,
  /* 9422 */ 'b', 'd', 'n', 'z', 'l', 'r', '+', 0,
  /* 9430 */ 'b', 'd', 'z', 'l', 'r', 'l', '-', 0,
  /* 9438 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '-', 0,
  /* 9447 */ 'b', 'd', 'z', 'l', 'r', '-', 0,
  /* 9454 */ 'b', 'd', 'n', 'z', 'l', 'r', '-', 0,
  /* 9462 */ 't', 'r', 'e', 'c', 'h', 'k', 'p', 't', '.', 0,
  /* 9472 */ 'o', 'r', 'i', 32, '1', ',', 32, '1', ',', 32, '0', 0,
  /* 9484 */ 'o', 'r', 'i', 32, '2', ',', 32, '2', ',', 32, '0', 0,
  /* 9496 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', '3', '2', 0,
  /* 9513 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 9534 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 9555 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 9577 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 9598 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 9615 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 9636 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 9656 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', '3', '2', 0,
  /* 9670 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', '3', '2', 0,
  /* 9684 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 9699 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 9714 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '3', '2', 0,
  /* 9733 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '3', '2', 0,
  /* 9751 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 9769 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 9787 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 9802 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 9815 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 9836 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 9857 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 9879 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 9896 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 9917 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 9938 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 9958 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '6', '4', 0,
  /* 9977 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '6', '4', 0,
  /* 9995 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'i', '6', '4', 0,
  /* 10016 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 10030 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '4', 0,
  /* 10041 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 10055 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '4', 0,
  /* 10066 */ 'c', 'r', 'x', 'o', 'r', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 10080 */ 'c', 'r', 'e', 'q', 'v', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 10094 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 10115 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 10136 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 10158 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 10179 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 10196 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 10217 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 10237 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 10248 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 10262 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '8', 0,
  /* 10273 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 10293 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 10307 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 10327 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 10348 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 10368 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 10388 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 10407 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 10426 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '8', 0,
  /* 10437 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 10450 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', '8', 0,
  /* 10467 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', '8', 0,
  /* 10484 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'i', '8', 0,
  /* 10500 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 10512 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 10526 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 10540 */ '#', 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 10557 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 10572 */ '#', 'R', 'e', 'a', 'd', 'T', 'B', 0,
  /* 10580 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 10590 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'B', 'R', 'C', 0,
  /* 10606 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'B', 'R', 'C', 0,
  /* 10619 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'R', 'C', 0,
  /* 10635 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'F', 'R', 'C', 0,
  /* 10648 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 10665 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 10679 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 10695 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'R', 'R', 'C', 0,
  /* 10708 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'S', 'R', 'C', 0,
  /* 10724 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'S', 'R', 'C', 0,
  /* 10737 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'R', 'C', 0,
  /* 10753 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'R', 'C', 0,
  /* 10766 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 10779 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 10786 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 10796 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 10812 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 10826 */ '#', 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 10836 */ '#', 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 10844 */ '#', 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 10854 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 10866 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 10878 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 10891 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 10904 */ '#', 'U', 'p', 'd', 'a', 't', 'e', 'G', 'B', 'R', 0,
  /* 10915 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 10927 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 10937 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 10953 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 10969 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 10983 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 10995 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 11007 */ '#', 'M', 'o', 'v', 'e', 'G', 'O', 'T', 't', 'o', 'L', 'R', 0,
  /* 11020 */ '#', 'T', 'C', 'H', 'E', 'C', 'K', '_', 'R', 'E', 'T', 0,
  /* 11032 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 11047 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 11060 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', 0,
  /* 11076 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', 0,
  /* 11092 */ '#', 'P', 'P', 'C', '3', '2', 'G', 'O', 'T', 0,
  /* 11102 */ '#', 'P', 'P', 'C', '3', '2', 'P', 'I', 'C', 'G', 'O', 'T', 0,
  /* 11115 */ '#', 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 11125 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 11140 */ 's', 'l', 'b', 'i', 'a', 0,
  /* 11146 */ 't', 'l', 'b', 'i', 'a', 0,
  /* 11152 */ 'b', 0,
  /* 11154 */ 't', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 11162 */ 'i', 's', 'y', 'n', 'c', 0,
  /* 11168 */ 'm', 's', 'y', 'n', 'c', 0,
  /* 11174 */ '#', 'L', 'D', 't', 'o', 'c', 0,
  /* 11181 */ '#', 'L', 'W', 'Z', 't', 'o', 'c', 0,
  /* 11189 */ 'r', 'f', 'i', 'd', 0,
  /* 11194 */ 't', 'l', 'b', 'r', 'e', 0,
  /* 11200 */ 't', 'l', 'b', 'w', 'e', 0,
  /* 11206 */ 'r', 'f', 'c', 'i', 0,
  /* 11211 */ 'r', 'f', 'm', 'c', 'i', 0,
  /* 11217 */ 'r', 'f', 'd', 'i', 0,
  /* 11222 */ 'r', 'f', 'i', 0,
  /* 11226 */ 'd', 's', 's', 'a', 'l', 'l', 0,
  /* 11233 */ 'b', 'l', 'r', 'l', 0,
  /* 11238 */ 'b', 'd', 'z', 'l', 'r', 'l', 0,
  /* 11245 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', 0,
  /* 11253 */ 'b', 'c', 't', 'r', 'l', 0,
  /* 11259 */ 'a', 't', 't', 'n', 0,
  /* 11264 */ 'e', 'i', 'e', 'i', 'o', 0,
  /* 11270 */ 't', 'r', 'a', 'p', 0,
  /* 11275 */ 'n', 'o', 'p', 0,
  /* 11279 */ 'b', 'l', 'r', 0,
  /* 11283 */ 'b', 'd', 'z', 'l', 'r', 0,
  /* 11289 */ 'b', 'd', 'n', 'z', 'l', 'r', 0,
  /* 11296 */ 'b', 'c', 't', 'r', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 14) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, ADDISdtprelHA, ADDISd...
    return;
    break;
  case 1:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printU16ImmOperand(MI, 0, O); 
    break;
  case 3:
    // B, BCLalways, BDNZ, BDNZ8, BDNZL, BDNZLm, BDNZLp, BDNZm, BDNZp, BDZ, B...
    printBranchOperand(MI, 0, O); 
    break;
  case 4:
    // BA, BDNZA, BDNZAm, BDNZAp, BDNZLA, BDNZLAm, BDNZLAp, BDZA, BDZAm, BDZA...
    printAbsBranchOperand(MI, 0, O); 
    break;
  case 5:
    // BCC, BCCA, BCCCTR, BCCCTR8, BCCCTRL, BCCCTRL8, BCCL, BCCLA, BCCLR, BCC...
    printPredicateOperand(MI, 0, O, "cc"); 
    break;
  case 6:
    // BCTRL8_LDinto_toc
    printMemRegImm(MI, 0, O); 
    return;
    break;
  case 7:
    // BL8_NOP_TLS, BL8_TLS, BL8_TLS_, BL_TLS
    printTLSCall(MI, 0, O); 
    break;
  case 8:
    // DCBA, DCBF, DCBI, DCBST, DCBT, DCBTST, DCBZ, DCBZL, ICBI
    printMemRegReg(MI, 0, O); 
    return;
    break;
  case 9:
    // DSS, MBAR, MTFSB0, MTFSB1, TD, TDI, TW, TWI, gBC, gBCA, gBCCTR, gBCCTR...
    printU5ImmOperand(MI, 0, O); 
    break;
  case 10:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, MTDCR, MTV...
    printOperand(MI, 1, O); 
    break;
  case 11:
    // ICBT
    printU4ImmOperand(MI, 0, O); 
    O << ", "; 
    printMemRegReg(MI, 1, O); 
    return;
    break;
  case 12:
    // MTOCRF, MTOCRF8
    printcrbitm(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 13:
    // MTSR
    printU4ImmOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 14:
    // TABORTDC, TABORTDCI, TABORTWC, TABORTWCI
    printU5ImmOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 15:
    // TBEGIN, TEND, TSR
    printU1ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 5 bits for 20 unique commands.
  switch ((Bits >> 18) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN, B, BA, BCLalways, BDNZ, BDNZ8, BDNZA, BDNZAm, BDNZAp...
    return;
    break;
  case 2:
    // ADJCALLSTACKUP, ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, TCRETURNai, ...
    O << ' '; 
    break;
  case 3:
    // BCC
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // BCCA
    O << 'a'; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printAbsBranchOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // BCCCTR, BCCCTR8
    O << "ctr"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 6:
    // BCCCTRL, BCCCTRL8
    O << "ctrl"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 7:
    // BCCL
    O << 'l'; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 8:
    // BCCLA
    O << "la"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printAbsBranchOperand(MI, 2, O); 
    return;
    break;
  case 9:
    // BCCLR
    O << "lr"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 10:
    // BCCLRL
    O << "lrl"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 11:
    // BCCTR, BCCTR8, BCCTR8n, BCCTRL, BCCTRL8, BCCTRL8n, BCCTRLn, BCCTRn, BC...
    O << ", 0"; 
    return;
    break;
  case 12:
    // BL8_NOP, BL8_NOP_TLS, BLA8_NOP
    O << "\n\tnop"; 
    return;
    break;
  case 13:
    // MFTB8
    O << ", 268"; 
    return;
    break;
  case 14:
    // MFVRSAVE, MFVRSAVEv
    O << ", 256"; 
    return;
    break;
  case 15:
    // QVLPCLSXint
    O << ", 0, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 16:
    // TABORTDC, TABORTWC
    printOperand(MI, 3, O); 
    return;
    break;
  case 17:
    // TABORTDCI, TABORTWCI
    printU5ImmOperand(MI, 3, O); 
    return;
    break;
  case 18:
    // TLBIE
    O << ','; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 19:
    // V_SETALLONES, V_SETALLONESB, V_SETALLONESH
    O << ", -1"; 
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 23) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADJCALLSTACKUP
    printU16ImmOperand(MI, 1, O); 
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, LBARX, LBARXL, LBZX, LBZX8, ...
    printMemRegReg(MI, 1, O); 
    break;
  case 3:
    // BC, BCL, BCLn, BCn
    printBranchOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // CRSET, CRUNSET, MTDCR, V_SET0, V_SET0B, V_SET0H
    printOperand(MI, 0, O); 
    break;
  case 5:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, RLDIMI, RL...
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 6:
    // EVADDIW
    printU5ImmOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // EVLDD, EVLDH, EVLDW, EVLHHESPLAT, EVLHHOSSPLAT, EVLHHOUSPLAT, EVLWHE, ...
    printMemRegImm(MI, 1, O); 
    return;
    break;
  case 8:
    // EVSUBIFW
    printU5ImmOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 9:
    // LA
    printS16ImmOperand(MI, 2, O); 
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 10:
    // LBZU, LBZU8, LDU, LFDU, LFSU, LHAU, LHAU8, LHZU, LHZU8, LWZU, LWZU8, S...
    printMemRegImm(MI, 2, O); 
    return;
    break;
  case 11:
    // LBZUX, LBZUX8, LDUX, LFDUX, LFSUX, LHAUX, LHAUX8, LHZUX, LHZUX8, LWAUX...
    printMemRegReg(MI, 2, O); 
    return;
    break;
  case 12:
    // LI, LI8, LIS, LIS8
    printS16ImmOperand(MI, 1, O); 
    return;
    break;
  case 13:
    // MFOCRF, MFOCRF8
    printcrbitm(MI, 1, O); 
    return;
    break;
  case 14:
    // MFSR
    printU4ImmOperand(MI, 1, O); 
    return;
    break;
  case 15:
    // QVGPCI
    printU12ImmOperand(MI, 1, O); 
    return;
    break;
  case 16:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 28) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    O << ", "; 
    break;
  case 1:
    // ADDME, ADDME8, ADDME8o, ADDMEo, ADDZE, ADDZE8, ADDZE8o, ADDZEo, CNTLZD...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32
    O << ' '; 
    printOperand(MI, 3, O); 
    O << ' '; 
    printOperand(MI, 4, O); 
    return;
    break;
  case 3:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printU5ImmOperand(MI, 0, O); 
    return;
    break;
  case 4:
    // LBARXL, LDARXL, LHARXL, LWARXL
    O << ", 1"; 
    return;
    break;
  case 5:
    // RLDIMI, RLDIMIo
    printU6ImmOperand(MI, 3, O); 
    O << ", "; 
    printU6ImmOperand(MI, 4, O); 
    return;
    break;
  case 6:
    // RLWIMI, RLWIMI8, RLWIMI8o, RLWIMIo
    printU5ImmOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    O << ", "; 
    printU5ImmOperand(MI, 5, O); 
    return;
    break;
  case 7:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 8:
    // VCFSX_0, VCFUX_0, VCTSXS_0, VCTUXS_0
    O << ", 0"; 
    return;
    break;
  case 9:
    // XSMADDADP, XSMADDMDP, XSMSUBADP, XSMSUBMDP, XSNMADDADP, XSNMADDMDP, XS...
    printOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 32) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, ADDIS, ADDIS8, CMPDI, CMPWI, MULLI...
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // CLRLSLDI, CLRLSLDIo, CLRRDI, CLRRDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo...
    printU6ImmOperand(MI, 2, O); 
    break;
  case 4:
    // CLRLSLWI, CLRLSLWIo, CLRRWI, CLRRWIo, EVRLWI, EVSLWI, EVSRWIS, EVSRWIU...
    printU5ImmOperand(MI, 2, O); 
    break;
  case 5:
    // CRSET, CRUNSET, V_SET0, V_SET0B, V_SET0H
    printOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // QVESPLATI, QVESPLATIb, QVESPLATIs, XXSPLTW
    printU2ImmOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // QVFMADD, QVFMADDS, QVFMADDSs, QVFMSUB, QVFMSUBS, QVFMSUBSs, QVFNMADD, ...
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 8:
    // VSHASIGMAD, VSHASIGMAW
    printU1ImmOperand(MI, 2, O); 
    O << ", "; 
    printU4ImmOperand(MI, 3, O); 
    return;
    break;
  case 9:
    // gBC, gBCL
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 10:
    // gBCA, gBCLA
    printAbsBranchOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 36) & 1) {
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, EXTLDI, EXTLDIo, EXTLWI, EXT...
    O << ", "; 
  } else {
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    return;
  }


  // Fragment 6 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 37) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo, INSRDI, INSRDIo...
    printU6ImmOperand(MI, 3, O); 
    return;
    break;
  case 1:
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    printU5ImmOperand(MI, 3, O); 
    break;
  case 2:
    // FMADD, FMADDS, FMADDSo, FMADDo, FMSUB, FMSUBS, FMSUBSo, FMSUBo, FNMADD...
    printOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // QVALIGNI, QVALIGNIb, QVALIGNIs, XXPERMDI, XXSLDWI
    printU2ImmOperand(MI, 3, O); 
    return;
    break;
  case 4:
    // QVFLOGICAL, QVFLOGICALb, QVFLOGICALs
    printU12ImmOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 40) & 1) {
    // RLWINM, RLWINM8, RLWINM8o, RLWINMo, RLWNM, RLWNM8, RLWNM8o, RLWNMo
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    return;
  } else {
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 310 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ '*', '*', 'R', 'O', 'U', 'N', 'D', 'I', 'N', 'G', 32, 'M', 'O', 'D', 'E', '*', '*', 0,
  /* 18 */ '*', '*', 'F', 'R', 'A', 'M', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 36 */ '*', '*', 'B', 'A', 'S', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 53 */ 'f', '1', '0', 0,
  /* 57 */ 'q', '1', '0', 0,
  /* 61 */ 'r', '1', '0', 0,
  /* 65 */ 'v', 's', '1', '0', 0,
  /* 70 */ 'v', '1', '0', 0,
  /* 74 */ 'f', '2', '0', 0,
  /* 78 */ 'q', '2', '0', 0,
  /* 82 */ 'r', '2', '0', 0,
  /* 86 */ 'v', 's', '2', '0', 0,
  /* 91 */ 'v', '2', '0', 0,
  /* 95 */ 'f', '3', '0', 0,
  /* 99 */ 'q', '3', '0', 0,
  /* 103 */ 'r', '3', '0', 0,
  /* 107 */ 'v', 's', '3', '0', 0,
  /* 112 */ 'v', '3', '0', 0,
  /* 116 */ 'v', 's', '4', '0', 0,
  /* 121 */ 'v', 's', '5', '0', 0,
  /* 126 */ 'v', 's', '6', '0', 0,
  /* 131 */ 'f', '0', 0,
  /* 134 */ 'q', '0', 0,
  /* 137 */ 'c', 'r', '0', 0,
  /* 141 */ 'v', 's', '0', 0,
  /* 145 */ 'v', '0', 0,
  /* 148 */ 'f', '1', '1', 0,
  /* 152 */ 'q', '1', '1', 0,
  /* 156 */ 'r', '1', '1', 0,
  /* 160 */ 'v', 's', '1', '1', 0,
  /* 165 */ 'v', '1', '1', 0,
  /* 169 */ 'f', '2', '1', 0,
  /* 173 */ 'q', '2', '1', 0,
  /* 177 */ 'r', '2', '1', 0,
  /* 181 */ 'v', 's', '2', '1', 0,
  /* 186 */ 'v', '2', '1', 0,
  /* 190 */ 'f', '3', '1', 0,
  /* 194 */ 'q', '3', '1', 0,
  /* 198 */ 'r', '3', '1', 0,
  /* 202 */ 'v', 's', '3', '1', 0,
  /* 207 */ 'v', '3', '1', 0,
  /* 211 */ 'v', 's', '4', '1', 0,
  /* 216 */ 'v', 's', '5', '1', 0,
  /* 221 */ 'v', 's', '6', '1', 0,
  /* 226 */ 'f', '1', 0,
  /* 229 */ 'q', '1', 0,
  /* 232 */ 'c', 'r', '1', 0,
  /* 236 */ 'v', 's', '1', 0,
  /* 240 */ 'v', '1', 0,
  /* 243 */ 'f', '1', '2', 0,
  /* 247 */ 'q', '1', '2', 0,
  /* 251 */ 'r', '1', '2', 0,
  /* 255 */ 'v', 's', '1', '2', 0,
  /* 260 */ 'v', '1', '2', 0,
  /* 264 */ 'f', '2', '2', 0,
  /* 268 */ 'q', '2', '2', 0,
  /* 272 */ 'r', '2', '2', 0,
  /* 276 */ 'v', 's', '2', '2', 0,
  /* 281 */ 'v', '2', '2', 0,
  /* 285 */ 'v', 's', '3', '2', 0,
  /* 290 */ 'v', 's', '4', '2', 0,
  /* 295 */ 'v', 's', '5', '2', 0,
  /* 300 */ 'v', 's', '6', '2', 0,
  /* 305 */ 'f', '2', 0,
  /* 308 */ 'q', '2', 0,
  /* 311 */ 'c', 'r', '2', 0,
  /* 315 */ 'v', 's', '2', 0,
  /* 319 */ 'v', '2', 0,
  /* 322 */ 'f', '1', '3', 0,
  /* 326 */ 'q', '1', '3', 0,
  /* 330 */ 'r', '1', '3', 0,
  /* 334 */ 'v', 's', '1', '3', 0,
  /* 339 */ 'v', '1', '3', 0,
  /* 343 */ 'f', '2', '3', 0,
  /* 347 */ 'q', '2', '3', 0,
  /* 351 */ 'r', '2', '3', 0,
  /* 355 */ 'v', 's', '2', '3', 0,
  /* 360 */ 'v', '2', '3', 0,
  /* 364 */ 'v', 's', '3', '3', 0,
  /* 369 */ 'v', 's', '4', '3', 0,
  /* 374 */ 'v', 's', '5', '3', 0,
  /* 379 */ 'v', 's', '6', '3', 0,
  /* 384 */ 'f', '3', 0,
  /* 387 */ 'q', '3', 0,
  /* 390 */ 'c', 'r', '3', 0,
  /* 394 */ 'v', 's', '3', 0,
  /* 398 */ 'v', '3', 0,
  /* 401 */ 'f', '1', '4', 0,
  /* 405 */ 'q', '1', '4', 0,
  /* 409 */ 'r', '1', '4', 0,
  /* 413 */ 'v', 's', '1', '4', 0,
  /* 418 */ 'v', '1', '4', 0,
  /* 422 */ 'f', '2', '4', 0,
  /* 426 */ 'q', '2', '4', 0,
  /* 430 */ 'r', '2', '4', 0,
  /* 434 */ 'v', 's', '2', '4', 0,
  /* 439 */ 'v', '2', '4', 0,
  /* 443 */ 'v', 's', '3', '4', 0,
  /* 448 */ 'v', 's', '4', '4', 0,
  /* 453 */ 'v', 's', '5', '4', 0,
  /* 458 */ 'f', '4', 0,
  /* 461 */ 'q', '4', 0,
  /* 464 */ 'c', 'r', '4', 0,
  /* 468 */ 'v', 's', '4', 0,
  /* 472 */ 'v', '4', 0,
  /* 475 */ 'f', '1', '5', 0,
  /* 479 */ 'q', '1', '5', 0,
  /* 483 */ 'r', '1', '5', 0,
  /* 487 */ 'v', 's', '1', '5', 0,
  /* 492 */ 'v', '1', '5', 0,
  /* 496 */ 'f', '2', '5', 0,
  /* 500 */ 'q', '2', '5', 0,
  /* 504 */ 'r', '2', '5', 0,
  /* 508 */ 'v', 's', '2', '5', 0,
  /* 513 */ 'v', '2', '5', 0,
  /* 517 */ 'v', 's', '3', '5', 0,
  /* 522 */ 'v', 's', '4', '5', 0,
  /* 527 */ 'v', 's', '5', '5', 0,
  /* 532 */ 'f', '5', 0,
  /* 535 */ 'q', '5', 0,
  /* 538 */ 'c', 'r', '5', 0,
  /* 542 */ 'v', 's', '5', 0,
  /* 546 */ 'v', '5', 0,
  /* 549 */ 'f', '1', '6', 0,
  /* 553 */ 'q', '1', '6', 0,
  /* 557 */ 'r', '1', '6', 0,
  /* 561 */ 'v', 's', '1', '6', 0,
  /* 566 */ 'v', '1', '6', 0,
  /* 570 */ 'f', '2', '6', 0,
  /* 574 */ 'q', '2', '6', 0,
  /* 578 */ 'r', '2', '6', 0,
  /* 582 */ 'v', 's', '2', '6', 0,
  /* 587 */ 'v', '2', '6', 0,
  /* 591 */ 'v', 's', '3', '6', 0,
  /* 596 */ 'v', 's', '4', '6', 0,
  /* 601 */ 'v', 's', '5', '6', 0,
  /* 606 */ 'f', '6', 0,
  /* 609 */ 'q', '6', 0,
  /* 612 */ 'c', 'r', '6', 0,
  /* 616 */ 'v', 's', '6', 0,
  /* 620 */ 'v', '6', 0,
  /* 623 */ 'f', '1', '7', 0,
  /* 627 */ 'q', '1', '7', 0,
  /* 631 */ 'r', '1', '7', 0,
  /* 635 */ 'v', 's', '1', '7', 0,
  /* 640 */ 'v', '1', '7', 0,
  /* 644 */ 'f', '2', '7', 0,
  /* 648 */ 'q', '2', '7', 0,
  /* 652 */ 'r', '2', '7', 0,
  /* 656 */ 'v', 's', '2', '7', 0,
  /* 661 */ 'v', '2', '7', 0,
  /* 665 */ 'v', 's', '3', '7', 0,
  /* 670 */ 'v', 's', '4', '7', 0,
  /* 675 */ 'v', 's', '5', '7', 0,
  /* 680 */ 'f', '7', 0,
  /* 683 */ 'q', '7', 0,
  /* 686 */ 'c', 'r', '7', 0,
  /* 690 */ 'v', 's', '7', 0,
  /* 694 */ 'v', '7', 0,
  /* 697 */ 'f', '1', '8', 0,
  /* 701 */ 'q', '1', '8', 0,
  /* 705 */ 'r', '1', '8', 0,
  /* 709 */ 'v', 's', '1', '8', 0,
  /* 714 */ 'v', '1', '8', 0,
  /* 718 */ 'f', '2', '8', 0,
  /* 722 */ 'q', '2', '8', 0,
  /* 726 */ 'r', '2', '8', 0,
  /* 730 */ 'v', 's', '2', '8', 0,
  /* 735 */ 'v', '2', '8', 0,
  /* 739 */ 'v', 's', '3', '8', 0,
  /* 744 */ 'v', 's', '4', '8', 0,
  /* 749 */ 'v', 's', '5', '8', 0,
  /* 754 */ 'f', '8', 0,
  /* 757 */ 'q', '8', 0,
  /* 760 */ 'r', '8', 0,
  /* 763 */ 'v', 's', '8', 0,
  /* 767 */ 'v', '8', 0,
  /* 770 */ 'f', '1', '9', 0,
  /* 774 */ 'q', '1', '9', 0,
  /* 778 */ 'r', '1', '9', 0,
  /* 782 */ 'v', 's', '1', '9', 0,
  /* 787 */ 'v', '1', '9', 0,
  /* 791 */ 'f', '2', '9', 0,
  /* 795 */ 'q', '2', '9', 0,
  /* 799 */ 'r', '2', '9', 0,
  /* 803 */ 'v', 's', '2', '9', 0,
  /* 808 */ 'v', '2', '9', 0,
  /* 812 */ 'v', 's', '3', '9', 0,
  /* 817 */ 'v', 's', '4', '9', 0,
  /* 822 */ 'v', 's', '5', '9', 0,
  /* 827 */ 'f', '9', 0,
  /* 830 */ 'q', '9', 0,
  /* 833 */ 'r', '9', 0,
  /* 836 */ 'v', 's', '9', 0,
  /* 840 */ 'v', '9', 0,
  /* 843 */ 'c', 'a', 0,
  /* 846 */ 'v', 'r', 's', 'a', 'v', 'e', 0,
  /* 853 */ 'l', 'r', 0,
  /* 856 */ 'c', 't', 'r', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    36, 843, 856, 18, 853, 0, 846, 55, 36, 137, 232, 311, 390, 464, 
    538, 612, 686, 856, 131, 226, 305, 384, 458, 532, 606, 680, 754, 827, 
    53, 148, 243, 322, 401, 475, 549, 623, 697, 770, 74, 169, 264, 343, 
    422, 496, 570, 644, 718, 791, 95, 190, 18, 853, 134, 229, 308, 387, 
    461, 535, 609, 683, 757, 830, 57, 152, 247, 326, 405, 479, 553, 627, 
    701, 774, 78, 173, 268, 347, 426, 500, 574, 648, 722, 795, 99, 194, 
    138, 233, 312, 391, 465, 539, 613, 687, 760, 833, 61, 156, 251, 330, 
    409, 483, 557, 631, 705, 778, 82, 177, 272, 351, 430, 504, 578, 652, 
    726, 799, 103, 198, 145, 240, 319, 398, 472, 546, 620, 694, 767, 840, 
    70, 165, 260, 339, 418, 492, 566, 640, 714, 787, 91, 186, 281, 360, 
    439, 513, 587, 661, 735, 808, 112, 207, 285, 364, 443, 517, 591, 665, 
    739, 812, 116, 211, 290, 369, 448, 522, 596, 670, 744, 817, 121, 216, 
    295, 374, 453, 527, 601, 675, 749, 822, 126, 221, 300, 379, 285, 364, 
    443, 517, 591, 665, 739, 812, 116, 211, 290, 369, 448, 522, 596, 670, 
    744, 817, 121, 216, 295, 374, 453, 527, 601, 675, 749, 822, 126, 221, 
    300, 379, 141, 236, 315, 394, 468, 542, 616, 690, 763, 836, 65, 160, 
    255, 334, 413, 487, 561, 635, 709, 782, 86, 181, 276, 355, 434, 508, 
    582, 656, 730, 803, 107, 202, 138, 233, 312, 391, 465, 539, 613, 687, 
    760, 833, 61, 156, 251, 330, 409, 483, 557, 631, 705, 778, 82, 177, 
    272, 351, 430, 504, 578, 652, 726, 799, 103, 198, 55, 245, 551, 54, 
    402, 698, 265, 571, 96, 150, 477, 772, 323, 624, 170, 497, 792, 55, 
    403, 699, 244, 550, 75, 423, 719, 324, 625, 149, 476, 771, 344, 645, 
    191, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case PPC::BCC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 12, CR0, condbrtarget:$dst)
      AsmString = "blt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 14, CR0, condbrtarget:$dst)
      AsmString = "blt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 15, CR0, condbrtarget:$dst)
      AsmString = "blt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 44, CR0, condbrtarget:$dst)
      AsmString = "bgt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 46, CR0, condbrtarget:$dst)
      AsmString = "bgt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 47, CR0, condbrtarget:$dst)
      AsmString = "bgt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 76, CR0, condbrtarget:$dst)
      AsmString = "beq $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 78, CR0, condbrtarget:$dst)
      AsmString = "beq- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 79, CR0, condbrtarget:$dst)
      AsmString = "beq+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 68, CR0, condbrtarget:$dst)
      AsmString = "bne $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 70, CR0, condbrtarget:$dst)
      AsmString = "bne- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 71, CR0, condbrtarget:$dst)
      AsmString = "bne+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 12, CR0, abscondbrtarget:$dst)
      AsmString = "blta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 14, CR0, abscondbrtarget:$dst)
      AsmString = "blta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 15, CR0, abscondbrtarget:$dst)
      AsmString = "blta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqa $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqa- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqa+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnea $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnea- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnea+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCCTR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 12, crrc:$cc)
      AsmString = "bltctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 12, CR0)
      AsmString = "bltctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 14, crrc:$cc)
      AsmString = "bltctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 14, CR0)
      AsmString = "bltctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 15, crrc:$cc)
      AsmString = "bltctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 15, CR0)
      AsmString = "bltctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 44, crrc:$cc)
      AsmString = "bgtctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 44, CR0)
      AsmString = "bgtctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 46, crrc:$cc)
      AsmString = "bgtctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 46, CR0)
      AsmString = "bgtctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 47, crrc:$cc)
      AsmString = "bgtctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 47, CR0)
      AsmString = "bgtctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 76, crrc:$cc)
      AsmString = "beqctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 76, CR0)
      AsmString = "beqctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 78, crrc:$cc)
      AsmString = "beqctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 78, CR0)
      AsmString = "beqctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 79, crrc:$cc)
      AsmString = "beqctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 79, CR0)
      AsmString = "beqctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 68, crrc:$cc)
      AsmString = "bnectr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 68, CR0)
      AsmString = "bnectr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 70, crrc:$cc)
      AsmString = "bnectr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 70, CR0)
      AsmString = "bnectr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 71, crrc:$cc)
      AsmString = "bnectr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 71, CR0)
      AsmString = "bnectr+";
      break;
    }
    return false;
  case PPC::BCCCTRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 12, crrc:$cc)
      AsmString = "bltctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 12, CR0)
      AsmString = "bltctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 14, crrc:$cc)
      AsmString = "bltctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 14, CR0)
      AsmString = "bltctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 15, crrc:$cc)
      AsmString = "bltctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 15, CR0)
      AsmString = "bltctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 44, crrc:$cc)
      AsmString = "bgtctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 44, CR0)
      AsmString = "bgtctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 46, crrc:$cc)
      AsmString = "bgtctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 46, CR0)
      AsmString = "bgtctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 47, crrc:$cc)
      AsmString = "bgtctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 47, CR0)
      AsmString = "bgtctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 76, crrc:$cc)
      AsmString = "beqctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 76, CR0)
      AsmString = "beqctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 78, crrc:$cc)
      AsmString = "beqctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 78, CR0)
      AsmString = "beqctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 79, crrc:$cc)
      AsmString = "beqctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 79, CR0)
      AsmString = "beqctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 68, crrc:$cc)
      AsmString = "bnectrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 68, CR0)
      AsmString = "bnectrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 70, crrc:$cc)
      AsmString = "bnectrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 70, CR0)
      AsmString = "bnectrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 71, crrc:$cc)
      AsmString = "bnectrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 71, CR0)
      AsmString = "bnectrl+";
      break;
    }
    return false;
  case PPC::BCCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 12, CR0, condbrtarget:$dst)
      AsmString = "bltl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 14, CR0, condbrtarget:$dst)
      AsmString = "bltl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 15, CR0, condbrtarget:$dst)
      AsmString = "bltl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 44, CR0, condbrtarget:$dst)
      AsmString = "bgtl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 46, CR0, condbrtarget:$dst)
      AsmString = "bgtl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 47, CR0, condbrtarget:$dst)
      AsmString = "bgtl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 76, CR0, condbrtarget:$dst)
      AsmString = "beql $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 78, CR0, condbrtarget:$dst)
      AsmString = "beql- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 79, CR0, condbrtarget:$dst)
      AsmString = "beql+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 68, CR0, condbrtarget:$dst)
      AsmString = "bnel $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 70, CR0, condbrtarget:$dst)
      AsmString = "bnel- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 71, CR0, condbrtarget:$dst)
      AsmString = "bnel+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 12, CR0, abscondbrtarget:$dst)
      AsmString = "bltla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 14, CR0, abscondbrtarget:$dst)
      AsmString = "bltla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 15, CR0, abscondbrtarget:$dst)
      AsmString = "bltla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnela $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnela- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnela+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCLR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 12, crrc:$cc)
      AsmString = "bltlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 12, CR0)
      AsmString = "bltlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 14, crrc:$cc)
      AsmString = "bltlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 14, CR0)
      AsmString = "bltlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 15, crrc:$cc)
      AsmString = "bltlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 15, CR0)
      AsmString = "bltlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 44, crrc:$cc)
      AsmString = "bgtlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 44, CR0)
      AsmString = "bgtlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 46, crrc:$cc)
      AsmString = "bgtlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 46, CR0)
      AsmString = "bgtlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 47, crrc:$cc)
      AsmString = "bgtlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 47, CR0)
      AsmString = "bgtlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 76, crrc:$cc)
      AsmString = "beqlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 76, CR0)
      AsmString = "beqlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 78, crrc:$cc)
      AsmString = "beqlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 78, CR0)
      AsmString = "beqlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 79, crrc:$cc)
      AsmString = "beqlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 79, CR0)
      AsmString = "beqlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 68, crrc:$cc)
      AsmString = "bnelr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 68, CR0)
      AsmString = "bnelr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 70, crrc:$cc)
      AsmString = "bnelr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 70, CR0)
      AsmString = "bnelr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 71, crrc:$cc)
      AsmString = "bnelr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 71, CR0)
      AsmString = "bnelr+";
      break;
    }
    return false;
  case PPC::BCCLRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 12, crrc:$cc)
      AsmString = "bltlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 12, CR0)
      AsmString = "bltlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 14, crrc:$cc)
      AsmString = "bltlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 14, CR0)
      AsmString = "bltlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 15, crrc:$cc)
      AsmString = "bltlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 15, CR0)
      AsmString = "bltlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 44, crrc:$cc)
      AsmString = "bgtlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 44, CR0)
      AsmString = "bgtlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 46, crrc:$cc)
      AsmString = "bgtlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 46, CR0)
      AsmString = "bgtlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 47, crrc:$cc)
      AsmString = "bgtlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 47, CR0)
      AsmString = "bgtlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 76, crrc:$cc)
      AsmString = "beqlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 76, CR0)
      AsmString = "beqlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 78, crrc:$cc)
      AsmString = "beqlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 78, CR0)
      AsmString = "beqlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 79, crrc:$cc)
      AsmString = "beqlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 79, CR0)
      AsmString = "beqlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 68, crrc:$cc)
      AsmString = "bnelrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 68, CR0)
      AsmString = "bnelrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 70, crrc:$cc)
      AsmString = "bnelrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 70, CR0)
      AsmString = "bnelrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 71, crrc:$cc)
      AsmString = "bnelrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 71, CR0)
      AsmString = "bnelrl+";
      break;
    }
    return false;
  case PPC::CMPD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpd $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPDI CR0, g8rc:$rA, s16imm64:$imm)
      AsmString = "cmpdi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CMPLD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpld $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLDI CR0, g8rc:$rA, u16imm64:$imm)
      AsmString = "cmpldi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmplw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLWI CR0, gprc:$rA, u16imm:$imm)
      AsmString = "cmplwi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmpw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPWI CR0, gprc:$rA, s16imm:$imm)
      AsmString = "cmpwi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CNTLZW:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CNTLZW gprc:$rA, gprc:$rS)
      AsmString = "cntlz $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CNTLZWo:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CNTLZWo gprc:$rA, gprc:$rS)
      AsmString = "cntlz. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CREQV:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CREQV crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crset $\x01";
      break;
    }
    return false;
  case PPC::CRNOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CRNOR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crnot $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CROR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CROR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crmove $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CRXOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CRXOR crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crclr $\x01";
      break;
    }
    return false;
  case PPC::MBAR:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (MBAR 0)
      AsmString = "mbar";
      break;
    }
    return false;
  case PPC::MFDCR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 128) {
      // (MFDCR gprc:$Rx, 128)
      AsmString = "mfbr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 129) {
      // (MFDCR gprc:$Rx, 129)
      AsmString = "mfbr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 130) {
      // (MFDCR gprc:$Rx, 130)
      AsmString = "mfbr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 131) {
      // (MFDCR gprc:$Rx, 131)
      AsmString = "mfbr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 132) {
      // (MFDCR gprc:$Rx, 132)
      AsmString = "mfbr4 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 133) {
      // (MFDCR gprc:$Rx, 133)
      AsmString = "mfbr5 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 134) {
      // (MFDCR gprc:$Rx, 134)
      AsmString = "mfbr6 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 135) {
      // (MFDCR gprc:$Rx, 135)
      AsmString = "mfbr7 $\x01";
      break;
    }
    return false;
  case PPC::MFSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1) {
      // (MFSPR gprc:$Rx, 1)
      AsmString = "mfxer $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4) {
      // (MFSPR gprc:$Rx, 4)
      AsmString = "mfrtcu $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 5) {
      // (MFSPR gprc:$Rx, 5)
      AsmString = "mfrtcl $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 17) {
      // (MFSPR gprc:$Rx, 17)
      AsmString = "mfdscr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 18) {
      // (MFSPR gprc:$Rx, 18)
      AsmString = "mfdsisr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 19) {
      // (MFSPR gprc:$Rx, 19)
      AsmString = "mfdar $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 990) {
      // (MFSPR gprc:$Rx, 990)
      AsmString = "mfsrr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 991) {
      // (MFSPR gprc:$Rx, 991)
      AsmString = "mfsrr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 28) {
      // (MFSPR gprc:$Rx, 28)
      AsmString = "mfcfar $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 29) {
      // (MFSPR gprc:$Rx, 29)
      AsmString = "mfamr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 48) {
      // (MFSPR gprc:$Rx, 48)
      AsmString = "mfpid $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 989) {
      // (MFSPR gprc:$Rx, 989)
      AsmString = "mftblo $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 988) {
      // (MFSPR gprc:$Rx, 988)
      AsmString = "mftbhi $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 536) {
      // (MFSPR gprc:$Rx, 536)
      AsmString = "mfdbatu $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 538) {
      // (MFSPR gprc:$Rx, 538)
      AsmString = "mfdbatu $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 540) {
      // (MFSPR gprc:$Rx, 540)
      AsmString = "mfdbatu $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 542) {
      // (MFSPR gprc:$Rx, 542)
      AsmString = "mfdbatu $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 537) {
      // (MFSPR gprc:$Rx, 537)
      AsmString = "mfdbatl $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 539) {
      // (MFSPR gprc:$Rx, 539)
      AsmString = "mfdbatl $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 541) {
      // (MFSPR gprc:$Rx, 541)
      AsmString = "mfdbatl $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 543) {
      // (MFSPR gprc:$Rx, 543)
      AsmString = "mfdbatl $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 528) {
      // (MFSPR gprc:$Rx, 528)
      AsmString = "mfibatu $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 530) {
      // (MFSPR gprc:$Rx, 530)
      AsmString = "mfibatu $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 532) {
      // (MFSPR gprc:$Rx, 532)
      AsmString = "mfibatu $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 534) {
      // (MFSPR gprc:$Rx, 534)
      AsmString = "mfibatu $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 529) {
      // (MFSPR gprc:$Rx, 529)
      AsmString = "mfibatl $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 531) {
      // (MFSPR gprc:$Rx, 531)
      AsmString = "mfibatl $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 533) {
      // (MFSPR gprc:$Rx, 533)
      AsmString = "mfibatl $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 535) {
      // (MFSPR gprc:$Rx, 535)
      AsmString = "mfibatl $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1018) {
      // (MFSPR gprc:$Rx, 1018)
      AsmString = "mfdccr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1019) {
      // (MFSPR gprc:$Rx, 1019)
      AsmString = "mficcr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 981) {
      // (MFSPR gprc:$Rx, 981)
      AsmString = "mfdear $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 980) {
      // (MFSPR gprc:$Rx, 980)
      AsmString = "mfesr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 512) {
      // (MFSPR gprc:$Rx, 512)
      AsmString = "mfspefscr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 986) {
      // (MFSPR gprc:$Rx, 986)
      AsmString = "mftcr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 280) {
      // (MFSPR gprc:$RT, 280)
      AsmString = "mfasr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 287) {
      // (MFSPR gprc:$RT, 287)
      AsmString = "mfpvr $\x01";
      break;
    }
    return false;
  case PPC::MFTB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 269) {
      // (MFTB gprc:$Rx, 269)
      AsmString = "mftbu $\x01";
      break;
    }
    return false;
  case PPC::MTCRF8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 255 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTCRF8 255, g8rc:$rA)
      AsmString = "mtcr $\x02";
      break;
    }
    return false;
  case PPC::MTDCR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 128) {
      // (MTDCR gprc:$Rx, 128)
      AsmString = "mtbr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 129) {
      // (MTDCR gprc:$Rx, 129)
      AsmString = "mtbr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 130) {
      // (MTDCR gprc:$Rx, 130)
      AsmString = "mtbr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 131) {
      // (MTDCR gprc:$Rx, 131)
      AsmString = "mtbr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 132) {
      // (MTDCR gprc:$Rx, 132)
      AsmString = "mtbr4 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 133) {
      // (MTDCR gprc:$Rx, 133)
      AsmString = "mtbr5 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 134) {
      // (MTDCR gprc:$Rx, 134)
      AsmString = "mtbr6 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 135) {
      // (MTDCR gprc:$Rx, 135)
      AsmString = "mtbr7 $\x01";
      break;
    }
    return false;
  case PPC::MTFSF:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (MTFSF i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTFSFI crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFIo:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTFSFIo crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (MTFSFo i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTMSR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSR gprc:$RS, 0)
      AsmString = "mtmsr $\x01";
      break;
    }
    return false;
  case PPC::MTMSRD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSRD gprc:$RS, 0)
      AsmString = "mtmsrd $\x01";
      break;
    }
    return false;
  case PPC::MTSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1, gprc:$Rx)
      AsmString = "mtxer $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 17 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 17, gprc:$Rx)
      AsmString = "mtdscr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 18 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 18, gprc:$Rx)
      AsmString = "mtdsisr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 19 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 19, gprc:$Rx)
      AsmString = "mtdar $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 990 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 990, gprc:$Rx)
      AsmString = "mtsrr2 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 991 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 991, gprc:$Rx)
      AsmString = "mtsrr3 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 28 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 28, gprc:$Rx)
      AsmString = "mtcfar $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 29 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 29, gprc:$Rx)
      AsmString = "mtamr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 48 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 48, gprc:$Rx)
      AsmString = "mtpid $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 284 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 284, gprc:$Rx)
      AsmString = "mttbl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 285 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 285, gprc:$Rx)
      AsmString = "mttbu $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 989 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 989, gprc:$Rx)
      AsmString = "mttblo $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 988 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 988, gprc:$Rx)
      AsmString = "mttbhi $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 536 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 536, gprc:$Rx)
      AsmString = "mtdbatu 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 538 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 538, gprc:$Rx)
      AsmString = "mtdbatu 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 540 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 540, gprc:$Rx)
      AsmString = "mtdbatu 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 542 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 542, gprc:$Rx)
      AsmString = "mtdbatu 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 537 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 537, gprc:$Rx)
      AsmString = "mtdbatl 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 539 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 539, gprc:$Rx)
      AsmString = "mtdbatl 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 541 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 541, gprc:$Rx)
      AsmString = "mtdbatl 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 543 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 543, gprc:$Rx)
      AsmString = "mtdbatl 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 528 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 528, gprc:$Rx)
      AsmString = "mtibatu 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 530 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 530, gprc:$Rx)
      AsmString = "mtibatu 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 532 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 532, gprc:$Rx)
      AsmString = "mtibatu 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 534 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 534, gprc:$Rx)
      AsmString = "mtibatu 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 529 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 529, gprc:$Rx)
      AsmString = "mtibatl 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 531 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 531, gprc:$Rx)
      AsmString = "mtibatl 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 533 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 533, gprc:$Rx)
      AsmString = "mtibatl 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 535 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 535, gprc:$Rx)
      AsmString = "mtibatl 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1018 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1018, gprc:$Rx)
      AsmString = "mtdccr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1019 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1019, gprc:$Rx)
      AsmString = "mticcr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 981 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 981, gprc:$Rx)
      AsmString = "mtdear $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 980 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 980, gprc:$Rx)
      AsmString = "mtesr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 512 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 512, gprc:$Rx)
      AsmString = "mtspefscr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 986 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 986, gprc:$Rx)
      AsmString = "mttcr $\x02";
      break;
    }
    return false;
  case PPC::NOR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not $\x01, $\x02";
      break;
    }
    return false;
  case PPC::NOR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::QVFLOGICALb:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 0)
      AsmString = "qvfclr $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 1)
      AsmString = "qvfand $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 4) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 4)
      AsmString = "qvfandc $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 5) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 5)
      AsmString = "qvfctfb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 6) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 6)
      AsmString = "qvfxor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 7)
      AsmString = "qvfor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 8) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 8)
      AsmString = "qvfnor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 9) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 9)
      AsmString = "qvfequ $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 10) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 10)
      AsmString = "qvfnot $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 13) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 13)
      AsmString = "qvforc $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 14) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 14)
      AsmString = "qvfnand $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 15)
      AsmString = "qvfset $\x01";
      break;
    }
    return false;
  case PPC::RLDCL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCL g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDCLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCLo g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDICL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLDICLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi. $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi. $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLWINM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWINMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi. $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi. $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWNM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNM gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLWNMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNMo gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::SC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SC 0)
      AsmString = "sc";
      break;
    }
    return false;
  case PPC::SUBF8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBF8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (SYNC 1)
      AsmString = "lwsync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (SYNC 2)
      AsmString = "ptesync";
      break;
    }
    return false;
  case PPC::TD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 16, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 4, g8rc:$rA, g8rc:$rB)
      AsmString = "tdeq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 8, g8rc:$rA, g8rc:$rB)
      AsmString = "tdgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 24, g8rc:$rA, g8rc:$rB)
      AsmString = "tdne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 2, g8rc:$rA, g8rc:$rB)
      AsmString = "tdllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 1, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 31, g8rc:$rA, g8rc:$rB)
      AsmString = "tdu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 16, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 4, g8rc:$rA, s16imm:$imm)
      AsmString = "tdeqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 8, g8rc:$rA, s16imm:$imm)
      AsmString = "tdgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 24, g8rc:$rA, s16imm:$imm)
      AsmString = "tdnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 2, g8rc:$rA, s16imm:$imm)
      AsmString = "tdllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 1, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 31, g8rc:$rA, s16imm:$imm)
      AsmString = "tdui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::TLBIE:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TLBIE R0, gprc:$RB)
      AsmString = "tlbie $\x02";
      break;
    }
    return false;
  case PPC::TLBRE2:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLBRE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbrehi $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (TLBRE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbrelo $\x01, $\x02";
      break;
    }
    return false;
  case PPC::TLBWE2:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLBWE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbwehi $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (TLBWE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbwelo $\x01, $\x02";
      break;
    }
    return false;
  case PPC::TW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 16, gprc:$rA, gprc:$rB)
      AsmString = "twlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 4, gprc:$rA, gprc:$rB)
      AsmString = "tweq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 8, gprc:$rA, gprc:$rB)
      AsmString = "twgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 24, gprc:$rA, gprc:$rB)
      AsmString = "twne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 2, gprc:$rA, gprc:$rB)
      AsmString = "twllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 1, gprc:$rA, gprc:$rB)
      AsmString = "twlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 31, gprc:$rA, gprc:$rB)
      AsmString = "twu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 16, gprc:$rA, s16imm:$imm)
      AsmString = "twlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 4, gprc:$rA, s16imm:$imm)
      AsmString = "tweqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 8, gprc:$rA, s16imm:$imm)
      AsmString = "twgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 24, gprc:$rA, s16imm:$imm)
      AsmString = "twnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 2, gprc:$rA, s16imm:$imm)
      AsmString = "twllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 1, gprc:$rA, s16imm:$imm)
      AsmString = "twlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 31, gprc:$rA, s16imm:$imm)
      AsmString = "twui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::WAIT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT 0)
      AsmString = "wait";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (WAIT 1)
      AsmString = "waitrsv";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (WAIT 2)
      AsmString = "waitimpl";
      break;
    }
    return false;
  case PPC::XORI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).getReg() == PPC::R0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XORI R0, R0, 0)
      AsmString = "xnop";
      break;
    }
    return false;
  case PPC::XVCPSGNDP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNDP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovdp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XVCPSGNSP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNSP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovsp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XXPERMDI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 0)
      AsmString = "xxmrghd $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 3)
      AsmString = "xxmrgld $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::gBC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzf $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfa $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCCTR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 12, crbitrc:$bi, 0)
      AsmString = "btctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 4, crbitrc:$bi, 0)
      AsmString = "bfctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 14, crbitrc:$bi, 0)
      AsmString = "btctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 6, crbitrc:$bi, 0)
      AsmString = "bfctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 15, crbitrc:$bi, 0)
      AsmString = "btctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 7, crbitrc:$bi, 0)
      AsmString = "bfctr+ $\x02";
      break;
    }
    return false;
  case PPC::gBCCTRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 12, crbitrc:$bi, 0)
      AsmString = "btctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 4, crbitrc:$bi, 0)
      AsmString = "bfctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 14, crbitrc:$bi, 0)
      AsmString = "btctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 6, crbitrc:$bi, 0)
      AsmString = "bfctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 15, crbitrc:$bi, 0)
      AsmString = "btctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 7, crbitrc:$bi, 0)
      AsmString = "bfctrl+ $\x02";
      break;
    }
    return false;
  case PPC::gBCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzfl $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfla $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCLR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 12, crbitrc:$bi, 0)
      AsmString = "btlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 4, crbitrc:$bi, 0)
      AsmString = "bflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 14, crbitrc:$bi, 0)
      AsmString = "btlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 6, crbitrc:$bi, 0)
      AsmString = "bflr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 15, crbitrc:$bi, 0)
      AsmString = "btlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 7, crbitrc:$bi, 0)
      AsmString = "bflr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 8, crbitrc:$bi, 0)
      AsmString = "bdnztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 0, crbitrc:$bi, 0)
      AsmString = "bdnzflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 10, crbitrc:$bi, 0)
      AsmString = "bdztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 2, crbitrc:$bi, 0)
      AsmString = "bdzflr $\x02";
      break;
    }
    return false;
  case PPC::gBCLRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 12, crbitrc:$bi, 0)
      AsmString = "btlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 4, crbitrc:$bi, 0)
      AsmString = "bflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 14, crbitrc:$bi, 0)
      AsmString = "btlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 6, crbitrc:$bi, 0)
      AsmString = "bflrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 15, crbitrc:$bi, 0)
      AsmString = "btlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 7, crbitrc:$bi, 0)
      AsmString = "bflrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 8, crbitrc:$bi, 0)
      AsmString = "bdnztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 0, crbitrc:$bi, 0)
      AsmString = "bdnzflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 10, crbitrc:$bi, 0)
      AsmString = "bdztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 2, crbitrc:$bi, 0)
      AsmString = "bdzflrl $\x02";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void PPCInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printBranchOperand(MI, OpIdx, OS);
    break;
  case 1:
    printAbsBranchOperand(MI, OpIdx, OS);
    break;
  case 2:
    printS16ImmOperand(MI, OpIdx, OS);
    break;
  case 3:
    printU16ImmOperand(MI, OpIdx, OS);
    break;
  case 4:
    printU6ImmOperand(MI, OpIdx, OS);
    break;
  case 5:
    printU5ImmOperand(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
