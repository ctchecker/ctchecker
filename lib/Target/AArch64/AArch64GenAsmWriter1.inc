/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void AArch64AppleInstPrinter::printInstruction(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    11339U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    11332U,	// BUNDLE
    11349U,	// LIFETIME_START
    11319U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// FRAME_ALLOC
    17404U,	// ABSv16i8
    67152523U,	// ABSv1i64
    24888U,	// ABSv2i32
    19966U,	// ABSv2i64
    21315U,	// ABSv4i16
    26799U,	// ABSv4i32
    22674U,	// ABSv8i16
    18353U,	// ABSv8i8
    2214636195U,	// ADCSWr
    2214636195U,	// ADCSXr
    2214627638U,	// ADCWr
    2214627638U,	// ADCXr
    2147508161U,	// ADDHNv2i64_v2i32
    2281759664U,	// ADDHNv2i64_v4i32
    2147504675U,	// ADDHNv4i32_v4i16
    2281755865U,	// ADDHNv4i32_v8i16
    2281750749U,	// ADDHNv8i16_v16i8
    2147501741U,	// ADDHNv8i16_v8i8
    2147500917U,	// ADDPv16i8
    2147508312U,	// ADDPv2i32
    2147503438U,	// ADDPv2i64
    36174U,	// ADDPv2i64p
    2147504805U,	// ADDPv4i16
    2147510223U,	// ADDPv4i32
    2147506164U,	// ADDPv8i16
    2147501879U,	// ADDPv8i8
    2214636207U,	// ADDSWri
    0U,	// ADDSWrr
    2214636207U,	// ADDSWrs
    2214636207U,	// ADDSWrx
    2214636207U,	// ADDSXri
    0U,	// ADDSXrr
    2214636207U,	// ADDSXrs
    2214636207U,	// ADDSXrx
    2214636207U,	// ADDSXrx64
    33905U,	// ADDVv16i8v
    37771U,	// ADDVv4i16v
    43410U,	// ADDVv4i32v
    39130U,	// ADDVv8i16v
    34842U,	// ADDVv8i8v
    2214629187U,	// ADDWri
    0U,	// ADDWrr
    2214629187U,	// ADDWrs
    2214629187U,	// ADDWrx
    2214629187U,	// ADDXri
    0U,	// ADDXrr
    2214629187U,	// ADDXrs
    2214629187U,	// ADDXrx
    2214629187U,	// ADDXrx64
    2147500607U,	// ADDv16i8
    2214629187U,	// ADDv1i64
    2147507735U,	// ADDv2i32
    2147502932U,	// ADDv2i64
    2147504392U,	// ADDv4i16
    2147509542U,	// ADDv4i32
    2147505705U,	// ADDv8i16
    2147501493U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    67148829U,	// ADR
    201366443U,	// ADRP
    134267531U,	// AESDrr
    134267561U,	// AESErr
    16913U,	// AESIMCrr
    16925U,	// AESMCrr
    2214636213U,	// ANDSWri
    0U,	// ANDSWrr
    2214636213U,	// ANDSWrs
    2214636213U,	// ANDSXri
    0U,	// ANDSXrr
    2214636213U,	// ANDSXrs
    2214629223U,	// ANDWri
    0U,	// ANDWrr
    2214629223U,	// ANDWrs
    2214629223U,	// ANDXri
    0U,	// ANDXrr
    2214629223U,	// ANDXrs
    2147500674U,	// ANDv16i8
    2147501554U,	// ANDv8i8
    2214632546U,	// ASRVWr
    2214632546U,	// ASRVXr
    65675U,	// B
    2415958751U,	// BFMWri
    2415958751U,	// BFMXri
    0U,	// BICSWrr
    2214636201U,	// BICSWrs
    0U,	// BICSXrr
    2214636201U,	// BICSXrs
    0U,	// BICWrr
    2214627643U,	// BICWrs
    0U,	// BICXrr
    2214627643U,	// BICXrs
    2147500552U,	// BICv16i8
    335601139U,	// BICv2i32
    335597803U,	// BICv4i16
    335602946U,	// BICv4i32
    335599116U,	// BICv8i16
    2147501464U,	// BICv8i8
    2147500723U,	// BIFv16i8
    2147501580U,	// BIFv8i8
    2281751596U,	// BITv16i8
    2281752540U,	// BITv8i8
    72271U,	// BL
    1088577U,	// BLR
    1088537U,	// BR
    88634U,	// BRK
    2281751365U,	// BSLv16i8
    2281752208U,	// BSLv8i8
    109620U,	// Bcc
    402697222U,	// CBNZW
    402697222U,	// CBNZX
    402697207U,	// CBZW
    402697207U,	// CBZX
    2214632213U,	// CCMNWi
    2214632213U,	// CCMNWr
    2214632213U,	// CCMNXi
    2214632213U,	// CCMNXr
    2214632339U,	// CCMPWi
    2214632339U,	// CCMPWr
    2214632339U,	// CCMPXi
    2214632339U,	// CCMPXr
    1092569U,	// CLREX
    67152577U,	// CLSWr
    67152577U,	// CLSXr
    17423U,	// CLSv16i8
    24915U,	// CLSv2i32
    21332U,	// CLSv4i16
    26826U,	// CLSv4i32
    22691U,	// CLSv8i16
    18370U,	// CLSv8i8
    67152897U,	// CLZWr
    67152897U,	// CLZXr
    17619U,	// CLZv16i8
    25181U,	// CLZv2i32
    21476U,	// CLZv4i16
    27247U,	// CLZv4i32
    22875U,	// CLZv8i16
    18547U,	// CLZv8i8
    2147500980U,	// CMEQv16i8
    17332U,	// CMEQv16i8rz
    2214632430U,	// CMEQv1i64
    67148782U,	// CMEQv1i64rz
    2147508469U,	// CMEQv2i32
    24821U,	// CMEQv2i32rz
    2147503555U,	// CMEQv2i64
    19907U,	// CMEQv2i64rz
    2147504906U,	// CMEQv4i16
    21258U,	// CMEQv4i16rz
    2147510380U,	// CMEQv4i32
    26732U,	// CMEQv4i32rz
    2147506265U,	// CMEQv8i16
    22617U,	// CMEQv8i16rz
    2147501936U,	// CMEQv8i8
    18288U,	// CMEQv8i8rz
    2147500693U,	// CMGEv16i8
    17045U,	// CMGEv16i8rz
    2214629236U,	// CMGEv1i64
    67145588U,	// CMGEv1i64rz
    2147507818U,	// CMGEv2i32
    24170U,	// CMGEv2i32rz
    2147502973U,	// CMGEv2i64
    19325U,	// CMGEv2i64rz
    2147504453U,	// CMGEv4i16
    20805U,	// CMGEv4i16rz
    2147509625U,	// CMGEv4i32
    25977U,	// CMGEv4i32rz
    2147505766U,	// CMGEv8i16
    22118U,	// CMGEv8i16rz
    2147501562U,	// CMGEv8i8
    17914U,	// CMGEv8i8rz
    2147501089U,	// CMGTv16i8
    17441U,	// CMGTv16i8rz
    2214636302U,	// CMGTv1i64
    67152654U,	// CMGTv1i64rz
    2147508658U,	// CMGTv2i32
    25010U,	// CMGTv2i32rz
    2147503728U,	// CMGTv2i64
    20080U,	// CMGTv2i64rz
    2147504996U,	// CMGTv4i16
    21348U,	// CMGTv4i16rz
    2147510569U,	// CMGTv4i32
    26921U,	// CMGTv4i32rz
    2147506355U,	// CMGTv8i16
    22707U,	// CMGTv8i16rz
    2147502034U,	// CMGTv8i8
    18386U,	// CMGTv8i8rz
    2147500743U,	// CMHIv16i8
    2214631964U,	// CMHIv1i64
    2147507973U,	// CMHIv2i32
    2147503054U,	// CMHIv2i64
    2147504532U,	// CMHIv4i16
    2147509792U,	// CMHIv4i32
    2147505845U,	// CMHIv8i16
    2147501598U,	// CMHIv8i8
    2147501061U,	// CMHSv16i8
    2214636219U,	// CMHSv1i64
    2147508554U,	// CMHSv2i32
    2147503632U,	// CMHSv2i64
    2147504971U,	// CMHSv4i16
    2147510465U,	// CMHSv4i32
    2147506330U,	// CMHSv8i16
    2147502009U,	// CMHSv8i8
    17055U,	// CMLEv16i8rz
    67145595U,	// CMLEv1i64rz
    24180U,	// CMLEv2i32rz
    19335U,	// CMLEv2i64rz
    20814U,	// CMLEv4i16rz
    25987U,	// CMLEv4i32rz
    22127U,	// CMLEv8i16rz
    17923U,	// CMLEv8i8rz
    17461U,	// CMLTv16i8rz
    67152672U,	// CMLTv1i64rz
    25020U,	// CMLTv2i32rz
    20090U,	// CMLTv2i64rz
    21357U,	// CMLTv4i16rz
    26931U,	// CMLTv4i32rz
    22716U,	// CMLTv8i16rz
    18404U,	// CMLTv8i8rz
    2147501137U,	// CMTSTv16i8
    2214636333U,	// CMTSTv1i64
    2147508687U,	// CMTSTv2i32
    2147503757U,	// CMTSTv2i64
    2147505014U,	// CMTSTv4i16
    2147510598U,	// CMTSTv4i32
    2147506373U,	// CMTSTv8i16
    2147502077U,	// CMTSTv8i8
    17471U,	// CNTv16i8
    18413U,	// CNTv8i8
    2147527561U,	// CPYi16
    2147527561U,	// CPYi32
    2147527561U,	// CPYi64
    2147527561U,	// CPYi8
    2214625438U,	// CRC32Brr
    2214627451U,	// CRC32CBrr
    2214631789U,	// CRC32CHrr
    2214636438U,	// CRC32CWrr
    2214636496U,	// CRC32CXrr
    2214629425U,	// CRC32Hrr
    2214636430U,	// CRC32Wrr
    2214636477U,	// CRC32Xrr
    2214632052U,	// CSELWr
    2214632052U,	// CSELXr
    2214627653U,	// CSINCWr
    2214627653U,	// CSINCXr
    2214636417U,	// CSINVWr
    2214636417U,	// CSINVXr
    2214629308U,	// CSNEGWr
    2214629308U,	// CSNEGXr
    81926U,	// DCPS1
    81975U,	// DCPS2
    81992U,	// DCPS3
    116868U,	// DMB
    11364U,	// DRPS
    116973U,	// DSB
    67126165U,	// DUPv16i8gpr
    2147500949U,	// DUPv16i8lane
    67133646U,	// DUPv2i32gpr
    2147508430U,	// DUPv2i32lane
    67128752U,	// DUPv2i64gpr
    2147503536U,	// DUPv2i64lane
    67130094U,	// DUPv4i16gpr
    2147504878U,	// DUPv4i16lane
    67135557U,	// DUPv4i32gpr
    2147510341U,	// DUPv4i32lane
    67131453U,	// DUPv8i16gpr
    2147506237U,	// DUPv8i16lane
    67127124U,	// DUPv8i8gpr
    2147501908U,	// DUPv8i8lane
    0U,	// EONWrr
    2214632219U,	// EONWrs
    0U,	// EONXrr
    2214632219U,	// EONXrs
    2214632531U,	// EORWri
    0U,	// EORWrr
    2214632531U,	// EORWrs
    2214632531U,	// EORXri
    0U,	// EORXrr
    2214632531U,	// EORXrs
    2147501032U,	// EORv16i8
    2147501983U,	// EORv8i8
    11369U,	// ERET
    2214632578U,	// EXTRWrri
    2214632578U,	// EXTRXrri
    2147501148U,	// EXTv16i8
    2147502087U,	// EXTv8i8
    0U,	// F128CSEL
    2214629180U,	// FABD32
    2214629180U,	// FABD64
    2147507707U,	// FABDv2f32
    2147502922U,	// FABDv2f64
    2147509514U,	// FABDv4f32
    67152522U,	// FABSDr
    67152522U,	// FABSSr
    24887U,	// FABSv2f32
    19965U,	// FABSv2f64
    26798U,	// FABSv4f32
    2214629228U,	// FACGE32
    2214629228U,	// FACGE64
    2147507807U,	// FACGEv2f32
    2147502962U,	// FACGEv2f64
    2147509614U,	// FACGEv4f32
    2214636294U,	// FACGT32
    2214636294U,	// FACGT64
    2147508647U,	// FACGTv2f32
    2147503717U,	// FACGTv2f64
    2147510558U,	// FACGTv4f32
    2214629186U,	// FADDDrr
    2147508311U,	// FADDPv2f32
    2147503437U,	// FADDPv2f64
    41047U,	// FADDPv2i32p
    36173U,	// FADDPv2i64p
    2147510222U,	// FADDPv4f32
    2214629186U,	// FADDSrr
    2147507734U,	// FADDv2f32
    2147502931U,	// FADDv2f64
    2147509541U,	// FADDv4f32
    2214632338U,	// FCCMPDrr
    2214629257U,	// FCCMPEDrr
    2214629257U,	// FCCMPESrr
    2214632338U,	// FCCMPSrr
    2214632429U,	// FCMEQ32
    2214632429U,	// FCMEQ64
    67148781U,	// FCMEQv1i32rz
    67148781U,	// FCMEQv1i64rz
    2147508468U,	// FCMEQv2f32
    2147503554U,	// FCMEQv2f64
    24820U,	// FCMEQv2i32rz
    19906U,	// FCMEQv2i64rz
    2147510379U,	// FCMEQv4f32
    26731U,	// FCMEQv4i32rz
    2214629235U,	// FCMGE32
    2214629235U,	// FCMGE64
    67145587U,	// FCMGEv1i32rz
    67145587U,	// FCMGEv1i64rz
    2147507817U,	// FCMGEv2f32
    2147502972U,	// FCMGEv2f64
    24169U,	// FCMGEv2i32rz
    19324U,	// FCMGEv2i64rz
    2147509624U,	// FCMGEv4f32
    25976U,	// FCMGEv4i32rz
    2214636301U,	// FCMGT32
    2214636301U,	// FCMGT64
    67152653U,	// FCMGTv1i32rz
    67152653U,	// FCMGTv1i64rz
    2147508657U,	// FCMGTv2f32
    2147503727U,	// FCMGTv2f64
    25009U,	// FCMGTv2i32rz
    20079U,	// FCMGTv2i64rz
    2147510568U,	// FCMGTv4f32
    26920U,	// FCMGTv4i32rz
    67145594U,	// FCMLEv1i32rz
    67145594U,	// FCMLEv1i64rz
    24179U,	// FCMLEv2i32rz
    19334U,	// FCMLEv2i64rz
    25986U,	// FCMLEv4i32rz
    67152671U,	// FCMLTv1i32rz
    67152671U,	// FCMLTv1i64rz
    25019U,	// FCMLTv2i32rz
    20089U,	// FCMLTv2i64rz
    26930U,	// FCMLTv4i32rz
    2136985U,	// FCMPDri
    67148697U,	// FCMPDrr
    2133905U,	// FCMPEDri
    67145617U,	// FCMPEDrr
    2133905U,	// FCMPESri
    67145617U,	// FCMPESrr
    2136985U,	// FCMPSri
    67148697U,	// FCMPSrr
    2214632051U,	// FCSELDrrr
    2214632051U,	// FCSELSrrr
    67152514U,	// FCVTASUWDr
    67152514U,	// FCVTASUWSr
    67152514U,	// FCVTASUXDr
    67152514U,	// FCVTASUXSr
    67152514U,	// FCVTASv1i32
    67152514U,	// FCVTASv1i64
    24876U,	// FCVTASv2f32
    19954U,	// FCVTASv2f64
    26787U,	// FCVTASv4f32
    67152698U,	// FCVTAUUWDr
    67152698U,	// FCVTAUUWSr
    67152698U,	// FCVTAUUXDr
    67152698U,	// FCVTAUUXSr
    67152698U,	// FCVTAUv1i32
    67152698U,	// FCVTAUv1i64
    25049U,	// FCVTAUv2f32
    20119U,	// FCVTAUv2f64
    26960U,	// FCVTAUv4f32
    67152692U,	// FCVTDHr
    67152692U,	// FCVTDSr
    67152692U,	// FCVTHDr
    67152692U,	// FCVTHSr
    472931018U,	// FCVTLv2i32
    2151701194U,	// FCVTLv4i16
    540033054U,	// FCVTLv4i32
    4210718U,	// FCVTLv8i16
    67152582U,	// FCVTMSUWDr
    67152582U,	// FCVTMSUWSr
    67152582U,	// FCVTMSUXDr
    67152582U,	// FCVTMSUXSr
    67152582U,	// FCVTMSv1i32
    67152582U,	// FCVTMSv1i64
    24932U,	// FCVTMSv2f32
    20002U,	// FCVTMSv2f64
    26843U,	// FCVTMSv4f32
    67152714U,	// FCVTMUUWDr
    67152714U,	// FCVTMUUWSr
    67152714U,	// FCVTMUUXDr
    67152714U,	// FCVTMUUXSr
    67152714U,	// FCVTMUv1i32
    67152714U,	// FCVTMUv1i64
    25071U,	// FCVTMUv2f32
    20141U,	// FCVTMUv2f64
    26982U,	// FCVTMUv4f32
    67152590U,	// FCVTNSUWDr
    67152590U,	// FCVTNSUWSr
    67152590U,	// FCVTNSUXDr
    67152590U,	// FCVTNSUXSr
    67152590U,	// FCVTNSv1i32
    67152590U,	// FCVTNSv1i64
    24943U,	// FCVTNSv2f32
    20013U,	// FCVTNSv2f64
    26854U,	// FCVTNSv4f32
    67152722U,	// FCVTNUUWDr
    67152722U,	// FCVTNUUWSr
    67152722U,	// FCVTNUUXDr
    67152722U,	// FCVTNUUXSr
    67152722U,	// FCVTNUv1i32
    67152722U,	// FCVTNUv1i64
    25082U,	// FCVTNUv2f32
    20152U,	// FCVTNUv2f64
    26993U,	// FCVTNUv4f32
    5266255U,	// FCVTNv2i32
    6314831U,	// FCVTNv4i16
    2285944870U,	// FCVTNv4i32
    7389222U,	// FCVTNv8i16
    67152606U,	// FCVTPSUWDr
    67152606U,	// FCVTPSUWSr
    67152606U,	// FCVTPSUXDr
    67152606U,	// FCVTPSUXSr
    67152606U,	// FCVTPSv1i32
    67152606U,	// FCVTPSv1i64
    24965U,	// FCVTPSv2f32
    20035U,	// FCVTPSv2f64
    26876U,	// FCVTPSv4f32
    67152730U,	// FCVTPUUWDr
    67152730U,	// FCVTPUUWSr
    67152730U,	// FCVTPUUXDr
    67152730U,	// FCVTPUUXSr
    67152730U,	// FCVTPUv1i32
    67152730U,	// FCVTPUv1i64
    25093U,	// FCVTPUv2f32
    20163U,	// FCVTPUv2f64
    27004U,	// FCVTPUv4f32
    67152692U,	// FCVTSDr
    67152692U,	// FCVTSHr
    67148677U,	// FCVTXNv1i64
    5266309U,	// FCVTXNv2f32
    2285944878U,	// FCVTXNv4f32
    2214636281U,	// FCVTZSSWDri
    2214636281U,	// FCVTZSSWSri
    2214636281U,	// FCVTZSSXDri
    2214636281U,	// FCVTZSSXSri
    67152633U,	// FCVTZSUWDr
    67152633U,	// FCVTZSUWSr
    67152633U,	// FCVTZSUXDr
    67152633U,	// FCVTZSUXSr
    2214636281U,	// FCVTZS_IntSWDri
    2214636281U,	// FCVTZS_IntSWSri
    2214636281U,	// FCVTZS_IntSXDri
    2214636281U,	// FCVTZS_IntSXSri
    67152633U,	// FCVTZS_IntUWDr
    67152633U,	// FCVTZS_IntUWSr
    67152633U,	// FCVTZS_IntUXDr
    67152633U,	// FCVTZS_IntUXSr
    24988U,	// FCVTZS_Intv2f32
    20058U,	// FCVTZS_Intv2f64
    26899U,	// FCVTZS_Intv4f32
    2214636281U,	// FCVTZSd
    2214636281U,	// FCVTZSs
    67152633U,	// FCVTZSv1i32
    67152633U,	// FCVTZSv1i64
    24988U,	// FCVTZSv2f32
    20058U,	// FCVTZSv2f64
    2147508636U,	// FCVTZSv2i32_shift
    2147503706U,	// FCVTZSv2i64_shift
    26899U,	// FCVTZSv4f32
    2147510547U,	// FCVTZSv4i32_shift
    2214636386U,	// FCVTZUSWDri
    2214636386U,	// FCVTZUSWSri
    2214636386U,	// FCVTZUSXDri
    2214636386U,	// FCVTZUSXSri
    67152738U,	// FCVTZUUWDr
    67152738U,	// FCVTZUUWSr
    67152738U,	// FCVTZUUXDr
    67152738U,	// FCVTZUUXSr
    2214636386U,	// FCVTZU_IntSWDri
    2214636386U,	// FCVTZU_IntSWSri
    2214636386U,	// FCVTZU_IntSXDri
    2214636386U,	// FCVTZU_IntSXSri
    67152738U,	// FCVTZU_IntUWDr
    67152738U,	// FCVTZU_IntUWSr
    67152738U,	// FCVTZU_IntUXDr
    67152738U,	// FCVTZU_IntUXSr
    25104U,	// FCVTZU_Intv2f32
    20174U,	// FCVTZU_Intv2f64
    27015U,	// FCVTZU_Intv4f32
    2214636386U,	// FCVTZUd
    2214636386U,	// FCVTZUs
    67152738U,	// FCVTZUv1i32
    67152738U,	// FCVTZUv1i64
    25104U,	// FCVTZUv2f32
    20174U,	// FCVTZUv2f64
    2147508752U,	// FCVTZUv2i32_shift
    2147503822U,	// FCVTZUv2i64_shift
    27015U,	// FCVTZUv4f32
    2147510663U,	// FCVTZUv4i32_shift
    2214636399U,	// FDIVDrr
    2214636399U,	// FDIVSrr
    2147508763U,	// FDIVv2f32
    2147503833U,	// FDIVv2f64
    2147510683U,	// FDIVv4f32
    2214629192U,	// FMADDDrrr
    2214629192U,	// FMADDSrrr
    2214636485U,	// FMAXDrr
    2214632184U,	// FMAXNMDrr
    2147508377U,	// FMAXNMPv2f32
    2147503503U,	// FMAXNMPv2f64
    41113U,	// FMAXNMPv2i32p
    36239U,	// FMAXNMPv2i64p
    2147510288U,	// FMAXNMPv4f32
    2214632184U,	// FMAXNMSrr
    43462U,	// FMAXNMVv4i32v
    2147508127U,	// FMAXNMv2f32
    2147503395U,	// FMAXNMv2f64
    2147510152U,	// FMAXNMv4f32
    2147508438U,	// FMAXPv2f32
    2147503544U,	// FMAXPv2f64
    41174U,	// FMAXPv2i32p
    36280U,	// FMAXPv2i64p
    2147510349U,	// FMAXPv4f32
    2214636485U,	// FMAXSrr
    43513U,	// FMAXVv4i32v
    2147508781U,	// FMAXv2f32
    2147503891U,	// FMAXv2f64
    2147510847U,	// FMAXv4f32
    2214632207U,	// FMINDrr
    2214632176U,	// FMINNMDrr
    2147508365U,	// FMINNMPv2f32
    2147503491U,	// FMINNMPv2f64
    41101U,	// FMINNMPv2i32p
    36227U,	// FMINNMPv2i64p
    2147510276U,	// FMINNMPv4f32
    2214632176U,	// FMINNMSrr
    43450U,	// FMINNMVv4i32v
    2147508116U,	// FMINNMv2f32
    2147503384U,	// FMINNMv2f64
    2147510141U,	// FMINNMv4f32
    2147508389U,	// FMINPv2f32
    2147503515U,	// FMINPv2f64
    41125U,	// FMINPv2i32p
    36251U,	// FMINPv2i64p
    2147510300U,	// FMINPv4f32
    2214632207U,	// FMINSrr
    43474U,	// FMINVv4i32v
    2147508171U,	// FMINv2f32
    2147503417U,	// FMINv2f64
    2147510174U,	// FMINv4f32
    2416057518U,	// FMLAv1i32_indexed
    2416052566U,	// FMLAv1i64_indexed
    2281758088U,	// FMLAv2f32
    2281753331U,	// FMLAv2f64
    2281758088U,	// FMLAv2i32_indexed
    2281753331U,	// FMLAv2i64_indexed
    2281759885U,	// FMLAv4f32
    2281759885U,	// FMLAv4i32_indexed
    2416057614U,	// FMLSv1i32_indexed
    2416052582U,	// FMLSv1i64_indexed
    2281759067U,	// FMLSv2f32
    2281754137U,	// FMLSv2f64
    2281759067U,	// FMLSv2i32_indexed
    2281754137U,	// FMLSv2i64_indexed
    2281760978U,	// FMLSv4f32
    2281760978U,	// FMLSv4i32_indexed
    0U,	// FMOVD0
    2147518837U,	// FMOVDXHighr
    67152776U,	// FMOVDXr
    604023688U,	// FMOVDi
    67152776U,	// FMOVDr
    0U,	// FMOVS0
    67152776U,	// FMOVSWr
    604023688U,	// FMOVSi
    67152776U,	// FMOVSr
    67152776U,	// FMOVWSr
    75516277U,	// FMOVXDHighr
    67152776U,	// FMOVXDr
    604004900U,	// FMOVv2f32_ns
    603999970U,	// FMOVv2f64_ns
    604006896U,	// FMOVv4f32_ns
    2214627604U,	// FMSUBDrrr
    2214627604U,	// FMSUBSrrr
    2214632145U,	// FMULDrr
    2214632145U,	// FMULSrr
    2214636512U,	// FMULX32
    2214636512U,	// FMULX64
    2214632749U,	// FMULXv1i32_indexed
    2214627717U,	// FMULXv1i64_indexed
    2147508808U,	// FMULXv2f32
    2147503900U,	// FMULXv2f64
    2147508808U,	// FMULXv2i32_indexed
    2147503900U,	// FMULXv2i64_indexed
    2147510874U,	// FMULXv4f32
    2147510874U,	// FMULXv4i32_indexed
    2214632710U,	// FMULv1i32_indexed
    2214627678U,	// FMULv1i64_indexed
    2147508107U,	// FMULv2f32
    2147503375U,	// FMULv2f64
    2147508107U,	// FMULv2i32_indexed
    2147503375U,	// FMULv2i64_indexed
    2147510122U,	// FMULv4f32
    2147510122U,	// FMULv4i32_indexed
    67145647U,	// FNEGDr
    67145647U,	// FNEGSr
    24255U,	// FNEGv2f32
    19387U,	// FNEGv2f64
    26062U,	// FNEGv4f32
    2214629199U,	// FNMADDDrrr
    2214629199U,	// FNMADDSrrr
    2214627611U,	// FNMSUBDrrr
    2214627611U,	// FNMSUBSrrr
    2214632151U,	// FNMULDrr
    2214632151U,	// FNMULSrr
    67145601U,	// FRECPEv1i32
    67145601U,	// FRECPEv1i64
    24189U,	// FRECPEv2f32
    19344U,	// FRECPEv2f64
    25996U,	// FRECPEv4f32
    2214636246U,	// FRECPS32
    2214636246U,	// FRECPS64
    2147508602U,	// FRECPSv2f32
    2147503672U,	// FRECPSv2f64
    2147510513U,	// FRECPSv4f32
    67152871U,	// FRECPXv1i32
    67152871U,	// FRECPXv1i64
    67141759U,	// FRINTADr
    67141759U,	// FRINTASr
    23991U,	// FRINTAv2f32
    19234U,	// FRINTAv2f64
    25788U,	// FRINTAv4f32
    67148332U,	// FRINTIDr
    67148332U,	// FRINTISr
    24359U,	// FRINTIv2f32
    19431U,	// FRINTIv2f64
    26178U,	// FRINTIv4f32
    67148544U,	// FRINTMDr
    67148544U,	// FRINTMSr
    24490U,	// FRINTMv2f32
    19758U,	// FRINTMv2f64
    26515U,	// FRINTMv4f32
    67148615U,	// FRINTNDr
    67148615U,	// FRINTNSr
    24596U,	// FRINTNv2f32
    19778U,	// FRINTNv2f64
    26553U,	// FRINTNv4f32
    67148721U,	// FRINTPDr
    67148721U,	// FRINTPSr
    24771U,	// FRINTPv2f32
    19877U,	// FRINTPv2f64
    26682U,	// FRINTPv4f32
    67152879U,	// FRINTXDr
    67152879U,	// FRINTXSr
    25170U,	// FRINTXv2f32
    20262U,	// FRINTXv2f64
    27236U,	// FRINTXv4f32
    67152914U,	// FRINTZDr
    67152914U,	// FRINTZSr
    25189U,	// FRINTZv2f32
    20273U,	// FRINTZv2f64
    27255U,	// FRINTZv4f32
    67145624U,	// FRSQRTEv1i32
    67145624U,	// FRSQRTEv1i64
    24211U,	// FRSQRTEv2f32
    19355U,	// FRSQRTEv2f64
    26018U,	// FRSQRTEv4f32
    2214636267U,	// FRSQRTS32
    2214636267U,	// FRSQRTS64
    2147508624U,	// FRSQRTSv2f32
    2147503694U,	// FRSQRTSv2f64
    2147510535U,	// FRSQRTSv4f32
    67152678U,	// FSQRTDr
    67152678U,	// FSQRTSr
    25029U,	// FSQRTv2f32
    20099U,	// FSQRTv2f64
    26940U,	// FSQRTv4f32
    2214627598U,	// FSUBDrr
    2214627598U,	// FSUBSrr
    2147507650U,	// FSUBv2f32
    2147502893U,	// FSUBv2f64
    2147509447U,	// FSUBv4f32
    93230U,	// HINT
    92954U,	// HLT
    84300U,	// HVC
    679530515U,	// INSvi16gpr
    746639379U,	// INSvi16lane
    679533846U,	// INSvi32gpr
    746642710U,	// INSvi32lane
    679528814U,	// INSvi64gpr
    746637678U,	// INSvi64lane
    679526535U,	// INSvi8gpr
    746635399U,	// INSvi8lane
    116978U,	// ISB
    147457U,	// LD1Fourv16b
    9601025U,	// LD1Fourv16b_POST
    180225U,	// LD1Fourv1d
    10682369U,	// LD1Fourv1d_POST
    212993U,	// LD1Fourv2d
    9666561U,	// LD1Fourv2d_POST
    245761U,	// LD1Fourv2s
    10747905U,	// LD1Fourv2s_POST
    278529U,	// LD1Fourv4h
    10780673U,	// LD1Fourv4h_POST
    311297U,	// LD1Fourv4s
    9764865U,	// LD1Fourv4s_POST
    344065U,	// LD1Fourv8b
    10846209U,	// LD1Fourv8b_POST
    376833U,	// LD1Fourv8h
    9830401U,	// LD1Fourv8h_POST
    147457U,	// LD1Onev16b
    11698177U,	// LD1Onev16b_POST
    180225U,	// LD1Onev1d
    12779521U,	// LD1Onev1d_POST
    212993U,	// LD1Onev2d
    11763713U,	// LD1Onev2d_POST
    245761U,	// LD1Onev2s
    12845057U,	// LD1Onev2s_POST
    278529U,	// LD1Onev4h
    12877825U,	// LD1Onev4h_POST
    311297U,	// LD1Onev4s
    11862017U,	// LD1Onev4s_POST
    344065U,	// LD1Onev8b
    12943361U,	// LD1Onev8b_POST
    376833U,	// LD1Onev8h
    11927553U,	// LD1Onev8h_POST
    154612U,	// LD1Rv16b
    13802484U,	// LD1Rv16b_POST
    187380U,	// LD1Rv1d
    12786676U,	// LD1Rv1d_POST
    220148U,	// LD1Rv2d
    12819444U,	// LD1Rv2d_POST
    252916U,	// LD1Rv2s
    14949364U,	// LD1Rv2s_POST
    285684U,	// LD1Rv4h
    16030708U,	// LD1Rv4h_POST
    318452U,	// LD1Rv4s
    15014900U,	// LD1Rv4s_POST
    351220U,	// LD1Rv8b
    13999092U,	// LD1Rv8b_POST
    383988U,	// LD1Rv8h
    16129012U,	// LD1Rv8h_POST
    147457U,	// LD1Threev16b
    16941057U,	// LD1Threev16b_POST
    180225U,	// LD1Threev1d
    18022401U,	// LD1Threev1d_POST
    212993U,	// LD1Threev2d
    17006593U,	// LD1Threev2d_POST
    245761U,	// LD1Threev2s
    18087937U,	// LD1Threev2s_POST
    278529U,	// LD1Threev4h
    18120705U,	// LD1Threev4h_POST
    311297U,	// LD1Threev4s
    17104897U,	// LD1Threev4s_POST
    344065U,	// LD1Threev8b
    18186241U,	// LD1Threev8b_POST
    376833U,	// LD1Threev8h
    17170433U,	// LD1Threev8h_POST
    147457U,	// LD1Twov16b
    10649601U,	// LD1Twov16b_POST
    180225U,	// LD1Twov1d
    11730945U,	// LD1Twov1d_POST
    212993U,	// LD1Twov2d
    10715137U,	// LD1Twov2d_POST
    245761U,	// LD1Twov2s
    11796481U,	// LD1Twov2s_POST
    278529U,	// LD1Twov4h
    11829249U,	// LD1Twov4h_POST
    311297U,	// LD1Twov4s
    10813441U,	// LD1Twov4s_POST
    344065U,	// LD1Twov8b
    11894785U,	// LD1Twov8b_POST
    376833U,	// LD1Twov8h
    10878977U,	// LD1Twov8h_POST
    19283969U,	// LD1i16
    20348929U,	// LD1i16_POST
    19316737U,	// LD1i32
    21430273U,	// LD1i32_POST
    19349505U,	// LD1i64
    22511617U,	// LD1i64_POST
    19382273U,	// LD1i8
    23592961U,	// LD1i8_POST
    154618U,	// LD2Rv16b
    15899642U,	// LD2Rv16b_POST
    187386U,	// LD2Rv1d
    11738106U,	// LD2Rv1d_POST
    220154U,	// LD2Rv2d
    11770874U,	// LD2Rv2d_POST
    252922U,	// LD2Rv2s
    12852218U,	// LD2Rv2s_POST
    285690U,	// LD2Rv4h
    14982138U,	// LD2Rv4h_POST
    318458U,	// LD2Rv4s
    12917754U,	// LD2Rv4s_POST
    351226U,	// LD2Rv8b
    16096250U,	// LD2Rv8b_POST
    383994U,	// LD2Rv8h
    15080442U,	// LD2Rv8h_POST
    147481U,	// LD2Twov16b
    10649625U,	// LD2Twov16b_POST
    213017U,	// LD2Twov2d
    10715161U,	// LD2Twov2d_POST
    245785U,	// LD2Twov2s
    11796505U,	// LD2Twov2s_POST
    278553U,	// LD2Twov4h
    11829273U,	// LD2Twov4h_POST
    311321U,	// LD2Twov4s
    10813465U,	// LD2Twov4s_POST
    344089U,	// LD2Twov8b
    11894809U,	// LD2Twov8b_POST
    376857U,	// LD2Twov8h
    10879001U,	// LD2Twov8h_POST
    19283993U,	// LD2i16
    21397529U,	// LD2i16_POST
    19316761U,	// LD2i32
    22478873U,	// LD2i32_POST
    19349529U,	// LD2i64
    24608793U,	// LD2i64_POST
    19382297U,	// LD2i8
    20447257U,	// LD2i8_POST
    154624U,	// LD3Rv16b
    25336832U,	// LD3Rv16b_POST
    187392U,	// LD3Rv1d
    18029568U,	// LD3Rv1d_POST
    220160U,	// LD3Rv2d
    18062336U,	// LD3Rv2d_POST
    252928U,	// LD3Rv2s
    26483712U,	// LD3Rv2s_POST
    285696U,	// LD3Rv4h
    27565056U,	// LD3Rv4h_POST
    318464U,	// LD3Rv4s
    26549248U,	// LD3Rv4s_POST
    351232U,	// LD3Rv8b
    25533440U,	// LD3Rv8b_POST
    384000U,	// LD3Rv8h
    27663360U,	// LD3Rv8h_POST
    147523U,	// LD3Threev16b
    16941123U,	// LD3Threev16b_POST
    213059U,	// LD3Threev2d
    17006659U,	// LD3Threev2d_POST
    245827U,	// LD3Threev2s
    18088003U,	// LD3Threev2s_POST
    278595U,	// LD3Threev4h
    18120771U,	// LD3Threev4h_POST
    311363U,	// LD3Threev4s
    17104963U,	// LD3Threev4s_POST
    344131U,	// LD3Threev8b
    18186307U,	// LD3Threev8b_POST
    376899U,	// LD3Threev8h
    17170499U,	// LD3Threev8h_POST
    19284035U,	// LD3i16
    28737603U,	// LD3i16_POST
    19316803U,	// LD3i32
    29818947U,	// LD3i32_POST
    19349571U,	// LD3i64
    30900291U,	// LD3i64_POST
    19382339U,	// LD3i8
    31981635U,	// LD3i8_POST
    147540U,	// LD4Fourv16b
    9601108U,	// LD4Fourv16b_POST
    213076U,	// LD4Fourv2d
    9666644U,	// LD4Fourv2d_POST
    245844U,	// LD4Fourv2s
    10747988U,	// LD4Fourv2s_POST
    278612U,	// LD4Fourv4h
    10780756U,	// LD4Fourv4h_POST
    311380U,	// LD4Fourv4s
    9764948U,	// LD4Fourv4s_POST
    344148U,	// LD4Fourv8b
    10846292U,	// LD4Fourv8b_POST
    376916U,	// LD4Fourv8h
    9830484U,	// LD4Fourv8h_POST
    154630U,	// LD4Rv16b
    14851078U,	// LD4Rv16b_POST
    187398U,	// LD4Rv1d
    10689542U,	// LD4Rv1d_POST
    220166U,	// LD4Rv2d
    10722310U,	// LD4Rv2d_POST
    252934U,	// LD4Rv2s
    11803654U,	// LD4Rv2s_POST
    285702U,	// LD4Rv4h
    12884998U,	// LD4Rv4h_POST
    318470U,	// LD4Rv4s
    11869190U,	// LD4Rv4s_POST
    351238U,	// LD4Rv8b
    15047686U,	// LD4Rv8b_POST
    384006U,	// LD4Rv8h
    12983302U,	// LD4Rv8h_POST
    19284052U,	// LD4i16
    22446164U,	// LD4i16_POST
    19316820U,	// LD4i32
    24576084U,	// LD4i32_POST
    19349588U,	// LD4i64
    32997460U,	// LD4i64_POST
    19382356U,	// LD4i8
    21495892U,	// LD4i8_POST
    100698249U,	// LDARB
    100702615U,	// LDARH
    100703244U,	// LDARW
    100703244U,	// LDARX
    2214632382U,	// LDAXPW
    2214632382U,	// LDAXPX
    100698319U,	// LDAXRB
    100702685U,	// LDAXRH
    100703380U,	// LDAXRW
    100703380U,	// LDAXRX
    100698256U,	// LDLARB
    100702622U,	// LDLARH
    100703250U,	// LDLARW
    100703250U,	// LDLARX
    2214632351U,	// LDNPDi
    2214632351U,	// LDNPQi
    2214632351U,	// LDNPSi
    2214632351U,	// LDNPWi
    2214632351U,	// LDNPXi
    2214632333U,	// LDPDi
    2416057229U,	// LDPDpost
    2416057229U,	// LDPDpre
    2214632333U,	// LDPQi
    2416057229U,	// LDPQpost
    2416057229U,	// LDPQpre
    2214636447U,	// LDPSWi
    2416061343U,	// LDPSWpost
    2416061343U,	// LDPSWpre
    2214632333U,	// LDPSi
    2416057229U,	// LDPSpost
    2416057229U,	// LDPSpre
    2214632333U,	// LDPWi
    2416057229U,	// LDPWpost
    2416057229U,	// LDPWpre
    2214632333U,	// LDPXi
    2416057229U,	// LDPXpost
    2416057229U,	// LDPXpre
    302123160U,	// LDRBBpost
    2449606808U,	// LDRBBpre
    2248181912U,	// LDRBBroW
    2248181912U,	// LDRBBroX
    2248181912U,	// LDRBBui
    302128162U,	// LDRBpost
    2449611810U,	// LDRBpre
    2248186914U,	// LDRBroW
    2248186914U,	// LDRBroX
    2248186914U,	// LDRBui
    402693154U,	// LDRDl
    302128162U,	// LDRDpost
    2449611810U,	// LDRDpre
    2248186914U,	// LDRDroW
    2248186914U,	// LDRDroX
    2248186914U,	// LDRDui
    302127526U,	// LDRHHpost
    2449611174U,	// LDRHHpre
    2248186278U,	// LDRHHroW
    2248186278U,	// LDRHHroX
    2248186278U,	// LDRHHui
    302128162U,	// LDRHpost
    2449611810U,	// LDRHpre
    2248186914U,	// LDRHroW
    2248186914U,	// LDRHroX
    2248186914U,	// LDRHui
    402693154U,	// LDRQl
    302128162U,	// LDRQpost
    2449611810U,	// LDRQpre
    2248186914U,	// LDRQroW
    2248186914U,	// LDRQroX
    2248186914U,	// LDRQui
    302123255U,	// LDRSBWpost
    2449606903U,	// LDRSBWpre
    2248182007U,	// LDRSBWroW
    2248182007U,	// LDRSBWroX
    2248182007U,	// LDRSBWui
    302123255U,	// LDRSBXpost
    2449606903U,	// LDRSBXpre
    2248182007U,	// LDRSBXroW
    2248182007U,	// LDRSBXroX
    2248182007U,	// LDRSBXui
    302127621U,	// LDRSHWpost
    2449611269U,	// LDRSHWpre
    2248186373U,	// LDRSHWroW
    2248186373U,	// LDRSHWroX
    2248186373U,	// LDRSHWui
    302127621U,	// LDRSHXpost
    2449611269U,	// LDRSHXpre
    2248186373U,	// LDRSHXroW
    2248186373U,	// LDRSHXroX
    2248186373U,	// LDRSHXui
    402697126U,	// LDRSWl
    302132134U,	// LDRSWpost
    2449615782U,	// LDRSWpre
    2248190886U,	// LDRSWroW
    2248190886U,	// LDRSWroX
    2248190886U,	// LDRSWui
    402693154U,	// LDRSl
    302128162U,	// LDRSpost
    2449611810U,	// LDRSpre
    2248186914U,	// LDRSroW
    2248186914U,	// LDRSroX
    2248186914U,	// LDRSui
    402693154U,	// LDRWl
    302128162U,	// LDRWpost
    2449611810U,	// LDRWpre
    2248186914U,	// LDRWroW
    2248186914U,	// LDRWroX
    2248186914U,	// LDRWui
    402693154U,	// LDRXl
    302128162U,	// LDRXpost
    2449611810U,	// LDRXpre
    2248186914U,	// LDRXroW
    2248186914U,	// LDRXroX
    2248186914U,	// LDRXui
    2248181933U,	// LDTRBi
    2248186299U,	// LDTRHi
    2248182014U,	// LDTRSBWi
    2248182014U,	// LDTRSBXi
    2248186380U,	// LDTRSHWi
    2248186380U,	// LDTRSHXi
    2248190893U,	// LDTRSWi
    2248186993U,	// LDTRWi
    2248186993U,	// LDTRXi
    2248181953U,	// LDURBBi
    2248187016U,	// LDURBi
    2248187016U,	// LDURDi
    2248186319U,	// LDURHHi
    2248187016U,	// LDURHi
    2248187016U,	// LDURQi
    2248182022U,	// LDURSBWi
    2248182022U,	// LDURSBXi
    2248186388U,	// LDURSHWi
    2248186388U,	// LDURSHXi
    2248190901U,	// LDURSWi
    2248187016U,	// LDURSi
    2248187016U,	// LDURWi
    2248187016U,	// LDURXi
    2214632389U,	// LDXPW
    2214632389U,	// LDXPX
    100698327U,	// LDXRB
    100702693U,	// LDXRH
    100703387U,	// LDXRW
    100703387U,	// LDXRX
    0U,	// LOADgot
    2214632127U,	// LSLVWr
    2214632127U,	// LSLVXr
    2214632551U,	// LSRVWr
    2214632551U,	// LSRVXr
    2214629193U,	// MADDWrrr
    2214629193U,	// MADDXrrr
    2281750953U,	// MLAv16i8
    2281758089U,	// MLAv2i32
    2281758089U,	// MLAv2i32_indexed
    2281754773U,	// MLAv4i16
    2281754773U,	// MLAv4i16_indexed
    2281759886U,	// MLAv4i32
    2281759886U,	// MLAv4i32_indexed
    2281756086U,	// MLAv8i16
    2281756086U,	// MLAv8i16_indexed
    2281751874U,	// MLAv8i8
    2281751576U,	// MLSv16i8
    2281759068U,	// MLSv2i32
    2281759068U,	// MLSv2i32_indexed
    2281755484U,	// MLSv4i16
    2281755484U,	// MLSv4i16_indexed
    2281760979U,	// MLSv4i32
    2281760979U,	// MLSv4i32_indexed
    2281756843U,	// MLSv8i16
    2281756843U,	// MLSv8i16_indexed
    2281752522U,	// MLSv8i8
    805345844U,	// MOVID
    872432355U,	// MOVIv16b_ns
    805325810U,	// MOVIv2d_ns
    3019923250U,	// MOVIv2i32
    3019923250U,	// MOVIv2s_msl
    3019919798U,	// MOVIv4i16
    3019925069U,	// MOVIv4i32
    3019925069U,	// MOVIv4s_msl
    872433207U,	// MOVIv8b_ns
    3019921111U,	// MOVIv8i16
    335583807U,	// MOVKWi
    335583807U,	// MOVKXi
    3019938687U,	// MOVNWi
    3019938687U,	// MOVNXi
    3019942938U,	// MOVZWi
    3019942938U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    939567846U,	// MRS
    547948U,	// MSR
    564332U,	// MSRpstate
    2214627605U,	// MSUBWrrr
    2214627605U,	// MSUBXrrr
    2147500879U,	// MULv16i8
    2147508108U,	// MULv2i32
    2147508108U,	// MULv2i32_indexed
    2147504655U,	// MULv4i16
    2147504655U,	// MULv4i16_indexed
    2147510123U,	// MULv4i32
    2147510123U,	// MULv4i32_indexed
    2147506138U,	// MULv8i16
    2147506138U,	// MULv8i16_indexed
    2147501721U,	// MULv8i8
    3019923222U,	// MVNIv2i32
    3019923222U,	// MVNIv2s_msl
    3019919781U,	// MVNIv4i16
    3019925041U,	// MVNIv4i32
    3019925041U,	// MVNIv4s_msl
    3019921094U,	// MVNIv8i16
    17086U,	// NEGv16i8
    67145648U,	// NEGv1i64
    24256U,	// NEGv2i32
    19388U,	// NEGv2i64
    20825U,	// NEGv4i16
    26063U,	// NEGv4i32
    22138U,	// NEGv8i16
    17942U,	// NEGv8i8
    17480U,	// NOTv16i8
    18421U,	// NOTv8i8
    0U,	// ORNWrr
    2214632258U,	// ORNWrs
    0U,	// ORNXrr
    2214632258U,	// ORNXrs
    2147500908U,	// ORNv16i8
    2147501815U,	// ORNv8i8
    2214632541U,	// ORRWri
    0U,	// ORRWrr
    2214632541U,	// ORRWrs
    2214632541U,	// ORRXri
    0U,	// ORRXrr
    2214632541U,	// ORRXrs
    2147501041U,	// ORRv16i8
    335601956U,	// ORRv2i32
    335598393U,	// ORRv4i16
    335603867U,	// ORRv4i32
    335599752U,	// ORRv8i16
    2147501991U,	// ORRv8i8
    2147505301U,	// PMULLv16i8
    2147507171U,	// PMULLv1i64
    2147507160U,	// PMULLv2i64
    2147506088U,	// PMULLv8i8
    2147500878U,	// PMULv16i8
    2147501720U,	// PMULv8i8
    403233514U,	// PRFMl
    2248727274U,	// PRFMroW
    2248727274U,	// PRFMroX
    2248727274U,	// PRFMui
    2248727304U,	// PRFUMi
    2147508160U,	// RADDHNv2i64_v2i32
    2281759663U,	// RADDHNv2i64_v4i32
    2147504674U,	// RADDHNv4i32_v4i16
    2281755864U,	// RADDHNv4i32_v8i16
    2281750748U,	// RADDHNv8i16_v16i8
    2147501740U,	// RADDHNv8i16_v8i8
    67152660U,	// RBITWr
    67152660U,	// RBITXr
    17451U,	// RBITv16i8
    18395U,	// RBITv8i8
    1092353U,	// RET
    0U,	// RET_ReallyLR
    67141726U,	// REV16Wr
    67141726U,	// REV16Xr
    16778U,	// REV16v16i8
    17702U,	// REV16v8i8
    67141650U,	// REV32Xr
    16580U,	// REV32v16i8
    20564U,	// REV32v4i16
    21511U,	// REV32v8i16
    17655U,	// REV32v8i8
    16767U,	// REV64v16i8
    23916U,	// REV64v2i32
    20601U,	// REV64v4i16
    25713U,	// REV64v4i32
    21914U,	// REV64v8i16
    17692U,	// REV64v8i8
    67152746U,	// REVWr
    67152746U,	// REVXr
    2214632536U,	// RORVWr
    2214632536U,	// RORVXr
    2281750789U,	// RSHRNv16i8_shift
    2147508222U,	// RSHRNv2i32_shift
    2147504727U,	// RSHRNv4i16_shift
    2281759701U,	// RSHRNv4i32_shift
    2281755902U,	// RSHRNv8i16_shift
    2147501793U,	// RSHRNv8i8_shift
    2147508149U,	// RSUBHNv2i64_v2i32
    2281759651U,	// RSUBHNv2i64_v4i32
    2147504663U,	// RSUBHNv4i32_v4i16
    2281755852U,	// RSUBHNv4i32_v8i16
    2281750735U,	// RSUBHNv8i16_v16i8
    2147501729U,	// RSUBHNv8i16_v8i8
    2281755665U,	// SABALv16i8_v8i16
    2281753595U,	// SABALv2i32_v2i64
    2281760342U,	// SABALv4i16_v4i32
    2281753045U,	// SABALv4i32_v2i64
    2281759436U,	// SABALv8i16_v4i32
    2281756384U,	// SABALv8i8_v8i16
    2281750933U,	// SABAv16i8
    2281758070U,	// SABAv2i32
    2281754755U,	// SABAv4i16
    2281759867U,	// SABAv4i32
    2281756068U,	// SABAv8i16
    2281751856U,	// SABAv8i8
    2147505235U,	// SABDLv16i8_v8i16
    2147503171U,	// SABDLv2i32_v2i64
    2147509918U,	// SABDLv4i16_v4i32
    2147502628U,	// SABDLv4i32_v2i64
    2147509019U,	// SABDLv8i16_v4i32
    2147505948U,	// SABDLv8i8_v8i16
    2147500584U,	// SABDv16i8
    2147507716U,	// SABDv2i32
    2147504371U,	// SABDv4i16
    2147509523U,	// SABDv4i32
    2147505684U,	// SABDv8i16
    2147501472U,	// SABDv8i8
    134273021U,	// SADALPv16i8_v8i16
    134269326U,	// SADALPv2i32_v1i64
    134275169U,	// SADALPv4i16_v2i32
    134270295U,	// SADALPv4i32_v2i64
    134277080U,	// SADALPv8i16_v4i32
    134271662U,	// SADALPv8i8_v4i16
    22547U,	// SADDLPv16i8_v8i16
    18852U,	// SADDLPv2i32_v1i64
    24695U,	// SADDLPv4i16_v2i32
    19821U,	// SADDLPv4i32_v2i64
    26606U,	// SADDLPv8i16_v4i32
    21188U,	// SADDLPv8i8_v4i16
    33915U,	// SADDLVv16i8v
    37780U,	// SADDLVv4i16v
    43428U,	// SADDLVv4i32v
    39139U,	// SADDLVv8i16v
    34851U,	// SADDLVv8i8v
    2147505257U,	// SADDLv16i8_v8i16
    2147503191U,	// SADDLv2i32_v2i64
    2147509938U,	// SADDLv4i16_v4i32
    2147502650U,	// SADDLv4i32_v2i64
    2147509041U,	// SADDLv8i16_v4i32
    2147505968U,	// SADDLv8i8_v8i16
    2147505540U,	// SADDWv16i8_v8i16
    2147503871U,	// SADDWv2i32_v2i64
    2147510827U,	// SADDWv4i16_v4i32
    2147502813U,	// SADDWv4i32_v2i64
    2147509339U,	// SADDWv8i16_v4i32
    2147506485U,	// SADDWv8i8_v8i16
    2214636189U,	// SBCSWr
    2214636189U,	// SBCSXr
    2214627633U,	// SBCWr
    2214627633U,	// SBCXr
    2214632158U,	// SBFMWri
    2214632158U,	// SBFMXri
    2214629281U,	// SCVTFSWDri
    2214629281U,	// SCVTFSWSri
    2214629281U,	// SCVTFSXDri
    2214629281U,	// SCVTFSXSri
    67145633U,	// SCVTFUWDri
    67145633U,	// SCVTFUWSri
    67145633U,	// SCVTFUXDri
    67145633U,	// SCVTFUXSri
    2214629281U,	// SCVTFd
    2214629281U,	// SCVTFs
    67145633U,	// SCVTFv1i32
    67145633U,	// SCVTFv1i64
    24235U,	// SCVTFv2f32
    19367U,	// SCVTFv2f64
    2147507883U,	// SCVTFv2i32_shift
    2147503015U,	// SCVTFv2i64_shift
    26042U,	// SCVTFv4f32
    2147509690U,	// SCVTFv4i32_shift
    2214636405U,	// SDIVWr
    2214636405U,	// SDIVXr
    2214636405U,	// SDIV_IntWr
    2214636405U,	// SDIV_IntXr
    2416059640U,	// SHA1Crrr
    67145770U,	// SHA1Hrr
    2416060275U,	// SHA1Mrrr
    2416060356U,	// SHA1Prrr
    2281759344U,	// SHA1SU0rrr
    134275749U,	// SHA1SU1rr
    2416059071U,	// SHA256H2rrr
    2416059873U,	// SHA256Hrrr
    134275708U,	// SHA256SU0rr
    2281759409U,	// SHA256SU1rrr
    2147500628U,	// SHADDv16i8
    2147507765U,	// SHADDv2i32
    2147504411U,	// SHADDv4i16
    2147509572U,	// SHADDv4i32
    2147505724U,	// SHADDv8i16
    2147501512U,	// SHADDv8i8
    21632U,	// SHLLv16i8
    2147503292U,	// SHLLv2i32
    26391U,	// SHLLv4i16
    2147502673U,	// SHLLv4i32
    25416U,	// SHLLv8i16
    22421U,	// SHLLv8i8
    2214632060U,	// SHLd
    2147500783U,	// SHLv16i8_shift
    2147508029U,	// SHLv2i32_shift
    2147503213U,	// SHLv2i64_shift
    2147504577U,	// SHLv4i16_shift
    2147509960U,	// SHLv4i32_shift
    2147505990U,	// SHLv8i16_shift
    2147501634U,	// SHLv8i8_shift
    2281750763U,	// SHRNv16i8_shift
    2147508200U,	// SHRNv2i32_shift
    2147504705U,	// SHRNv4i16_shift
    2281759677U,	// SHRNv4i32_shift
    2281755878U,	// SHRNv8i16_shift
    2147501771U,	// SHRNv8i8_shift
    2147500508U,	// SHSUBv16i8
    2147507659U,	// SHSUBv2i32
    2147504323U,	// SHSUBv4i16
    2147509456U,	// SHSUBv4i32
    2147505636U,	// SHSUBv8i16
    2147501424U,	// SHSUBv8i8
    2416056866U,	// SLId
    2281751249U,	// SLIv16i8_shift
    2281758478U,	// SLIv2i32_shift
    2281753559U,	// SLIv2i64_shift
    2281755037U,	// SLIv4i16_shift
    2281760297U,	// SLIv4i32_shift
    2281756350U,	// SLIv8i16_shift
    2281752103U,	// SLIv8i8_shift
    2214632035U,	// SMADDLrrr
    2147500958U,	// SMAXPv16i8
    2147508448U,	// SMAXPv2i32
    2147504886U,	// SMAXPv4i16
    2147510359U,	// SMAXPv4i32
    2147506245U,	// SMAXPv8i16
    2147501916U,	// SMAXPv8i8
    33961U,	// SMAXVv16i8v
    37822U,	// SMAXVv4i16v
    43523U,	// SMAXVv4i32v
    39181U,	// SMAXVv8i16v
    34893U,	// SMAXVv8i8v
    2147501247U,	// SMAXv16i8
    2147508790U,	// SMAXv2i32
    2147505106U,	// SMAXv4i16
    2147510856U,	// SMAXv4i32
    2147506505U,	// SMAXv8i16
    2147502177U,	// SMAXv8i8
    84288U,	// SMC
    2147500927U,	// SMINPv16i8
    2147508399U,	// SMINPv2i32
    2147504858U,	// SMINPv4i16
    2147510310U,	// SMINPv4i32
    2147506217U,	// SMINPv8i16
    2147501888U,	// SMINPv8i8
    33939U,	// SMINVv16i8v
    37802U,	// SMINVv4i16v
    43484U,	// SMINVv4i32v
    39161U,	// SMINVv8i16v
    34873U,	// SMINVv8i8v
    2147500888U,	// SMINv16i8
    2147508180U,	// SMINv2i32
    2147504685U,	// SMINv4i16
    2147510183U,	// SMINv4i32
    2147506146U,	// SMINv8i16
    2147501751U,	// SMINv8i8
    2281755687U,	// SMLALv16i8_v8i16
    2281753627U,	// SMLALv2i32_indexed
    2281753627U,	// SMLALv2i32_v2i64
    2281760374U,	// SMLALv4i16_indexed
    2281760374U,	// SMLALv4i16_v4i32
    2281753080U,	// SMLALv4i32_indexed
    2281753080U,	// SMLALv4i32_v2i64
    2281759471U,	// SMLALv8i16_indexed
    2281759471U,	// SMLALv8i16_v4i32
    2281756404U,	// SMLALv8i8_v8i16
    2281755830U,	// SMLSLv16i8_v8i16
    2281753851U,	// SMLSLv2i32_indexed
    2281753851U,	// SMLSLv2i32_v2i64
    2281760598U,	// SMLSLv4i16_indexed
    2281760598U,	// SMLSLv4i16_v4i32
    2281753238U,	// SMLSLv4i32_indexed
    2281753238U,	// SMLSLv4i32_v2i64
    2281759629U,	// SMLSLv8i16_indexed
    2281759629U,	// SMLSLv8i16_v4i32
    2281756614U,	// SMLSLv8i8_v8i16
    2147520538U,	// SMOVvi16to32
    2147520538U,	// SMOVvi16to64
    2147523869U,	// SMOVvi32to64
    2147516558U,	// SMOVvi8to32
    2147516558U,	// SMOVvi8to64
    2214632019U,	// SMSUBLrrr
    2214631817U,	// SMULHrr
    2147505312U,	// SMULLv16i8_v8i16
    2147503323U,	// SMULLv2i32_indexed
    2147503323U,	// SMULLv2i32_v2i64
    2147510070U,	// SMULLv4i16_indexed
    2147510070U,	// SMULLv4i16_v4i32
    2147502707U,	// SMULLv4i32_indexed
    2147502707U,	// SMULLv4i32_v2i64
    2147509098U,	// SMULLv8i16_indexed
    2147509098U,	// SMULLv8i16_v4i32
    2147506098U,	// SMULLv8i8_v8i16
    17402U,	// SQABSv16i8
    67152528U,	// SQABSv1i16
    67152528U,	// SQABSv1i32
    67152528U,	// SQABSv1i64
    67152528U,	// SQABSv1i8
    24896U,	// SQABSv2i32
    19974U,	// SQABSv2i64
    21313U,	// SQABSv4i16
    26807U,	// SQABSv4i32
    22672U,	// SQABSv8i16
    18351U,	// SQABSv8i8
    2147500651U,	// SQADDv16i8
    2214629208U,	// SQADDv1i16
    2214629208U,	// SQADDv1i32
    2214629208U,	// SQADDv1i64
    2214629208U,	// SQADDv1i8
    2147507786U,	// SQADDv2i32
    2147502941U,	// SQADDv2i64
    2147504432U,	// SQADDv4i16
    2147509593U,	// SQADDv4i32
    2147505745U,	// SQADDv8i16
    2147501533U,	// SQADDv8i8
    2416056901U,	// SQDMLALi16
    2416056901U,	// SQDMLALi32
    2416054258U,	// SQDMLALv1i32_indexed
    2416057573U,	// SQDMLALv1i64_indexed
    2281753615U,	// SQDMLALv2i32_indexed
    2281753615U,	// SQDMLALv2i32_v2i64
    2281760362U,	// SQDMLALv4i16_indexed
    2281760362U,	// SQDMLALv4i16_v4i32
    2281753067U,	// SQDMLALv4i32_indexed
    2281753067U,	// SQDMLALv4i32_v2i64
    2281759458U,	// SQDMLALv8i16_indexed
    2281759458U,	// SQDMLALv8i16_v4i32
    2416057019U,	// SQDMLSLi16
    2416057019U,	// SQDMLSLi32
    2416054280U,	// SQDMLSLv1i32_indexed
    2416057595U,	// SQDMLSLv1i64_indexed
    2281753839U,	// SQDMLSLv2i32_indexed
    2281753839U,	// SQDMLSLv2i32_v2i64
    2281760586U,	// SQDMLSLv4i16_indexed
    2281760586U,	// SQDMLSLv4i16_v4i32
    2281753225U,	// SQDMLSLv4i32_indexed
    2281753225U,	// SQDMLSLv4i32_v2i64
    2281759616U,	// SQDMLSLv8i16_indexed
    2281759616U,	// SQDMLSLv8i16_v4i32
    2214631798U,	// SQDMULHv1i16
    2214629327U,	// SQDMULHv1i16_indexed
    2214631798U,	// SQDMULHv1i32
    2214632642U,	// SQDMULHv1i32_indexed
    2147507935U,	// SQDMULHv2i32
    2147507935U,	// SQDMULHv2i32_indexed
    2147504494U,	// SQDMULHv4i16
    2147504494U,	// SQDMULHv4i16_indexed
    2147509754U,	// SQDMULHv4i32
    2147509754U,	// SQDMULHv4i32_indexed
    2147505807U,	// SQDMULHv8i16
    2147505807U,	// SQDMULHv8i16_indexed
    2214632114U,	// SQDMULLi16
    2214632114U,	// SQDMULLi32
    2214629373U,	// SQDMULLv1i32_indexed
    2214632688U,	// SQDMULLv1i64_indexed
    2147503311U,	// SQDMULLv2i32_indexed
    2147503311U,	// SQDMULLv2i32_v2i64
    2147510058U,	// SQDMULLv4i16_indexed
    2147510058U,	// SQDMULLv4i16_v4i32
    2147502694U,	// SQDMULLv4i32_indexed
    2147502694U,	// SQDMULLv4i32_v2i64
    2147509085U,	// SQDMULLv8i16_indexed
    2147509085U,	// SQDMULLv8i16_v4i32
    17084U,	// SQNEGv16i8
    67145653U,	// SQNEGv1i16
    67145653U,	// SQNEGv1i32
    67145653U,	// SQNEGv1i64
    67145653U,	// SQNEGv1i8
    24264U,	// SQNEGv2i32
    19396U,	// SQNEGv2i64
    20823U,	// SQNEGv4i16
    26071U,	// SQNEGv4i32
    22136U,	// SQNEGv8i16
    17940U,	// SQNEGv8i8
    2416054211U,	// SQRDMLAHi16_indexed
    2416057526U,	// SQRDMLAHi32_indexed
    2416056675U,	// SQRDMLAHv1i16
    2416056675U,	// SQRDMLAHv1i32
    2281758418U,	// SQRDMLAHv2i32
    2281758418U,	// SQRDMLAHv2i32_indexed
    2281754977U,	// SQRDMLAHv4i16
    2281754977U,	// SQRDMLAHv4i16_indexed
    2281760237U,	// SQRDMLAHv4i32
    2281760237U,	// SQRDMLAHv4i32_indexed
    2281756290U,	// SQRDMLAHv8i16
    2281756290U,	// SQRDMLAHv8i16_indexed
    2416054246U,	// SQRDMLSHi16_indexed
    2416057561U,	// SQRDMLSHi32_indexed
    2416056827U,	// SQRDMLSHv1i16
    2416056827U,	// SQRDMLSHv1i32
    2281758456U,	// SQRDMLSHv2i32
    2281758456U,	// SQRDMLSHv2i32_indexed
    2281755015U,	// SQRDMLSHv4i16
    2281755015U,	// SQRDMLSHv4i16_indexed
    2281760275U,	// SQRDMLSHv4i32
    2281760275U,	// SQRDMLSHv4i32_indexed
    2281756328U,	// SQRDMLSHv8i16
    2281756328U,	// SQRDMLSHv8i16_indexed
    2214631807U,	// SQRDMULHv1i16
    2214629338U,	// SQRDMULHv1i16_indexed
    2214631807U,	// SQRDMULHv1i32
    2214632653U,	// SQRDMULHv1i32_indexed
    2147507947U,	// SQRDMULHv2i32
    2147507947U,	// SQRDMULHv2i32_indexed
    2147504506U,	// SQRDMULHv4i16
    2147504506U,	// SQRDMULHv4i16_indexed
    2147509766U,	// SQRDMULHv4i32
    2147509766U,	// SQRDMULHv4i32_indexed
    2147505819U,	// SQRDMULHv8i16
    2147505819U,	// SQRDMULHv8i16_indexed
    2147500803U,	// SQRSHLv16i8
    2214632072U,	// SQRSHLv1i16
    2214632072U,	// SQRSHLv1i32
    2214632072U,	// SQRSHLv1i64
    2214632072U,	// SQRSHLv1i8
    2147508047U,	// SQRSHLv2i32
    2147503231U,	// SQRSHLv2i64
    2147504595U,	// SQRSHLv4i16
    2147509978U,	// SQRSHLv4i32
    2147506008U,	// SQRSHLv8i16
    2147501652U,	// SQRSHLv8i8
    2214632240U,	// SQRSHRNb
    2214632240U,	// SQRSHRNh
    2214632240U,	// SQRSHRNs
    2281750787U,	// SQRSHRNv16i8_shift
    2147508220U,	// SQRSHRNv2i32_shift
    2147504725U,	// SQRSHRNv4i16_shift
    2281759699U,	// SQRSHRNv4i32_shift
    2281755900U,	// SQRSHRNv8i16_shift
    2147501791U,	// SQRSHRNv8i8_shift
    2214632301U,	// SQRSHRUNb
    2214632301U,	// SQRSHRUNh
    2214632301U,	// SQRSHRUNs
    2281750863U,	// SQRSHRUNv16i8_shift
    2147508287U,	// SQRSHRUNv2i32_shift
    2147504781U,	// SQRSHRUNv4i16_shift
    2281759769U,	// SQRSHRUNv4i32_shift
    2281755970U,	// SQRSHRUNv8i16_shift
    2147501855U,	// SQRSHRUNv8i8_shift
    2214636354U,	// SQSHLUb
    2214636354U,	// SQSHLUd
    2214636354U,	// SQSHLUh
    2214636354U,	// SQSHLUs
    2147501157U,	// SQSHLUv16i8_shift
    2147508708U,	// SQSHLUv2i32_shift
    2147503778U,	// SQSHLUv2i64_shift
    2147505024U,	// SQSHLUv4i16_shift
    2147510619U,	// SQSHLUv4i32_shift
    2147506383U,	// SQSHLUv8i16_shift
    2147502095U,	// SQSHLUv8i8_shift
    2214632058U,	// SQSHLb
    2214632058U,	// SQSHLd
    2214632058U,	// SQSHLh
    2214632058U,	// SQSHLs
    2147500781U,	// SQSHLv16i8
    2147500781U,	// SQSHLv16i8_shift
    2214632058U,	// SQSHLv1i16
    2214632058U,	// SQSHLv1i32
    2214632058U,	// SQSHLv1i64
    2214632058U,	// SQSHLv1i8
    2147508027U,	// SQSHLv2i32
    2147508027U,	// SQSHLv2i32_shift
    2147503211U,	// SQSHLv2i64
    2147503211U,	// SQSHLv2i64_shift
    2147504575U,	// SQSHLv4i16
    2147504575U,	// SQSHLv4i16_shift
    2147509958U,	// SQSHLv4i32
    2147509958U,	// SQSHLv4i32_shift
    2147505988U,	// SQSHLv8i16
    2147505988U,	// SQSHLv8i16_shift
    2147501632U,	// SQSHLv8i8
    2147501632U,	// SQSHLv8i8_shift
    2214632224U,	// SQSHRNb
    2214632224U,	// SQSHRNh
    2214632224U,	// SQSHRNs
    2281750761U,	// SQSHRNv16i8_shift
    2147508198U,	// SQSHRNv2i32_shift
    2147504703U,	// SQSHRNv4i16_shift
    2281759675U,	// SQSHRNv4i32_shift
    2281755876U,	// SQSHRNv8i16_shift
    2147501769U,	// SQSHRNv8i8_shift
    2214632292U,	// SQSHRUNb
    2214632292U,	// SQSHRUNh
    2214632292U,	// SQSHRUNs
    2281750849U,	// SQSHRUNv16i8_shift
    2147508275U,	// SQSHRUNv2i32_shift
    2147504769U,	// SQSHRUNv4i16_shift
    2281759756U,	// SQSHRUNv4i32_shift
    2281755957U,	// SQSHRUNv8i16_shift
    2147501843U,	// SQSHRUNv8i8_shift
    2147500530U,	// SQSUBv16i8
    2214627619U,	// SQSUBv1i16
    2214627619U,	// SQSUBv1i32
    2214627619U,	// SQSUBv1i64
    2214627619U,	// SQSUBv1i8
    2147507679U,	// SQSUBv2i32
    2147502902U,	// SQSUBv2i64
    2147504343U,	// SQSUBv4i16
    2147509476U,	// SQSUBv4i32
    2147505656U,	// SQSUBv8i16
    2147501444U,	// SQSUBv8i8
    134267177U,	// SQXTNv16i8
    67148630U,	// SQXTNv1i16
    67148630U,	// SQXTNv1i32
    67148630U,	// SQXTNv1i8
    24607U,	// SQXTNv2i32
    21101U,	// SQXTNv4i16
    134276086U,	// SQXTNv4i32
    134272287U,	// SQXTNv8i16
    18175U,	// SQXTNv8i8
    134267230U,	// SQXTUNv16i8
    67148663U,	// SQXTUNv1i16
    67148663U,	// SQXTUNv1i32
    67148663U,	// SQXTUNv1i8
    24652U,	// SQXTUNv2i32
    21146U,	// SQXTUNv4i16
    134276135U,	// SQXTUNv4i32
    134272336U,	// SQXTUNv8i16
    18220U,	// SQXTUNv8i8
    2147500604U,	// SRHADDv16i8
    2147507743U,	// SRHADDv2i32
    2147504389U,	// SRHADDv4i16
    2147509550U,	// SRHADDv4i32
    2147505702U,	// SRHADDv8i16
    2147501490U,	// SRHADDv8i8
    2416056871U,	// SRId
    2281751258U,	// SRIv16i8_shift
    2281758495U,	// SRIv2i32_shift
    2281753567U,	// SRIv2i64_shift
    2281755054U,	// SRIv4i16_shift
    2281760314U,	// SRIv4i32_shift
    2281756367U,	// SRIv8i16_shift
    2281752111U,	// SRIv8i8_shift
    2147500827U,	// SRSHLv16i8
    2214632088U,	// SRSHLv1i64
    2147508069U,	// SRSHLv2i32
    2147503253U,	// SRSHLv2i64
    2147504617U,	// SRSHLv4i16
    2147510000U,	// SRSHLv4i32
    2147506030U,	// SRSHLv8i16
    2147501674U,	// SRSHLv8i8
    2214632487U,	// SRSHRd
    2147500990U,	// SRSHRv16i8_shift
    2147508478U,	// SRSHRv2i32_shift
    2147503564U,	// SRSHRv2i64_shift
    2147504915U,	// SRSHRv4i16_shift
    2147510389U,	// SRSHRv4i32_shift
    2147506274U,	// SRSHRv8i16_shift
    2147501945U,	// SRSHRv8i8_shift
    2416050277U,	// SRSRAd
    2281750962U,	// SRSRAv16i8_shift
    2281758097U,	// SRSRAv2i32_shift
    2281753340U,	// SRSRAv2i64_shift
    2281754781U,	// SRSRAv4i16_shift
    2281759894U,	// SRSRAv4i32_shift
    2281756094U,	// SRSRAv8i16_shift
    2281751882U,	// SRSRAv8i8_shift
    2147505279U,	// SSHLLv16i8_shift
    2147503291U,	// SSHLLv2i32_shift
    2147510038U,	// SSHLLv4i16_shift
    2147502672U,	// SSHLLv4i32_shift
    2147509063U,	// SSHLLv8i16_shift
    2147506068U,	// SSHLLv8i8_shift
    2147500849U,	// SSHLv16i8
    2214632102U,	// SSHLv1i64
    2147508089U,	// SSHLv2i32
    2147503273U,	// SSHLv2i64
    2147504637U,	// SSHLv4i16
    2147510020U,	// SSHLv4i32
    2147506050U,	// SSHLv8i16
    2147501694U,	// SSHLv8i8
    2214632501U,	// SSHRd
    2147501012U,	// SSHRv16i8_shift
    2147508498U,	// SSHRv2i32_shift
    2147503584U,	// SSHRv2i64_shift
    2147504935U,	// SSHRv4i16_shift
    2147510409U,	// SSHRv4i32_shift
    2147506294U,	// SSHRv8i16_shift
    2147501965U,	// SSHRv8i8_shift
    2416050291U,	// SSRAd
    2281750984U,	// SSRAv16i8_shift
    2281758117U,	// SSRAv2i32_shift
    2281753360U,	// SSRAv2i64_shift
    2281754801U,	// SSRAv4i16_shift
    2281759914U,	// SSRAv4i32_shift
    2281756114U,	// SSRAv8i16_shift
    2281751902U,	// SSRAv8i8_shift
    2147505213U,	// SSUBLv16i8_v8i16
    2147503151U,	// SSUBLv2i32_v2i64
    2147509898U,	// SSUBLv4i16_v4i32
    2147502606U,	// SSUBLv4i32_v2i64
    2147508997U,	// SSUBLv8i16_v4i32
    2147505928U,	// SSUBLv8i8_v8i16
    2147505518U,	// SSUBWv16i8_v8i16
    2147503851U,	// SSUBWv2i32_v2i64
    2147510807U,	// SSUBWv4i16_v4i32
    2147502791U,	// SSUBWv4i32_v2i64
    2147509317U,	// SSUBWv8i16_v4i32
    2147506465U,	// SSUBWv8i8_v8i16
    147469U,	// ST1Fourv16b
    9601037U,	// ST1Fourv16b_POST
    180237U,	// ST1Fourv1d
    10682381U,	// ST1Fourv1d_POST
    213005U,	// ST1Fourv2d
    9666573U,	// ST1Fourv2d_POST
    245773U,	// ST1Fourv2s
    10747917U,	// ST1Fourv2s_POST
    278541U,	// ST1Fourv4h
    10780685U,	// ST1Fourv4h_POST
    311309U,	// ST1Fourv4s
    9764877U,	// ST1Fourv4s_POST
    344077U,	// ST1Fourv8b
    10846221U,	// ST1Fourv8b_POST
    376845U,	// ST1Fourv8h
    9830413U,	// ST1Fourv8h_POST
    147469U,	// ST1Onev16b
    11698189U,	// ST1Onev16b_POST
    180237U,	// ST1Onev1d
    12779533U,	// ST1Onev1d_POST
    213005U,	// ST1Onev2d
    11763725U,	// ST1Onev2d_POST
    245773U,	// ST1Onev2s
    12845069U,	// ST1Onev2s_POST
    278541U,	// ST1Onev4h
    12877837U,	// ST1Onev4h_POST
    311309U,	// ST1Onev4s
    11862029U,	// ST1Onev4s_POST
    344077U,	// ST1Onev8b
    12943373U,	// ST1Onev8b_POST
    376845U,	// ST1Onev8h
    11927565U,	// ST1Onev8h_POST
    147469U,	// ST1Threev16b
    16941069U,	// ST1Threev16b_POST
    180237U,	// ST1Threev1d
    18022413U,	// ST1Threev1d_POST
    213005U,	// ST1Threev2d
    17006605U,	// ST1Threev2d_POST
    245773U,	// ST1Threev2s
    18087949U,	// ST1Threev2s_POST
    278541U,	// ST1Threev4h
    18120717U,	// ST1Threev4h_POST
    311309U,	// ST1Threev4s
    17104909U,	// ST1Threev4s_POST
    344077U,	// ST1Threev8b
    18186253U,	// ST1Threev8b_POST
    376845U,	// ST1Threev8h
    17170445U,	// ST1Threev8h_POST
    147469U,	// ST1Twov16b
    10649613U,	// ST1Twov16b_POST
    180237U,	// ST1Twov1d
    11730957U,	// ST1Twov1d_POST
    213005U,	// ST1Twov2d
    10715149U,	// ST1Twov2d_POST
    245773U,	// ST1Twov2s
    11796493U,	// ST1Twov2s_POST
    278541U,	// ST1Twov4h
    11829261U,	// ST1Twov4h_POST
    311309U,	// ST1Twov4s
    10813453U,	// ST1Twov4s_POST
    344077U,	// ST1Twov8b
    11894797U,	// ST1Twov8b_POST
    376845U,	// ST1Twov8h
    10878989U,	// ST1Twov8h_POST
    589837U,	// ST1i16
    1041645581U,	// ST1i16_POST
    606221U,	// ST1i32
    1108787213U,	// ST1i32_POST
    622605U,	// ST1i64
    1175928845U,	// ST1i64_POST
    638989U,	// ST1i8
    1243070477U,	// ST1i8_POST
    147518U,	// ST2Twov16b
    10649662U,	// ST2Twov16b_POST
    213054U,	// ST2Twov2d
    10715198U,	// ST2Twov2d_POST
    245822U,	// ST2Twov2s
    11796542U,	// ST2Twov2s_POST
    278590U,	// ST2Twov4h
    11829310U,	// ST2Twov4h_POST
    311358U,	// ST2Twov4s
    10813502U,	// ST2Twov4s_POST
    344126U,	// ST2Twov8b
    11894846U,	// ST2Twov8b_POST
    376894U,	// ST2Twov8h
    10879038U,	// ST2Twov8h_POST
    589886U,	// ST2i16
    1108754494U,	// ST2i16_POST
    606270U,	// ST2i32
    1175896126U,	// ST2i32_POST
    622654U,	// ST2i64
    1310146622U,	// ST2i64_POST
    639038U,	// ST2i8
    1041743934U,	// ST2i8_POST
    147535U,	// ST3Threev16b
    16941135U,	// ST3Threev16b_POST
    213071U,	// ST3Threev2d
    17006671U,	// ST3Threev2d_POST
    245839U,	// ST3Threev2s
    18088015U,	// ST3Threev2s_POST
    278607U,	// ST3Threev4h
    18120783U,	// ST3Threev4h_POST
    311375U,	// ST3Threev4s
    17104975U,	// ST3Threev4s_POST
    344143U,	// ST3Threev8b
    18186319U,	// ST3Threev8b_POST
    376911U,	// ST3Threev8h
    17170511U,	// ST3Threev8h_POST
    589903U,	// ST3i16
    1377189967U,	// ST3i16_POST
    606287U,	// ST3i32
    1444331599U,	// ST3i32_POST
    622671U,	// ST3i64
    1511473231U,	// ST3i64_POST
    639055U,	// ST3i8
    1578614863U,	// ST3i8_POST
    147545U,	// ST4Fourv16b
    9601113U,	// ST4Fourv16b_POST
    213081U,	// ST4Fourv2d
    9666649U,	// ST4Fourv2d_POST
    245849U,	// ST4Fourv2s
    10747993U,	// ST4Fourv2s_POST
    278617U,	// ST4Fourv4h
    10780761U,	// ST4Fourv4h_POST
    311385U,	// ST4Fourv4s
    9764953U,	// ST4Fourv4s_POST
    344153U,	// ST4Fourv8b
    10846297U,	// ST4Fourv8b_POST
    376921U,	// ST4Fourv8h
    9830489U,	// ST4Fourv8h_POST
    589913U,	// ST4i16
    1175863385U,	// ST4i16_POST
    606297U,	// ST4i32
    1310113881U,	// ST4i32_POST
    622681U,	// ST4i64
    1645690969U,	// ST4i64_POST
    639065U,	// ST4i8
    1108852825U,	// ST4i8_POST
    100698270U,	// STLLRB
    100702636U,	// STLLRH
    100703302U,	// STLLRW
    100703302U,	// STLLRX
    100698278U,	// STLRB
    100702644U,	// STLRH
    100703309U,	// STLRW
    100703309U,	// STLRX
    2214632395U,	// STLXPW
    2214632395U,	// STLXPX
    2214627550U,	// STLXRB
    2214631916U,	// STLXRH
    2214632609U,	// STLXRW
    2214632609U,	// STLXRX
    2214632357U,	// STNPDi
    2214632357U,	// STNPQi
    2214632357U,	// STNPSi
    2214632357U,	// STNPWi
    2214632357U,	// STNPXi
    2214632377U,	// STPDi
    2416057273U,	// STPDpost
    2416057273U,	// STPDpre
    2214632377U,	// STPQi
    2416057273U,	// STPQpost
    2416057273U,	// STPQpre
    2214632377U,	// STPSi
    2416057273U,	// STPSpost
    2416057273U,	// STPSpre
    2214632377U,	// STPWi
    2416057273U,	// STPWpost
    2416057273U,	// STPWpre
    2214632377U,	// STPXi
    2416057273U,	// STPXpost
    2416057273U,	// STPXpre
    302123188U,	// STRBBpost
    2449606836U,	// STRBBpre
    2248181940U,	// STRBBroW
    2248181940U,	// STRBBroX
    2248181940U,	// STRBBui
    302128247U,	// STRBpost
    2449611895U,	// STRBpre
    2248186999U,	// STRBroW
    2248186999U,	// STRBroX
    2248186999U,	// STRBui
    302128247U,	// STRDpost
    2449611895U,	// STRDpre
    2248186999U,	// STRDroW
    2248186999U,	// STRDroX
    2248186999U,	// STRDui
    302127554U,	// STRHHpost
    2449611202U,	// STRHHpre
    2248186306U,	// STRHHroW
    2248186306U,	// STRHHroX
    2248186306U,	// STRHHui
    302128247U,	// STRHpost
    2449611895U,	// STRHpre
    2248186999U,	// STRHroW
    2248186999U,	// STRHroX
    2248186999U,	// STRHui
    302128247U,	// STRQpost
    2449611895U,	// STRQpre
    2248186999U,	// STRQroW
    2248186999U,	// STRQroX
    2248186999U,	// STRQui
    302128247U,	// STRSpost
    2449611895U,	// STRSpre
    2248186999U,	// STRSroW
    2248186999U,	// STRSroX
    2248186999U,	// STRSui
    302128247U,	// STRWpost
    2449611895U,	// STRWpre
    2248186999U,	// STRWroW
    2248186999U,	// STRWroX
    2248186999U,	// STRWui
    302128247U,	// STRXpost
    2449611895U,	// STRXpre
    2248186999U,	// STRXroW
    2248186999U,	// STRXroX
    2248186999U,	// STRXui
    2248181946U,	// STTRBi
    2248186312U,	// STTRHi
    2248187004U,	// STTRWi
    2248187004U,	// STTRXi
    2248181960U,	// STURBBi
    2248187022U,	// STURBi
    2248187022U,	// STURDi
    2248186326U,	// STURHHi
    2248187022U,	// STURHi
    2248187022U,	// STURQi
    2248187022U,	// STURSi
    2248187022U,	// STURWi
    2248187022U,	// STURXi
    2214632402U,	// STXPW
    2214632402U,	// STXPX
    2214627558U,	// STXRB
    2214631924U,	// STXRH
    2214632616U,	// STXRW
    2214632616U,	// STXRX
    2147508150U,	// SUBHNv2i64_v2i32
    2281759652U,	// SUBHNv2i64_v4i32
    2147504664U,	// SUBHNv4i32_v4i16
    2281755853U,	// SUBHNv4i32_v8i16
    2281750736U,	// SUBHNv8i16_v16i8
    2147501730U,	// SUBHNv8i16_v8i8
    2214636183U,	// SUBSWri
    0U,	// SUBSWrr
    2214636183U,	// SUBSWrs
    2214636183U,	// SUBSWrx
    2214636183U,	// SUBSXri
    0U,	// SUBSXrr
    2214636183U,	// SUBSXrs
    2214636183U,	// SUBSXrx
    2214636183U,	// SUBSXrx64
    2214627599U,	// SUBWri
    0U,	// SUBWrr
    2214627599U,	// SUBWrs
    2214627599U,	// SUBWrx
    2214627599U,	// SUBXri
    0U,	// SUBXrr
    2214627599U,	// SUBXrs
    2214627599U,	// SUBXrx
    2214627599U,	// SUBXrx64
    2147500510U,	// SUBv16i8
    2214627599U,	// SUBv1i64
    2147507651U,	// SUBv2i32
    2147502894U,	// SUBv2i64
    2147504325U,	// SUBv4i16
    2147509448U,	// SUBv4i32
    2147505638U,	// SUBv8i16
    2147501426U,	// SUBv8i8
    134267510U,	// SUQADDv16i8
    268570463U,	// SUQADDv1i16
    268570463U,	// SUQADDv1i32
    268570463U,	// SUQADDv1i64
    268570463U,	// SUQADDv1i8
    134274644U,	// SUQADDv2i32
    134269799U,	// SUQADDv2i64
    134271290U,	// SUQADDv4i16
    134276451U,	// SUQADDv4i32
    134272603U,	// SUQADDv8i16
    134268391U,	// SUQADDv8i8
    84305U,	// SVC
    2214632132U,	// SYSLxt
    1677765364U,	// SYSxt
    3927988814U,	// TBLv16i8Four
    3927988814U,	// TBLv16i8One
    3927988814U,	// TBLv16i8Three
    3927988814U,	// TBLv16i8Two
    1781553742U,	// TBLv8i8Four
    1781553742U,	// TBLv8i8One
    1781553742U,	// TBLv8i8Three
    1781553742U,	// TBLv8i8Two
    2214636556U,	// TBNZW
    2214636556U,	// TBNZX
    3995134923U,	// TBXv16i8Four
    3995134923U,	// TBXv16i8One
    3995134923U,	// TBXv16i8Three
    3995134923U,	// TBXv16i8Two
    1848699851U,	// TBXv8i8Four
    1848699851U,	// TBXv8i8One
    1848699851U,	// TBXv8i8Three
    1848699851U,	// TBXv8i8Two
    2214636540U,	// TBZW
    2214636540U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    1092640U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    2147500198U,	// TRN1v16i8
    2147507510U,	// TRN1v2i32
    2147502522U,	// TRN1v2i64
    2147504185U,	// TRN1v4i16
    2147508874U,	// TRN1v4i32
    2147505132U,	// TRN1v8i16
    2147501276U,	// TRN1v8i8
    2147500319U,	// TRN2v16i8
    2147507537U,	// TRN2v2i32
    2147502764U,	// TRN2v2i64
    2147504222U,	// TRN2v4i16
    2147509229U,	// TRN2v4i32
    2147505430U,	// TRN2v8i16
    2147501313U,	// TRN2v8i8
    2281755676U,	// UABALv16i8_v8i16
    2281753605U,	// UABALv2i32_v2i64
    2281760352U,	// UABALv4i16_v4i32
    2281753056U,	// UABALv4i32_v2i64
    2281759447U,	// UABALv8i16_v4i32
    2281756394U,	// UABALv8i8_v8i16
    2281750943U,	// UABAv16i8
    2281758079U,	// UABAv2i32
    2281754764U,	// UABAv4i16
    2281759876U,	// UABAv4i32
    2281756077U,	// UABAv8i16
    2281751865U,	// UABAv8i8
    2147505246U,	// UABDLv16i8_v8i16
    2147503181U,	// UABDLv2i32_v2i64
    2147509928U,	// UABDLv4i16_v4i32
    2147502639U,	// UABDLv4i32_v2i64
    2147509030U,	// UABDLv8i16_v4i32
    2147505958U,	// UABDLv8i8_v8i16
    2147500594U,	// UABDv16i8
    2147507725U,	// UABDv2i32
    2147504380U,	// UABDv4i16
    2147509532U,	// UABDv4i32
    2147505693U,	// UABDv8i16
    2147501481U,	// UABDv8i8
    134273032U,	// UADALPv16i8_v8i16
    134269337U,	// UADALPv2i32_v1i64
    134275180U,	// UADALPv4i16_v2i32
    134270306U,	// UADALPv4i32_v2i64
    134277091U,	// UADALPv8i16_v4i32
    134271673U,	// UADALPv8i8_v4i16
    22558U,	// UADDLPv16i8_v8i16
    18863U,	// UADDLPv2i32_v1i64
    24706U,	// UADDLPv4i16_v2i32
    19832U,	// UADDLPv4i32_v2i64
    26617U,	// UADDLPv8i16_v4i32
    21199U,	// UADDLPv8i8_v4i16
    33927U,	// UADDLVv16i8v
    37791U,	// UADDLVv4i16v
    43439U,	// UADDLVv4i32v
    39150U,	// UADDLVv8i16v
    34862U,	// UADDLVv8i8v
    2147505268U,	// UADDLv16i8_v8i16
    2147503201U,	// UADDLv2i32_v2i64
    2147509948U,	// UADDLv4i16_v4i32
    2147502661U,	// UADDLv4i32_v2i64
    2147509052U,	// UADDLv8i16_v4i32
    2147505978U,	// UADDLv8i8_v8i16
    2147505551U,	// UADDWv16i8_v8i16
    2147503881U,	// UADDWv2i32_v2i64
    2147510837U,	// UADDWv4i16_v4i32
    2147502824U,	// UADDWv4i32_v2i64
    2147509350U,	// UADDWv8i16_v4i32
    2147506495U,	// UADDWv8i8_v8i16
    2214632164U,	// UBFMWri
    2214632164U,	// UBFMXri
    2214629288U,	// UCVTFSWDri
    2214629288U,	// UCVTFSWSri
    2214629288U,	// UCVTFSXDri
    2214629288U,	// UCVTFSXSri
    67145640U,	// UCVTFUWDri
    67145640U,	// UCVTFUWSri
    67145640U,	// UCVTFUXDri
    67145640U,	// UCVTFUXSri
    2214629288U,	// UCVTFd
    2214629288U,	// UCVTFs
    67145640U,	// UCVTFv1i32
    67145640U,	// UCVTFv1i64
    24245U,	// UCVTFv2f32
    19377U,	// UCVTFv2f64
    2147507893U,	// UCVTFv2i32_shift
    2147503025U,	// UCVTFv2i64_shift
    26052U,	// UCVTFv4f32
    2147509700U,	// UCVTFv4i32_shift
    2214636411U,	// UDIVWr
    2214636411U,	// UDIVXr
    2214636411U,	// UDIV_IntWr
    2214636411U,	// UDIV_IntXr
    2147500639U,	// UHADDv16i8
    2147507775U,	// UHADDv2i32
    2147504421U,	// UHADDv4i16
    2147509582U,	// UHADDv4i32
    2147505734U,	// UHADDv8i16
    2147501522U,	// UHADDv8i8
    2147500519U,	// UHSUBv16i8
    2147507669U,	// UHSUBv2i32
    2147504333U,	// UHSUBv4i16
    2147509466U,	// UHSUBv4i32
    2147505646U,	// UHSUBv8i16
    2147501434U,	// UHSUBv8i8
    2214632043U,	// UMADDLrrr
    2147500969U,	// UMAXPv16i8
    2147508458U,	// UMAXPv2i32
    2147504896U,	// UMAXPv4i16
    2147510369U,	// UMAXPv4i32
    2147506255U,	// UMAXPv8i16
    2147501926U,	// UMAXPv8i8
    33972U,	// UMAXVv16i8v
    37832U,	// UMAXVv4i16v
    43533U,	// UMAXVv4i32v
    39191U,	// UMAXVv8i16v
    34903U,	// UMAXVv8i8v
    2147501257U,	// UMAXv16i8
    2147508799U,	// UMAXv2i32
    2147505115U,	// UMAXv4i16
    2147510865U,	// UMAXv4i32
    2147506514U,	// UMAXv8i16
    2147502186U,	// UMAXv8i8
    2147500938U,	// UMINPv16i8
    2147508409U,	// UMINPv2i32
    2147504868U,	// UMINPv4i16
    2147510320U,	// UMINPv4i32
    2147506227U,	// UMINPv8i16
    2147501898U,	// UMINPv8i8
    33950U,	// UMINVv16i8v
    37812U,	// UMINVv4i16v
    43494U,	// UMINVv4i32v
    39171U,	// UMINVv8i16v
    34883U,	// UMINVv8i8v
    2147500898U,	// UMINv16i8
    2147508189U,	// UMINv2i32
    2147504694U,	// UMINv4i16
    2147510192U,	// UMINv4i32
    2147506155U,	// UMINv8i16
    2147501760U,	// UMINv8i8
    2281755698U,	// UMLALv16i8_v8i16
    2281753637U,	// UMLALv2i32_indexed
    2281753637U,	// UMLALv2i32_v2i64
    2281760384U,	// UMLALv4i16_indexed
    2281760384U,	// UMLALv4i16_v4i32
    2281753091U,	// UMLALv4i32_indexed
    2281753091U,	// UMLALv4i32_v2i64
    2281759482U,	// UMLALv8i16_indexed
    2281759482U,	// UMLALv8i16_v4i32
    2281756414U,	// UMLALv8i8_v8i16
    2281755841U,	// UMLSLv16i8_v8i16
    2281753861U,	// UMLSLv2i32_indexed
    2281753861U,	// UMLSLv2i32_v2i64
    2281760608U,	// UMLSLv4i16_indexed
    2281760608U,	// UMLSLv4i16_v4i32
    2281753249U,	// UMLSLv4i32_indexed
    2281753249U,	// UMLSLv4i32_v2i64
    2281759640U,	// UMLSLv8i16_indexed
    2281759640U,	// UMLSLv8i16_v4i32
    2281756624U,	// UMLSLv8i8_v8i16
    2147520546U,	// UMOVvi16
    2147523877U,	// UMOVvi32
    2147518845U,	// UMOVvi64
    2147516566U,	// UMOVvi8
    2214632027U,	// UMSUBLrrr
    2214631824U,	// UMULHrr
    2147505323U,	// UMULLv16i8_v8i16
    2147503333U,	// UMULLv2i32_indexed
    2147503333U,	// UMULLv2i32_v2i64
    2147510080U,	// UMULLv4i16_indexed
    2147510080U,	// UMULLv4i16_v4i32
    2147502718U,	// UMULLv4i32_indexed
    2147502718U,	// UMULLv4i32_v2i64
    2147509109U,	// UMULLv8i16_indexed
    2147509109U,	// UMULLv8i16_v4i32
    2147506108U,	// UMULLv8i8_v8i16
    2147500663U,	// UQADDv16i8
    2214629216U,	// UQADDv1i16
    2214629216U,	// UQADDv1i32
    2214629216U,	// UQADDv1i64
    2214629216U,	// UQADDv1i8
    2147507797U,	// UQADDv2i32
    2147502952U,	// UQADDv2i64
    2147504443U,	// UQADDv4i16
    2147509604U,	// UQADDv4i32
    2147505756U,	// UQADDv8i16
    2147501544U,	// UQADDv8i8
    2147500815U,	// UQRSHLv16i8
    2214632080U,	// UQRSHLv1i16
    2214632080U,	// UQRSHLv1i32
    2214632080U,	// UQRSHLv1i64
    2214632080U,	// UQRSHLv1i8
    2147508058U,	// UQRSHLv2i32
    2147503242U,	// UQRSHLv2i64
    2147504606U,	// UQRSHLv4i16
    2147509989U,	// UQRSHLv4i32
    2147506019U,	// UQRSHLv8i16
    2147501663U,	// UQRSHLv8i8
    2214632249U,	// UQRSHRNb
    2214632249U,	// UQRSHRNh
    2214632249U,	// UQRSHRNs
    2281750801U,	// UQRSHRNv16i8_shift
    2147508232U,	// UQRSHRNv2i32_shift
    2147504737U,	// UQRSHRNv4i16_shift
    2281759712U,	// UQRSHRNv4i32_shift
    2281755913U,	// UQRSHRNv8i16_shift
    2147501803U,	// UQRSHRNv8i8_shift
    2214632065U,	// UQSHLb
    2214632065U,	// UQSHLd
    2214632065U,	// UQSHLh
    2214632065U,	// UQSHLs
    2147500792U,	// UQSHLv16i8
    2147500792U,	// UQSHLv16i8_shift
    2214632065U,	// UQSHLv1i16
    2214632065U,	// UQSHLv1i32
    2214632065U,	// UQSHLv1i64
    2214632065U,	// UQSHLv1i8
    2147508037U,	// UQSHLv2i32
    2147508037U,	// UQSHLv2i32_shift
    2147503221U,	// UQSHLv2i64
    2147503221U,	// UQSHLv2i64_shift
    2147504585U,	// UQSHLv4i16
    2147504585U,	// UQSHLv4i16_shift
    2147509968U,	// UQSHLv4i32
    2147509968U,	// UQSHLv4i32_shift
    2147505998U,	// UQSHLv8i16
    2147505998U,	// UQSHLv8i16_shift
    2147501642U,	// UQSHLv8i8
    2147501642U,	// UQSHLv8i8_shift
    2214632232U,	// UQSHRNb
    2214632232U,	// UQSHRNh
    2214632232U,	// UQSHRNs
    2281750774U,	// UQSHRNv16i8_shift
    2147508209U,	// UQSHRNv2i32_shift
    2147504714U,	// UQSHRNv4i16_shift
    2281759687U,	// UQSHRNv4i32_shift
    2281755888U,	// UQSHRNv8i16_shift
    2147501780U,	// UQSHRNv8i8_shift
    2147500541U,	// UQSUBv16i8
    2214627626U,	// UQSUBv1i16
    2214627626U,	// UQSUBv1i32
    2214627626U,	// UQSUBv1i64
    2214627626U,	// UQSUBv1i8
    2147507689U,	// UQSUBv2i32
    2147502912U,	// UQSUBv2i64
    2147504353U,	// UQSUBv4i16
    2147509486U,	// UQSUBv4i32
    2147505666U,	// UQSUBv8i16
    2147501454U,	// UQSUBv8i8
    134267189U,	// UQXTNv16i8
    67148637U,	// UQXTNv1i16
    67148637U,	// UQXTNv1i32
    67148637U,	// UQXTNv1i8
    24617U,	// UQXTNv2i32
    21111U,	// UQXTNv4i16
    134276097U,	// UQXTNv4i32
    134272298U,	// UQXTNv8i16
    18185U,	// UQXTNv8i8
    24200U,	// URECPEv2i32
    26007U,	// URECPEv4i32
    2147500616U,	// URHADDv16i8
    2147507754U,	// URHADDv2i32
    2147504400U,	// URHADDv4i16
    2147509561U,	// URHADDv4i32
    2147505713U,	// URHADDv8i16
    2147501501U,	// URHADDv8i8
    2147500838U,	// URSHLv16i8
    2214632095U,	// URSHLv1i64
    2147508079U,	// URSHLv2i32
    2147503263U,	// URSHLv2i64
    2147504627U,	// URSHLv4i16
    2147510010U,	// URSHLv4i32
    2147506040U,	// URSHLv8i16
    2147501684U,	// URSHLv8i8
    2214632494U,	// URSHRd
    2147501001U,	// URSHRv16i8_shift
    2147508488U,	// URSHRv2i32_shift
    2147503574U,	// URSHRv2i64_shift
    2147504925U,	// URSHRv4i16_shift
    2147510399U,	// URSHRv4i32_shift
    2147506284U,	// URSHRv8i16_shift
    2147501955U,	// URSHRv8i8_shift
    24223U,	// URSQRTEv2i32
    26030U,	// URSQRTEv4i32
    2416050284U,	// URSRAd
    2281750973U,	// URSRAv16i8_shift
    2281758107U,	// URSRAv2i32_shift
    2281753350U,	// URSRAv2i64_shift
    2281754791U,	// URSRAv4i16_shift
    2281759904U,	// URSRAv4i32_shift
    2281756104U,	// URSRAv8i16_shift
    2281751892U,	// URSRAv8i8_shift
    2147505290U,	// USHLLv16i8_shift
    2147503301U,	// USHLLv2i32_shift
    2147510048U,	// USHLLv4i16_shift
    2147502683U,	// USHLLv4i32_shift
    2147509074U,	// USHLLv8i16_shift
    2147506078U,	// USHLLv8i8_shift
    2147500859U,	// USHLv16i8
    2214632108U,	// USHLv1i64
    2147508098U,	// USHLv2i32
    2147503282U,	// USHLv2i64
    2147504646U,	// USHLv4i16
    2147510029U,	// USHLv4i32
    2147506059U,	// USHLv8i16
    2147501703U,	// USHLv8i8
    2214632507U,	// USHRd
    2147501022U,	// USHRv16i8_shift
    2147508507U,	// USHRv2i32_shift
    2147503593U,	// USHRv2i64_shift
    2147504944U,	// USHRv4i16_shift
    2147510418U,	// USHRv4i32_shift
    2147506303U,	// USHRv8i16_shift
    2147501974U,	// USHRv8i8_shift
    134267498U,	// USQADDv16i8
    268570455U,	// USQADDv1i16
    268570455U,	// USQADDv1i32
    268570455U,	// USQADDv1i64
    268570455U,	// USQADDv1i8
    134274633U,	// USQADDv2i32
    134269788U,	// USQADDv2i64
    134271279U,	// USQADDv4i16
    134276440U,	// USQADDv4i32
    134272592U,	// USQADDv8i16
    134268380U,	// USQADDv8i8
    2416050297U,	// USRAd
    2281750994U,	// USRAv16i8_shift
    2281758126U,	// USRAv2i32_shift
    2281753369U,	// USRAv2i64_shift
    2281754810U,	// USRAv4i16_shift
    2281759923U,	// USRAv4i32_shift
    2281756123U,	// USRAv8i16_shift
    2281751911U,	// USRAv8i8_shift
    2147505224U,	// USUBLv16i8_v8i16
    2147503161U,	// USUBLv2i32_v2i64
    2147509908U,	// USUBLv4i16_v4i32
    2147502617U,	// USUBLv4i32_v2i64
    2147509008U,	// USUBLv8i16_v4i32
    2147505938U,	// USUBLv8i8_v8i16
    2147505529U,	// USUBWv16i8_v8i16
    2147503861U,	// USUBWv2i32_v2i64
    2147510817U,	// USUBWv4i16_v4i32
    2147502802U,	// USUBWv4i32_v2i64
    2147509328U,	// USUBWv8i16_v4i32
    2147506475U,	// USUBWv8i8_v8i16
    2147500218U,	// UZP1v16i8
    2147507528U,	// UZP1v2i32
    2147502540U,	// UZP1v2i64
    2147504203U,	// UZP1v4i16
    2147508892U,	// UZP1v4i32
    2147505150U,	// UZP1v8i16
    2147501294U,	// UZP1v8i8
    2147500405U,	// UZP2v16i8
    2147507555U,	// UZP2v2i32
    2147502782U,	// UZP2v2i64
    2147504240U,	// UZP2v4i16
    2147509308U,	// UZP2v4i32
    2147505509U,	// UZP2v8i16
    2147501331U,	// UZP2v8i8
    134267179U,	// XTNv16i8
    24609U,	// XTNv2i32
    21103U,	// XTNv4i16
    134276088U,	// XTNv4i32
    134272289U,	// XTNv8i16
    18177U,	// XTNv8i8
    2147500208U,	// ZIP1v16i8
    2147507519U,	// ZIP1v2i32
    2147502531U,	// ZIP1v2i64
    2147504194U,	// ZIP1v4i16
    2147508883U,	// ZIP1v4i32
    2147505141U,	// ZIP1v8i16
    2147501285U,	// ZIP1v8i8
    2147500395U,	// ZIP2v16i8
    2147507546U,	// ZIP2v2i32
    2147502773U,	// ZIP2v2i64
    2147504231U,	// ZIP2v4i16
    2147509299U,	// ZIP2v4i32
    2147505500U,	// ZIP2v8i16
    2147501322U,	// ZIP2v8i8
    0U
  };

  static const uint32_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// FRAME_ALLOC
    0U,	// ABSv16i8
    0U,	// ABSv1i64
    0U,	// ABSv2i32
    0U,	// ABSv2i64
    0U,	// ABSv4i16
    0U,	// ABSv4i32
    0U,	// ABSv8i16
    0U,	// ABSv8i8
    0U,	// ADCSWr
    0U,	// ADCSXr
    0U,	// ADCWr
    0U,	// ADCXr
    16U,	// ADDHNv2i64_v2i32
    32U,	// ADDHNv2i64_v4i32
    16U,	// ADDHNv4i32_v4i16
    32U,	// ADDHNv4i32_v8i16
    32U,	// ADDHNv8i16_v16i8
    16U,	// ADDHNv8i16_v8i8
    16U,	// ADDPv16i8
    16U,	// ADDPv2i32
    16U,	// ADDPv2i64
    0U,	// ADDPv2i64p
    16U,	// ADDPv4i16
    16U,	// ADDPv4i32
    16U,	// ADDPv8i16
    16U,	// ADDPv8i8
    48U,	// ADDSWri
    0U,	// ADDSWrr
    64U,	// ADDSWrs
    80U,	// ADDSWrx
    48U,	// ADDSXri
    0U,	// ADDSXrr
    64U,	// ADDSXrs
    80U,	// ADDSXrx
    256U,	// ADDSXrx64
    0U,	// ADDVv16i8v
    0U,	// ADDVv4i16v
    0U,	// ADDVv4i32v
    0U,	// ADDVv8i16v
    0U,	// ADDVv8i8v
    48U,	// ADDWri
    0U,	// ADDWrr
    64U,	// ADDWrs
    80U,	// ADDWrx
    48U,	// ADDXri
    0U,	// ADDXrr
    64U,	// ADDXrs
    80U,	// ADDXrx
    256U,	// ADDXrx64
    16U,	// ADDv16i8
    0U,	// ADDv1i64
    16U,	// ADDv2i32
    16U,	// ADDv2i64
    16U,	// ADDv4i16
    16U,	// ADDv4i32
    16U,	// ADDv8i16
    16U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESMCrr
    96U,	// ANDSWri
    0U,	// ANDSWrr
    64U,	// ANDSWrs
    112U,	// ANDSXri
    0U,	// ANDSXrr
    64U,	// ANDSXrs
    96U,	// ANDWri
    0U,	// ANDWrr
    64U,	// ANDWrs
    112U,	// ANDXri
    0U,	// ANDXrr
    64U,	// ANDXrs
    16U,	// ANDv16i8
    16U,	// ANDv8i8
    0U,	// ASRVWr
    0U,	// ASRVXr
    0U,	// B
    640U,	// BFMWri
    640U,	// BFMXri
    0U,	// BICSWrr
    64U,	// BICSWrs
    0U,	// BICSXrr
    64U,	// BICSXrs
    0U,	// BICWrr
    64U,	// BICWrs
    0U,	// BICXrr
    64U,	// BICXrs
    16U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    16U,	// BICv8i8
    16U,	// BIFv16i8
    16U,	// BIFv8i8
    32U,	// BITv16i8
    32U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    0U,	// BR
    0U,	// BRK
    32U,	// BSLv16i8
    32U,	// BSLv8i8
    0U,	// Bcc
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    4608U,	// CCMNWi
    4608U,	// CCMNWr
    4608U,	// CCMNXi
    4608U,	// CCMNXr
    4608U,	// CCMPWi
    4608U,	// CCMPWr
    4608U,	// CCMPXi
    4608U,	// CCMPXr
    0U,	// CLREX
    0U,	// CLSWr
    0U,	// CLSXr
    0U,	// CLSv16i8
    0U,	// CLSv2i32
    0U,	// CLSv4i16
    0U,	// CLSv4i32
    0U,	// CLSv8i16
    0U,	// CLSv8i8
    0U,	// CLZWr
    0U,	// CLZXr
    0U,	// CLZv16i8
    0U,	// CLZv2i32
    0U,	// CLZv4i16
    0U,	// CLZv4i32
    0U,	// CLZv8i16
    0U,	// CLZv8i8
    16U,	// CMEQv16i8
    1U,	// CMEQv16i8rz
    0U,	// CMEQv1i64
    1U,	// CMEQv1i64rz
    16U,	// CMEQv2i32
    1U,	// CMEQv2i32rz
    16U,	// CMEQv2i64
    1U,	// CMEQv2i64rz
    16U,	// CMEQv4i16
    1U,	// CMEQv4i16rz
    16U,	// CMEQv4i32
    1U,	// CMEQv4i32rz
    16U,	// CMEQv8i16
    1U,	// CMEQv8i16rz
    16U,	// CMEQv8i8
    1U,	// CMEQv8i8rz
    16U,	// CMGEv16i8
    1U,	// CMGEv16i8rz
    0U,	// CMGEv1i64
    1U,	// CMGEv1i64rz
    16U,	// CMGEv2i32
    1U,	// CMGEv2i32rz
    16U,	// CMGEv2i64
    1U,	// CMGEv2i64rz
    16U,	// CMGEv4i16
    1U,	// CMGEv4i16rz
    16U,	// CMGEv4i32
    1U,	// CMGEv4i32rz
    16U,	// CMGEv8i16
    1U,	// CMGEv8i16rz
    16U,	// CMGEv8i8
    1U,	// CMGEv8i8rz
    16U,	// CMGTv16i8
    1U,	// CMGTv16i8rz
    0U,	// CMGTv1i64
    1U,	// CMGTv1i64rz
    16U,	// CMGTv2i32
    1U,	// CMGTv2i32rz
    16U,	// CMGTv2i64
    1U,	// CMGTv2i64rz
    16U,	// CMGTv4i16
    1U,	// CMGTv4i16rz
    16U,	// CMGTv4i32
    1U,	// CMGTv4i32rz
    16U,	// CMGTv8i16
    1U,	// CMGTv8i16rz
    16U,	// CMGTv8i8
    1U,	// CMGTv8i8rz
    16U,	// CMHIv16i8
    0U,	// CMHIv1i64
    16U,	// CMHIv2i32
    16U,	// CMHIv2i64
    16U,	// CMHIv4i16
    16U,	// CMHIv4i32
    16U,	// CMHIv8i16
    16U,	// CMHIv8i8
    16U,	// CMHSv16i8
    0U,	// CMHSv1i64
    16U,	// CMHSv2i32
    16U,	// CMHSv2i64
    16U,	// CMHSv4i16
    16U,	// CMHSv4i32
    16U,	// CMHSv8i16
    16U,	// CMHSv8i8
    1U,	// CMLEv16i8rz
    1U,	// CMLEv1i64rz
    1U,	// CMLEv2i32rz
    1U,	// CMLEv2i64rz
    1U,	// CMLEv4i16rz
    1U,	// CMLEv4i32rz
    1U,	// CMLEv8i16rz
    1U,	// CMLEv8i8rz
    1U,	// CMLTv16i8rz
    1U,	// CMLTv1i64rz
    1U,	// CMLTv2i32rz
    1U,	// CMLTv2i64rz
    1U,	// CMLTv4i16rz
    1U,	// CMLTv4i32rz
    1U,	// CMLTv8i16rz
    1U,	// CMLTv8i8rz
    16U,	// CMTSTv16i8
    0U,	// CMTSTv1i64
    16U,	// CMTSTv2i32
    16U,	// CMTSTv2i64
    16U,	// CMTSTv4i16
    16U,	// CMTSTv4i32
    16U,	// CMTSTv8i16
    16U,	// CMTSTv8i8
    0U,	// CNTv16i8
    0U,	// CNTv8i8
    1U,	// CPYi16
    1U,	// CPYi32
    1U,	// CPYi64
    1U,	// CPYi8
    0U,	// CRC32Brr
    0U,	// CRC32CBrr
    0U,	// CRC32CHrr
    0U,	// CRC32CWrr
    0U,	// CRC32CXrr
    0U,	// CRC32Hrr
    0U,	// CRC32Wrr
    0U,	// CRC32Xrr
    4608U,	// CSELWr
    4608U,	// CSELXr
    4608U,	// CSINCWr
    4608U,	// CSINCXr
    4608U,	// CSINVWr
    4608U,	// CSINVXr
    4608U,	// CSNEGWr
    4608U,	// CSNEGXr
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPv16i8gpr
    1U,	// DUPv16i8lane
    0U,	// DUPv2i32gpr
    1U,	// DUPv2i32lane
    0U,	// DUPv2i64gpr
    1U,	// DUPv2i64lane
    0U,	// DUPv4i16gpr
    1U,	// DUPv4i16lane
    0U,	// DUPv4i32gpr
    1U,	// DUPv4i32lane
    0U,	// DUPv8i16gpr
    1U,	// DUPv8i16lane
    0U,	// DUPv8i8gpr
    1U,	// DUPv8i8lane
    0U,	// EONWrr
    64U,	// EONWrs
    0U,	// EONXrr
    64U,	// EONXrs
    96U,	// EORWri
    0U,	// EORWrr
    64U,	// EORWrs
    112U,	// EORXri
    0U,	// EORXrr
    64U,	// EORXrs
    16U,	// EORv16i8
    16U,	// EORv8i8
    0U,	// ERET
    8704U,	// EXTRWrri
    8704U,	// EXTRXrri
    8720U,	// EXTv16i8
    8720U,	// EXTv8i8
    0U,	// F128CSEL
    0U,	// FABD32
    0U,	// FABD64
    16U,	// FABDv2f32
    16U,	// FABDv2f64
    16U,	// FABDv4f32
    0U,	// FABSDr
    0U,	// FABSSr
    0U,	// FABSv2f32
    0U,	// FABSv2f64
    0U,	// FABSv4f32
    0U,	// FACGE32
    0U,	// FACGE64
    16U,	// FACGEv2f32
    16U,	// FACGEv2f64
    16U,	// FACGEv4f32
    0U,	// FACGT32
    0U,	// FACGT64
    16U,	// FACGTv2f32
    16U,	// FACGTv2f64
    16U,	// FACGTv4f32
    0U,	// FADDDrr
    16U,	// FADDPv2f32
    16U,	// FADDPv2f64
    0U,	// FADDPv2i32p
    0U,	// FADDPv2i64p
    16U,	// FADDPv4f32
    0U,	// FADDSrr
    16U,	// FADDv2f32
    16U,	// FADDv2f64
    16U,	// FADDv4f32
    4608U,	// FCCMPDrr
    4608U,	// FCCMPEDrr
    4608U,	// FCCMPESrr
    4608U,	// FCCMPSrr
    0U,	// FCMEQ32
    0U,	// FCMEQ64
    2U,	// FCMEQv1i32rz
    2U,	// FCMEQv1i64rz
    16U,	// FCMEQv2f32
    16U,	// FCMEQv2f64
    2U,	// FCMEQv2i32rz
    2U,	// FCMEQv2i64rz
    16U,	// FCMEQv4f32
    2U,	// FCMEQv4i32rz
    0U,	// FCMGE32
    0U,	// FCMGE64
    2U,	// FCMGEv1i32rz
    2U,	// FCMGEv1i64rz
    16U,	// FCMGEv2f32
    16U,	// FCMGEv2f64
    2U,	// FCMGEv2i32rz
    2U,	// FCMGEv2i64rz
    16U,	// FCMGEv4f32
    2U,	// FCMGEv4i32rz
    0U,	// FCMGT32
    0U,	// FCMGT64
    2U,	// FCMGTv1i32rz
    2U,	// FCMGTv1i64rz
    16U,	// FCMGTv2f32
    16U,	// FCMGTv2f64
    2U,	// FCMGTv2i32rz
    2U,	// FCMGTv2i64rz
    16U,	// FCMGTv4f32
    2U,	// FCMGTv4i32rz
    2U,	// FCMLEv1i32rz
    2U,	// FCMLEv1i64rz
    2U,	// FCMLEv2i32rz
    2U,	// FCMLEv2i64rz
    2U,	// FCMLEv4i32rz
    2U,	// FCMLTv1i32rz
    2U,	// FCMLTv1i64rz
    2U,	// FCMLTv2i32rz
    2U,	// FCMLTv2i64rz
    2U,	// FCMLTv4i32rz
    0U,	// FCMPDri
    0U,	// FCMPDrr
    0U,	// FCMPEDri
    0U,	// FCMPEDrr
    0U,	// FCMPESri
    0U,	// FCMPESrr
    0U,	// FCMPSri
    0U,	// FCMPSrr
    4608U,	// FCSELDrrr
    4608U,	// FCSELSrrr
    0U,	// FCVTASUWDr
    0U,	// FCVTASUWSr
    0U,	// FCVTASUXDr
    0U,	// FCVTASUXSr
    0U,	// FCVTASv1i32
    0U,	// FCVTASv1i64
    0U,	// FCVTASv2f32
    0U,	// FCVTASv2f64
    0U,	// FCVTASv4f32
    0U,	// FCVTAUUWDr
    0U,	// FCVTAUUWSr
    0U,	// FCVTAUUXDr
    0U,	// FCVTAUUXSr
    0U,	// FCVTAUv1i32
    0U,	// FCVTAUv1i64
    0U,	// FCVTAUv2f32
    0U,	// FCVTAUv2f64
    0U,	// FCVTAUv4f32
    0U,	// FCVTDHr
    0U,	// FCVTDSr
    0U,	// FCVTHDr
    0U,	// FCVTHSr
    0U,	// FCVTLv2i32
    2U,	// FCVTLv4i16
    0U,	// FCVTLv4i32
    3U,	// FCVTLv8i16
    0U,	// FCVTMSUWDr
    0U,	// FCVTMSUWSr
    0U,	// FCVTMSUXDr
    0U,	// FCVTMSUXSr
    0U,	// FCVTMSv1i32
    0U,	// FCVTMSv1i64
    0U,	// FCVTMSv2f32
    0U,	// FCVTMSv2f64
    0U,	// FCVTMSv4f32
    0U,	// FCVTMUUWDr
    0U,	// FCVTMUUWSr
    0U,	// FCVTMUUXDr
    0U,	// FCVTMUUXSr
    0U,	// FCVTMUv1i32
    0U,	// FCVTMUv1i64
    0U,	// FCVTMUv2f32
    0U,	// FCVTMUv2f64
    0U,	// FCVTMUv4f32
    0U,	// FCVTNSUWDr
    0U,	// FCVTNSUWSr
    0U,	// FCVTNSUXDr
    0U,	// FCVTNSUXSr
    0U,	// FCVTNSv1i32
    0U,	// FCVTNSv1i64
    0U,	// FCVTNSv2f32
    0U,	// FCVTNSv2f64
    0U,	// FCVTNSv4f32
    0U,	// FCVTNUUWDr
    0U,	// FCVTNUUWSr
    0U,	// FCVTNUUXDr
    0U,	// FCVTNUUXSr
    0U,	// FCVTNUv1i32
    0U,	// FCVTNUv1i64
    0U,	// FCVTNUv2f32
    0U,	// FCVTNUv2f64
    0U,	// FCVTNUv4f32
    0U,	// FCVTNv2i32
    0U,	// FCVTNv4i16
    3U,	// FCVTNv4i32
    0U,	// FCVTNv8i16
    0U,	// FCVTPSUWDr
    0U,	// FCVTPSUWSr
    0U,	// FCVTPSUXDr
    0U,	// FCVTPSUXSr
    0U,	// FCVTPSv1i32
    0U,	// FCVTPSv1i64
    0U,	// FCVTPSv2f32
    0U,	// FCVTPSv2f64
    0U,	// FCVTPSv4f32
    0U,	// FCVTPUUWDr
    0U,	// FCVTPUUWSr
    0U,	// FCVTPUUXDr
    0U,	// FCVTPUUXSr
    0U,	// FCVTPUv1i32
    0U,	// FCVTPUv1i64
    0U,	// FCVTPUv2f32
    0U,	// FCVTPUv2f64
    0U,	// FCVTPUv4f32
    0U,	// FCVTSDr
    0U,	// FCVTSHr
    0U,	// FCVTXNv1i64
    0U,	// FCVTXNv2f32
    3U,	// FCVTXNv4f32
    0U,	// FCVTZSSWDri
    0U,	// FCVTZSSWSri
    0U,	// FCVTZSSXDri
    0U,	// FCVTZSSXSri
    0U,	// FCVTZSUWDr
    0U,	// FCVTZSUWSr
    0U,	// FCVTZSUXDr
    0U,	// FCVTZSUXSr
    0U,	// FCVTZS_IntSWDri
    0U,	// FCVTZS_IntSWSri
    0U,	// FCVTZS_IntSXDri
    0U,	// FCVTZS_IntSXSri
    0U,	// FCVTZS_IntUWDr
    0U,	// FCVTZS_IntUWSr
    0U,	// FCVTZS_IntUXDr
    0U,	// FCVTZS_IntUXSr
    0U,	// FCVTZS_Intv2f32
    0U,	// FCVTZS_Intv2f64
    0U,	// FCVTZS_Intv4f32
    0U,	// FCVTZSd
    0U,	// FCVTZSs
    0U,	// FCVTZSv1i32
    0U,	// FCVTZSv1i64
    0U,	// FCVTZSv2f32
    0U,	// FCVTZSv2f64
    0U,	// FCVTZSv2i32_shift
    0U,	// FCVTZSv2i64_shift
    0U,	// FCVTZSv4f32
    0U,	// FCVTZSv4i32_shift
    0U,	// FCVTZUSWDri
    0U,	// FCVTZUSWSri
    0U,	// FCVTZUSXDri
    0U,	// FCVTZUSXSri
    0U,	// FCVTZUUWDr
    0U,	// FCVTZUUWSr
    0U,	// FCVTZUUXDr
    0U,	// FCVTZUUXSr
    0U,	// FCVTZU_IntSWDri
    0U,	// FCVTZU_IntSWSri
    0U,	// FCVTZU_IntSXDri
    0U,	// FCVTZU_IntSXSri
    0U,	// FCVTZU_IntUWDr
    0U,	// FCVTZU_IntUWSr
    0U,	// FCVTZU_IntUXDr
    0U,	// FCVTZU_IntUXSr
    0U,	// FCVTZU_Intv2f32
    0U,	// FCVTZU_Intv2f64
    0U,	// FCVTZU_Intv4f32
    0U,	// FCVTZUd
    0U,	// FCVTZUs
    0U,	// FCVTZUv1i32
    0U,	// FCVTZUv1i64
    0U,	// FCVTZUv2f32
    0U,	// FCVTZUv2f64
    0U,	// FCVTZUv2i32_shift
    0U,	// FCVTZUv2i64_shift
    0U,	// FCVTZUv4f32
    0U,	// FCVTZUv4i32_shift
    0U,	// FDIVDrr
    0U,	// FDIVSrr
    16U,	// FDIVv2f32
    16U,	// FDIVv2f64
    16U,	// FDIVv4f32
    8704U,	// FMADDDrrr
    8704U,	// FMADDSrrr
    0U,	// FMAXDrr
    0U,	// FMAXNMDrr
    16U,	// FMAXNMPv2f32
    16U,	// FMAXNMPv2f64
    0U,	// FMAXNMPv2i32p
    0U,	// FMAXNMPv2i64p
    16U,	// FMAXNMPv4f32
    0U,	// FMAXNMSrr
    0U,	// FMAXNMVv4i32v
    16U,	// FMAXNMv2f32
    16U,	// FMAXNMv2f64
    16U,	// FMAXNMv4f32
    16U,	// FMAXPv2f32
    16U,	// FMAXPv2f64
    0U,	// FMAXPv2i32p
    0U,	// FMAXPv2i64p
    16U,	// FMAXPv4f32
    0U,	// FMAXSrr
    0U,	// FMAXVv4i32v
    16U,	// FMAXv2f32
    16U,	// FMAXv2f64
    16U,	// FMAXv4f32
    0U,	// FMINDrr
    0U,	// FMINNMDrr
    16U,	// FMINNMPv2f32
    16U,	// FMINNMPv2f64
    0U,	// FMINNMPv2i32p
    0U,	// FMINNMPv2i64p
    16U,	// FMINNMPv4f32
    0U,	// FMINNMSrr
    0U,	// FMINNMVv4i32v
    16U,	// FMINNMv2f32
    16U,	// FMINNMv2f64
    16U,	// FMINNMv4f32
    16U,	// FMINPv2f32
    16U,	// FMINPv2f64
    0U,	// FMINPv2i32p
    0U,	// FMINPv2i64p
    16U,	// FMINPv4f32
    0U,	// FMINSrr
    0U,	// FMINVv4i32v
    16U,	// FMINv2f32
    16U,	// FMINv2f64
    16U,	// FMINv4f32
    800U,	// FMLAv1i32_indexed
    800U,	// FMLAv1i64_indexed
    32U,	// FMLAv2f32
    32U,	// FMLAv2f64
    800U,	// FMLAv2i32_indexed
    800U,	// FMLAv2i64_indexed
    32U,	// FMLAv4f32
    800U,	// FMLAv4i32_indexed
    800U,	// FMLSv1i32_indexed
    800U,	// FMLSv1i64_indexed
    32U,	// FMLSv2f32
    32U,	// FMLSv2f64
    800U,	// FMLSv2i32_indexed
    800U,	// FMLSv2i64_indexed
    32U,	// FMLSv4f32
    800U,	// FMLSv4i32_indexed
    0U,	// FMOVD0
    1U,	// FMOVDXHighr
    0U,	// FMOVDXr
    0U,	// FMOVDi
    0U,	// FMOVDr
    0U,	// FMOVS0
    0U,	// FMOVSWr
    0U,	// FMOVSi
    0U,	// FMOVSr
    0U,	// FMOVWSr
    0U,	// FMOVXDHighr
    0U,	// FMOVXDr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f32_ns
    8704U,	// FMSUBDrrr
    8704U,	// FMSUBSrrr
    0U,	// FMULDrr
    0U,	// FMULSrr
    0U,	// FMULX32
    0U,	// FMULX64
    1040U,	// FMULXv1i32_indexed
    1040U,	// FMULXv1i64_indexed
    16U,	// FMULXv2f32
    16U,	// FMULXv2f64
    1040U,	// FMULXv2i32_indexed
    1040U,	// FMULXv2i64_indexed
    16U,	// FMULXv4f32
    1040U,	// FMULXv4i32_indexed
    1040U,	// FMULv1i32_indexed
    1040U,	// FMULv1i64_indexed
    16U,	// FMULv2f32
    16U,	// FMULv2f64
    1040U,	// FMULv2i32_indexed
    1040U,	// FMULv2i64_indexed
    16U,	// FMULv4f32
    1040U,	// FMULv4i32_indexed
    0U,	// FNEGDr
    0U,	// FNEGSr
    0U,	// FNEGv2f32
    0U,	// FNEGv2f64
    0U,	// FNEGv4f32
    8704U,	// FNMADDDrrr
    8704U,	// FNMADDSrrr
    8704U,	// FNMSUBDrrr
    8704U,	// FNMSUBSrrr
    0U,	// FNMULDrr
    0U,	// FNMULSrr
    0U,	// FRECPEv1i32
    0U,	// FRECPEv1i64
    0U,	// FRECPEv2f32
    0U,	// FRECPEv2f64
    0U,	// FRECPEv4f32
    0U,	// FRECPS32
    0U,	// FRECPS64
    16U,	// FRECPSv2f32
    16U,	// FRECPSv2f64
    16U,	// FRECPSv4f32
    0U,	// FRECPXv1i32
    0U,	// FRECPXv1i64
    0U,	// FRINTADr
    0U,	// FRINTASr
    0U,	// FRINTAv2f32
    0U,	// FRINTAv2f64
    0U,	// FRINTAv4f32
    0U,	// FRINTIDr
    0U,	// FRINTISr
    0U,	// FRINTIv2f32
    0U,	// FRINTIv2f64
    0U,	// FRINTIv4f32
    0U,	// FRINTMDr
    0U,	// FRINTMSr
    0U,	// FRINTMv2f32
    0U,	// FRINTMv2f64
    0U,	// FRINTMv4f32
    0U,	// FRINTNDr
    0U,	// FRINTNSr
    0U,	// FRINTNv2f32
    0U,	// FRINTNv2f64
    0U,	// FRINTNv4f32
    0U,	// FRINTPDr
    0U,	// FRINTPSr
    0U,	// FRINTPv2f32
    0U,	// FRINTPv2f64
    0U,	// FRINTPv4f32
    0U,	// FRINTXDr
    0U,	// FRINTXSr
    0U,	// FRINTXv2f32
    0U,	// FRINTXv2f64
    0U,	// FRINTXv4f32
    0U,	// FRINTZDr
    0U,	// FRINTZSr
    0U,	// FRINTZv2f32
    0U,	// FRINTZv2f64
    0U,	// FRINTZv4f32
    0U,	// FRSQRTEv1i32
    0U,	// FRSQRTEv1i64
    0U,	// FRSQRTEv2f32
    0U,	// FRSQRTEv2f64
    0U,	// FRSQRTEv4f32
    0U,	// FRSQRTS32
    0U,	// FRSQRTS64
    16U,	// FRSQRTSv2f32
    16U,	// FRSQRTSv2f64
    16U,	// FRSQRTSv4f32
    0U,	// FSQRTDr
    0U,	// FSQRTSr
    0U,	// FSQRTv2f32
    0U,	// FSQRTv2f64
    0U,	// FSQRTv4f32
    0U,	// FSUBDrr
    0U,	// FSUBSrr
    16U,	// FSUBv2f32
    16U,	// FSUBv2f64
    16U,	// FSUBv4f32
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INSvi16gpr
    0U,	// INSvi16lane
    0U,	// INSvi32gpr
    0U,	// INSvi32lane
    0U,	// INSvi64gpr
    0U,	// INSvi64lane
    0U,	// INSvi8gpr
    0U,	// INSvi8lane
    0U,	// ISB
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    4U,	// LDARB
    4U,	// LDARH
    4U,	// LDARW
    4U,	// LDARX
    1284U,	// LDAXPW
    1284U,	// LDAXPX
    4U,	// LDAXRB
    4U,	// LDAXRH
    4U,	// LDAXRW
    4U,	// LDAXRX
    4U,	// LDLARB
    4U,	// LDLARH
    4U,	// LDLARW
    4U,	// LDLARX
    12804U,	// LDNPDi
    16900U,	// LDNPQi
    20996U,	// LDNPSi
    20996U,	// LDNPWi
    12804U,	// LDNPXi
    12804U,	// LDPDi
    26244U,	// LDPDpost
    156292U,	// LDPDpre
    16900U,	// LDPQi
    30340U,	// LDPQpost
    160388U,	// LDPQpre
    20996U,	// LDPSWi
    34436U,	// LDPSWpost
    164484U,	// LDPSWpre
    20996U,	// LDPSi
    34436U,	// LDPSpost
    164484U,	// LDPSpre
    20996U,	// LDPWi
    34436U,	// LDPWpost
    164484U,	// LDPWpre
    12804U,	// LDPXi
    26244U,	// LDPXpost
    156292U,	// LDPXpre
    5U,	// LDRBBpost
    1920U,	// LDRBBpre
    37376U,	// LDRBBroW
    41472U,	// LDRBBroX
    144U,	// LDRBBui
    5U,	// LDRBpost
    1920U,	// LDRBpre
    37376U,	// LDRBroW
    41472U,	// LDRBroX
    144U,	// LDRBui
    0U,	// LDRDl
    5U,	// LDRDpost
    1920U,	// LDRDpre
    45568U,	// LDRDroW
    49664U,	// LDRDroX
    160U,	// LDRDui
    5U,	// LDRHHpost
    1920U,	// LDRHHpre
    53760U,	// LDRHHroW
    57856U,	// LDRHHroX
    176U,	// LDRHHui
    5U,	// LDRHpost
    1920U,	// LDRHpre
    53760U,	// LDRHroW
    57856U,	// LDRHroX
    176U,	// LDRHui
    0U,	// LDRQl
    5U,	// LDRQpost
    1920U,	// LDRQpre
    61952U,	// LDRQroW
    66048U,	// LDRQroX
    192U,	// LDRQui
    5U,	// LDRSBWpost
    1920U,	// LDRSBWpre
    37376U,	// LDRSBWroW
    41472U,	// LDRSBWroX
    144U,	// LDRSBWui
    5U,	// LDRSBXpost
    1920U,	// LDRSBXpre
    37376U,	// LDRSBXroW
    41472U,	// LDRSBXroX
    144U,	// LDRSBXui
    5U,	// LDRSHWpost
    1920U,	// LDRSHWpre
    53760U,	// LDRSHWroW
    57856U,	// LDRSHWroX
    176U,	// LDRSHWui
    5U,	// LDRSHXpost
    1920U,	// LDRSHXpre
    53760U,	// LDRSHXroW
    57856U,	// LDRSHXroX
    176U,	// LDRSHXui
    0U,	// LDRSWl
    5U,	// LDRSWpost
    1920U,	// LDRSWpre
    70144U,	// LDRSWroW
    74240U,	// LDRSWroX
    208U,	// LDRSWui
    0U,	// LDRSl
    5U,	// LDRSpost
    1920U,	// LDRSpre
    70144U,	// LDRSroW
    74240U,	// LDRSroX
    208U,	// LDRSui
    0U,	// LDRWl
    5U,	// LDRWpost
    1920U,	// LDRWpre
    70144U,	// LDRWroW
    74240U,	// LDRWroX
    208U,	// LDRWui
    0U,	// LDRXl
    5U,	// LDRXpost
    1920U,	// LDRXpre
    45568U,	// LDRXroW
    49664U,	// LDRXroX
    160U,	// LDRXui
    1280U,	// LDTRBi
    1280U,	// LDTRHi
    1280U,	// LDTRSBWi
    1280U,	// LDTRSBXi
    1280U,	// LDTRSHWi
    1280U,	// LDTRSHXi
    1280U,	// LDTRSWi
    1280U,	// LDTRWi
    1280U,	// LDTRXi
    1280U,	// LDURBBi
    1280U,	// LDURBi
    1280U,	// LDURDi
    1280U,	// LDURHHi
    1280U,	// LDURHi
    1280U,	// LDURQi
    1280U,	// LDURSBWi
    1280U,	// LDURSBXi
    1280U,	// LDURSHWi
    1280U,	// LDURSHXi
    1280U,	// LDURSWi
    1280U,	// LDURSi
    1280U,	// LDURWi
    1280U,	// LDURXi
    1284U,	// LDXPW
    1284U,	// LDXPX
    4U,	// LDXRB
    4U,	// LDXRH
    4U,	// LDXRW
    4U,	// LDXRX
    0U,	// LOADgot
    0U,	// LSLVWr
    0U,	// LSLVXr
    0U,	// LSRVWr
    0U,	// LSRVXr
    8704U,	// MADDWrrr
    8704U,	// MADDXrrr
    32U,	// MLAv16i8
    32U,	// MLAv2i32
    800U,	// MLAv2i32_indexed
    32U,	// MLAv4i16
    800U,	// MLAv4i16_indexed
    32U,	// MLAv4i32
    800U,	// MLAv4i32_indexed
    32U,	// MLAv8i16
    800U,	// MLAv8i16_indexed
    32U,	// MLAv8i8
    32U,	// MLSv16i8
    32U,	// MLSv2i32
    800U,	// MLSv2i32_indexed
    32U,	// MLSv4i16
    800U,	// MLSv4i16_indexed
    32U,	// MLSv4i32
    800U,	// MLSv4i32_indexed
    32U,	// MLSv8i16
    800U,	// MLSv8i16_indexed
    32U,	// MLSv8i8
    0U,	// MOVID
    0U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    5U,	// MOVIv2i32
    5U,	// MOVIv2s_msl
    5U,	// MOVIv4i16
    5U,	// MOVIv4i32
    5U,	// MOVIv4s_msl
    0U,	// MOVIv8b_ns
    5U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    5U,	// MOVNWi
    5U,	// MOVNXi
    5U,	// MOVZWi
    5U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstate
    8704U,	// MSUBWrrr
    8704U,	// MSUBXrrr
    16U,	// MULv16i8
    16U,	// MULv2i32
    1040U,	// MULv2i32_indexed
    16U,	// MULv4i16
    1040U,	// MULv4i16_indexed
    16U,	// MULv4i32
    1040U,	// MULv4i32_indexed
    16U,	// MULv8i16
    1040U,	// MULv8i16_indexed
    16U,	// MULv8i8
    5U,	// MVNIv2i32
    5U,	// MVNIv2s_msl
    5U,	// MVNIv4i16
    5U,	// MVNIv4i32
    5U,	// MVNIv4s_msl
    5U,	// MVNIv8i16
    0U,	// NEGv16i8
    0U,	// NEGv1i64
    0U,	// NEGv2i32
    0U,	// NEGv2i64
    0U,	// NEGv4i16
    0U,	// NEGv4i32
    0U,	// NEGv8i16
    0U,	// NEGv8i8
    0U,	// NOTv16i8
    0U,	// NOTv8i8
    0U,	// ORNWrr
    64U,	// ORNWrs
    0U,	// ORNXrr
    64U,	// ORNXrs
    16U,	// ORNv16i8
    16U,	// ORNv8i8
    96U,	// ORRWri
    0U,	// ORRWrr
    64U,	// ORRWrs
    112U,	// ORRXri
    0U,	// ORRXrr
    64U,	// ORRXrs
    16U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    16U,	// ORRv8i8
    16U,	// PMULLv16i8
    16U,	// PMULLv1i64
    16U,	// PMULLv2i64
    16U,	// PMULLv8i8
    16U,	// PMULv16i8
    16U,	// PMULv8i8
    0U,	// PRFMl
    45568U,	// PRFMroW
    49664U,	// PRFMroX
    160U,	// PRFMui
    1280U,	// PRFUMi
    16U,	// RADDHNv2i64_v2i32
    32U,	// RADDHNv2i64_v4i32
    16U,	// RADDHNv4i32_v4i16
    32U,	// RADDHNv4i32_v8i16
    32U,	// RADDHNv8i16_v16i8
    16U,	// RADDHNv8i16_v8i8
    0U,	// RBITWr
    0U,	// RBITXr
    0U,	// RBITv16i8
    0U,	// RBITv8i8
    0U,	// RET
    0U,	// RET_ReallyLR
    0U,	// REV16Wr
    0U,	// REV16Xr
    0U,	// REV16v16i8
    0U,	// REV16v8i8
    0U,	// REV32Xr
    0U,	// REV32v16i8
    0U,	// REV32v4i16
    0U,	// REV32v8i16
    0U,	// REV32v8i8
    0U,	// REV64v16i8
    0U,	// REV64v2i32
    0U,	// REV64v4i16
    0U,	// REV64v4i32
    0U,	// REV64v8i16
    0U,	// REV64v8i8
    0U,	// REVWr
    0U,	// REVXr
    0U,	// RORVWr
    0U,	// RORVXr
    128U,	// RSHRNv16i8_shift
    0U,	// RSHRNv2i32_shift
    0U,	// RSHRNv4i16_shift
    128U,	// RSHRNv4i32_shift
    128U,	// RSHRNv8i16_shift
    0U,	// RSHRNv8i8_shift
    16U,	// RSUBHNv2i64_v2i32
    32U,	// RSUBHNv2i64_v4i32
    16U,	// RSUBHNv4i32_v4i16
    32U,	// RSUBHNv4i32_v8i16
    32U,	// RSUBHNv8i16_v16i8
    16U,	// RSUBHNv8i16_v8i8
    32U,	// SABALv16i8_v8i16
    32U,	// SABALv2i32_v2i64
    32U,	// SABALv4i16_v4i32
    32U,	// SABALv4i32_v2i64
    32U,	// SABALv8i16_v4i32
    32U,	// SABALv8i8_v8i16
    32U,	// SABAv16i8
    32U,	// SABAv2i32
    32U,	// SABAv4i16
    32U,	// SABAv4i32
    32U,	// SABAv8i16
    32U,	// SABAv8i8
    16U,	// SABDLv16i8_v8i16
    16U,	// SABDLv2i32_v2i64
    16U,	// SABDLv4i16_v4i32
    16U,	// SABDLv4i32_v2i64
    16U,	// SABDLv8i16_v4i32
    16U,	// SABDLv8i8_v8i16
    16U,	// SABDv16i8
    16U,	// SABDv2i32
    16U,	// SABDv4i16
    16U,	// SABDv4i32
    16U,	// SABDv8i16
    16U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    0U,	// SADALPv2i32_v1i64
    0U,	// SADALPv4i16_v2i32
    0U,	// SADALPv4i32_v2i64
    0U,	// SADALPv8i16_v4i32
    0U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    0U,	// SADDLPv2i32_v1i64
    0U,	// SADDLPv4i16_v2i32
    0U,	// SADDLPv4i32_v2i64
    0U,	// SADDLPv8i16_v4i32
    0U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    0U,	// SADDLVv4i16v
    0U,	// SADDLVv4i32v
    0U,	// SADDLVv8i16v
    0U,	// SADDLVv8i8v
    16U,	// SADDLv16i8_v8i16
    16U,	// SADDLv2i32_v2i64
    16U,	// SADDLv4i16_v4i32
    16U,	// SADDLv4i32_v2i64
    16U,	// SADDLv8i16_v4i32
    16U,	// SADDLv8i8_v8i16
    16U,	// SADDWv16i8_v8i16
    16U,	// SADDWv2i32_v2i64
    16U,	// SADDWv4i16_v4i32
    16U,	// SADDWv4i32_v2i64
    16U,	// SADDWv8i16_v4i32
    16U,	// SADDWv8i8_v8i16
    0U,	// SBCSWr
    0U,	// SBCSXr
    0U,	// SBCWr
    0U,	// SBCXr
    8704U,	// SBFMWri
    8704U,	// SBFMXri
    0U,	// SCVTFSWDri
    0U,	// SCVTFSWSri
    0U,	// SCVTFSXDri
    0U,	// SCVTFSXSri
    0U,	// SCVTFUWDri
    0U,	// SCVTFUWSri
    0U,	// SCVTFUXDri
    0U,	// SCVTFUXSri
    0U,	// SCVTFd
    0U,	// SCVTFs
    0U,	// SCVTFv1i32
    0U,	// SCVTFv1i64
    0U,	// SCVTFv2f32
    0U,	// SCVTFv2f64
    0U,	// SCVTFv2i32_shift
    0U,	// SCVTFv2i64_shift
    0U,	// SCVTFv4f32
    0U,	// SCVTFv4i32_shift
    0U,	// SDIVWr
    0U,	// SDIVXr
    0U,	// SDIV_IntWr
    0U,	// SDIV_IntXr
    32U,	// SHA1Crrr
    0U,	// SHA1Hrr
    32U,	// SHA1Mrrr
    32U,	// SHA1Prrr
    32U,	// SHA1SU0rrr
    0U,	// SHA1SU1rr
    32U,	// SHA256H2rrr
    32U,	// SHA256Hrrr
    0U,	// SHA256SU0rr
    32U,	// SHA256SU1rrr
    16U,	// SHADDv16i8
    16U,	// SHADDv2i32
    16U,	// SHADDv4i16
    16U,	// SHADDv4i32
    16U,	// SHADDv8i16
    16U,	// SHADDv8i8
    6U,	// SHLLv16i8
    6U,	// SHLLv2i32
    7U,	// SHLLv4i16
    6U,	// SHLLv4i32
    7U,	// SHLLv8i16
    6U,	// SHLLv8i8
    0U,	// SHLd
    0U,	// SHLv16i8_shift
    0U,	// SHLv2i32_shift
    0U,	// SHLv2i64_shift
    0U,	// SHLv4i16_shift
    0U,	// SHLv4i32_shift
    0U,	// SHLv8i16_shift
    0U,	// SHLv8i8_shift
    128U,	// SHRNv16i8_shift
    0U,	// SHRNv2i32_shift
    0U,	// SHRNv4i16_shift
    128U,	// SHRNv4i32_shift
    128U,	// SHRNv8i16_shift
    0U,	// SHRNv8i8_shift
    16U,	// SHSUBv16i8
    16U,	// SHSUBv2i32
    16U,	// SHSUBv4i16
    16U,	// SHSUBv4i32
    16U,	// SHSUBv8i16
    16U,	// SHSUBv8i8
    128U,	// SLId
    128U,	// SLIv16i8_shift
    128U,	// SLIv2i32_shift
    128U,	// SLIv2i64_shift
    128U,	// SLIv4i16_shift
    128U,	// SLIv4i32_shift
    128U,	// SLIv8i16_shift
    128U,	// SLIv8i8_shift
    8704U,	// SMADDLrrr
    16U,	// SMAXPv16i8
    16U,	// SMAXPv2i32
    16U,	// SMAXPv4i16
    16U,	// SMAXPv4i32
    16U,	// SMAXPv8i16
    16U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    0U,	// SMAXVv4i16v
    0U,	// SMAXVv4i32v
    0U,	// SMAXVv8i16v
    0U,	// SMAXVv8i8v
    16U,	// SMAXv16i8
    16U,	// SMAXv2i32
    16U,	// SMAXv4i16
    16U,	// SMAXv4i32
    16U,	// SMAXv8i16
    16U,	// SMAXv8i8
    0U,	// SMC
    16U,	// SMINPv16i8
    16U,	// SMINPv2i32
    16U,	// SMINPv4i16
    16U,	// SMINPv4i32
    16U,	// SMINPv8i16
    16U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    0U,	// SMINVv4i16v
    0U,	// SMINVv4i32v
    0U,	// SMINVv8i16v
    0U,	// SMINVv8i8v
    16U,	// SMINv16i8
    16U,	// SMINv2i32
    16U,	// SMINv4i16
    16U,	// SMINv4i32
    16U,	// SMINv8i16
    16U,	// SMINv8i8
    32U,	// SMLALv16i8_v8i16
    800U,	// SMLALv2i32_indexed
    32U,	// SMLALv2i32_v2i64
    800U,	// SMLALv4i16_indexed
    32U,	// SMLALv4i16_v4i32
    800U,	// SMLALv4i32_indexed
    32U,	// SMLALv4i32_v2i64
    800U,	// SMLALv8i16_indexed
    32U,	// SMLALv8i16_v4i32
    32U,	// SMLALv8i8_v8i16
    32U,	// SMLSLv16i8_v8i16
    800U,	// SMLSLv2i32_indexed
    32U,	// SMLSLv2i32_v2i64
    800U,	// SMLSLv4i16_indexed
    32U,	// SMLSLv4i16_v4i32
    800U,	// SMLSLv4i32_indexed
    32U,	// SMLSLv4i32_v2i64
    800U,	// SMLSLv8i16_indexed
    32U,	// SMLSLv8i16_v4i32
    32U,	// SMLSLv8i8_v8i16
    1U,	// SMOVvi16to32
    1U,	// SMOVvi16to64
    1U,	// SMOVvi32to64
    1U,	// SMOVvi8to32
    1U,	// SMOVvi8to64
    8704U,	// SMSUBLrrr
    0U,	// SMULHrr
    16U,	// SMULLv16i8_v8i16
    1040U,	// SMULLv2i32_indexed
    16U,	// SMULLv2i32_v2i64
    1040U,	// SMULLv4i16_indexed
    16U,	// SMULLv4i16_v4i32
    1040U,	// SMULLv4i32_indexed
    16U,	// SMULLv4i32_v2i64
    1040U,	// SMULLv8i16_indexed
    16U,	// SMULLv8i16_v4i32
    16U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    0U,	// SQABSv1i16
    0U,	// SQABSv1i32
    0U,	// SQABSv1i64
    0U,	// SQABSv1i8
    0U,	// SQABSv2i32
    0U,	// SQABSv2i64
    0U,	// SQABSv4i16
    0U,	// SQABSv4i32
    0U,	// SQABSv8i16
    0U,	// SQABSv8i8
    16U,	// SQADDv16i8
    0U,	// SQADDv1i16
    0U,	// SQADDv1i32
    0U,	// SQADDv1i64
    0U,	// SQADDv1i8
    16U,	// SQADDv2i32
    16U,	// SQADDv2i64
    16U,	// SQADDv4i16
    16U,	// SQADDv4i32
    16U,	// SQADDv8i16
    16U,	// SQADDv8i8
    128U,	// SQDMLALi16
    128U,	// SQDMLALi32
    800U,	// SQDMLALv1i32_indexed
    800U,	// SQDMLALv1i64_indexed
    800U,	// SQDMLALv2i32_indexed
    32U,	// SQDMLALv2i32_v2i64
    800U,	// SQDMLALv4i16_indexed
    32U,	// SQDMLALv4i16_v4i32
    800U,	// SQDMLALv4i32_indexed
    32U,	// SQDMLALv4i32_v2i64
    800U,	// SQDMLALv8i16_indexed
    32U,	// SQDMLALv8i16_v4i32
    128U,	// SQDMLSLi16
    128U,	// SQDMLSLi32
    800U,	// SQDMLSLv1i32_indexed
    800U,	// SQDMLSLv1i64_indexed
    800U,	// SQDMLSLv2i32_indexed
    32U,	// SQDMLSLv2i32_v2i64
    800U,	// SQDMLSLv4i16_indexed
    32U,	// SQDMLSLv4i16_v4i32
    800U,	// SQDMLSLv4i32_indexed
    32U,	// SQDMLSLv4i32_v2i64
    800U,	// SQDMLSLv8i16_indexed
    32U,	// SQDMLSLv8i16_v4i32
    0U,	// SQDMULHv1i16
    1040U,	// SQDMULHv1i16_indexed
    0U,	// SQDMULHv1i32
    1040U,	// SQDMULHv1i32_indexed
    16U,	// SQDMULHv2i32
    1040U,	// SQDMULHv2i32_indexed
    16U,	// SQDMULHv4i16
    1040U,	// SQDMULHv4i16_indexed
    16U,	// SQDMULHv4i32
    1040U,	// SQDMULHv4i32_indexed
    16U,	// SQDMULHv8i16
    1040U,	// SQDMULHv8i16_indexed
    0U,	// SQDMULLi16
    0U,	// SQDMULLi32
    1040U,	// SQDMULLv1i32_indexed
    1040U,	// SQDMULLv1i64_indexed
    1040U,	// SQDMULLv2i32_indexed
    16U,	// SQDMULLv2i32_v2i64
    1040U,	// SQDMULLv4i16_indexed
    16U,	// SQDMULLv4i16_v4i32
    1040U,	// SQDMULLv4i32_indexed
    16U,	// SQDMULLv4i32_v2i64
    1040U,	// SQDMULLv8i16_indexed
    16U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    0U,	// SQNEGv1i16
    0U,	// SQNEGv1i32
    0U,	// SQNEGv1i64
    0U,	// SQNEGv1i8
    0U,	// SQNEGv2i32
    0U,	// SQNEGv2i64
    0U,	// SQNEGv4i16
    0U,	// SQNEGv4i32
    0U,	// SQNEGv8i16
    0U,	// SQNEGv8i8
    800U,	// SQRDMLAHi16_indexed
    800U,	// SQRDMLAHi32_indexed
    128U,	// SQRDMLAHv1i16
    128U,	// SQRDMLAHv1i32
    32U,	// SQRDMLAHv2i32
    800U,	// SQRDMLAHv2i32_indexed
    32U,	// SQRDMLAHv4i16
    800U,	// SQRDMLAHv4i16_indexed
    32U,	// SQRDMLAHv4i32
    800U,	// SQRDMLAHv4i32_indexed
    32U,	// SQRDMLAHv8i16
    800U,	// SQRDMLAHv8i16_indexed
    800U,	// SQRDMLSHi16_indexed
    800U,	// SQRDMLSHi32_indexed
    128U,	// SQRDMLSHv1i16
    128U,	// SQRDMLSHv1i32
    32U,	// SQRDMLSHv2i32
    800U,	// SQRDMLSHv2i32_indexed
    32U,	// SQRDMLSHv4i16
    800U,	// SQRDMLSHv4i16_indexed
    32U,	// SQRDMLSHv4i32
    800U,	// SQRDMLSHv4i32_indexed
    32U,	// SQRDMLSHv8i16
    800U,	// SQRDMLSHv8i16_indexed
    0U,	// SQRDMULHv1i16
    1040U,	// SQRDMULHv1i16_indexed
    0U,	// SQRDMULHv1i32
    1040U,	// SQRDMULHv1i32_indexed
    16U,	// SQRDMULHv2i32
    1040U,	// SQRDMULHv2i32_indexed
    16U,	// SQRDMULHv4i16
    1040U,	// SQRDMULHv4i16_indexed
    16U,	// SQRDMULHv4i32
    1040U,	// SQRDMULHv4i32_indexed
    16U,	// SQRDMULHv8i16
    1040U,	// SQRDMULHv8i16_indexed
    16U,	// SQRSHLv16i8
    0U,	// SQRSHLv1i16
    0U,	// SQRSHLv1i32
    0U,	// SQRSHLv1i64
    0U,	// SQRSHLv1i8
    16U,	// SQRSHLv2i32
    16U,	// SQRSHLv2i64
    16U,	// SQRSHLv4i16
    16U,	// SQRSHLv4i32
    16U,	// SQRSHLv8i16
    16U,	// SQRSHLv8i8
    0U,	// SQRSHRNb
    0U,	// SQRSHRNh
    0U,	// SQRSHRNs
    128U,	// SQRSHRNv16i8_shift
    0U,	// SQRSHRNv2i32_shift
    0U,	// SQRSHRNv4i16_shift
    128U,	// SQRSHRNv4i32_shift
    128U,	// SQRSHRNv8i16_shift
    0U,	// SQRSHRNv8i8_shift
    0U,	// SQRSHRUNb
    0U,	// SQRSHRUNh
    0U,	// SQRSHRUNs
    128U,	// SQRSHRUNv16i8_shift
    0U,	// SQRSHRUNv2i32_shift
    0U,	// SQRSHRUNv4i16_shift
    128U,	// SQRSHRUNv4i32_shift
    128U,	// SQRSHRUNv8i16_shift
    0U,	// SQRSHRUNv8i8_shift
    0U,	// SQSHLUb
    0U,	// SQSHLUd
    0U,	// SQSHLUh
    0U,	// SQSHLUs
    0U,	// SQSHLUv16i8_shift
    0U,	// SQSHLUv2i32_shift
    0U,	// SQSHLUv2i64_shift
    0U,	// SQSHLUv4i16_shift
    0U,	// SQSHLUv4i32_shift
    0U,	// SQSHLUv8i16_shift
    0U,	// SQSHLUv8i8_shift
    0U,	// SQSHLb
    0U,	// SQSHLd
    0U,	// SQSHLh
    0U,	// SQSHLs
    16U,	// SQSHLv16i8
    0U,	// SQSHLv16i8_shift
    0U,	// SQSHLv1i16
    0U,	// SQSHLv1i32
    0U,	// SQSHLv1i64
    0U,	// SQSHLv1i8
    16U,	// SQSHLv2i32
    0U,	// SQSHLv2i32_shift
    16U,	// SQSHLv2i64
    0U,	// SQSHLv2i64_shift
    16U,	// SQSHLv4i16
    0U,	// SQSHLv4i16_shift
    16U,	// SQSHLv4i32
    0U,	// SQSHLv4i32_shift
    16U,	// SQSHLv8i16
    0U,	// SQSHLv8i16_shift
    16U,	// SQSHLv8i8
    0U,	// SQSHLv8i8_shift
    0U,	// SQSHRNb
    0U,	// SQSHRNh
    0U,	// SQSHRNs
    128U,	// SQSHRNv16i8_shift
    0U,	// SQSHRNv2i32_shift
    0U,	// SQSHRNv4i16_shift
    128U,	// SQSHRNv4i32_shift
    128U,	// SQSHRNv8i16_shift
    0U,	// SQSHRNv8i8_shift
    0U,	// SQSHRUNb
    0U,	// SQSHRUNh
    0U,	// SQSHRUNs
    128U,	// SQSHRUNv16i8_shift
    0U,	// SQSHRUNv2i32_shift
    0U,	// SQSHRUNv4i16_shift
    128U,	// SQSHRUNv4i32_shift
    128U,	// SQSHRUNv8i16_shift
    0U,	// SQSHRUNv8i8_shift
    16U,	// SQSUBv16i8
    0U,	// SQSUBv1i16
    0U,	// SQSUBv1i32
    0U,	// SQSUBv1i64
    0U,	// SQSUBv1i8
    16U,	// SQSUBv2i32
    16U,	// SQSUBv2i64
    16U,	// SQSUBv4i16
    16U,	// SQSUBv4i32
    16U,	// SQSUBv8i16
    16U,	// SQSUBv8i8
    0U,	// SQXTNv16i8
    0U,	// SQXTNv1i16
    0U,	// SQXTNv1i32
    0U,	// SQXTNv1i8
    0U,	// SQXTNv2i32
    0U,	// SQXTNv4i16
    0U,	// SQXTNv4i32
    0U,	// SQXTNv8i16
    0U,	// SQXTNv8i8
    0U,	// SQXTUNv16i8
    0U,	// SQXTUNv1i16
    0U,	// SQXTUNv1i32
    0U,	// SQXTUNv1i8
    0U,	// SQXTUNv2i32
    0U,	// SQXTUNv4i16
    0U,	// SQXTUNv4i32
    0U,	// SQXTUNv8i16
    0U,	// SQXTUNv8i8
    16U,	// SRHADDv16i8
    16U,	// SRHADDv2i32
    16U,	// SRHADDv4i16
    16U,	// SRHADDv4i32
    16U,	// SRHADDv8i16
    16U,	// SRHADDv8i8
    128U,	// SRId
    128U,	// SRIv16i8_shift
    128U,	// SRIv2i32_shift
    128U,	// SRIv2i64_shift
    128U,	// SRIv4i16_shift
    128U,	// SRIv4i32_shift
    128U,	// SRIv8i16_shift
    128U,	// SRIv8i8_shift
    16U,	// SRSHLv16i8
    0U,	// SRSHLv1i64
    16U,	// SRSHLv2i32
    16U,	// SRSHLv2i64
    16U,	// SRSHLv4i16
    16U,	// SRSHLv4i32
    16U,	// SRSHLv8i16
    16U,	// SRSHLv8i8
    0U,	// SRSHRd
    0U,	// SRSHRv16i8_shift
    0U,	// SRSHRv2i32_shift
    0U,	// SRSHRv2i64_shift
    0U,	// SRSHRv4i16_shift
    0U,	// SRSHRv4i32_shift
    0U,	// SRSHRv8i16_shift
    0U,	// SRSHRv8i8_shift
    128U,	// SRSRAd
    128U,	// SRSRAv16i8_shift
    128U,	// SRSRAv2i32_shift
    128U,	// SRSRAv2i64_shift
    128U,	// SRSRAv4i16_shift
    128U,	// SRSRAv4i32_shift
    128U,	// SRSRAv8i16_shift
    128U,	// SRSRAv8i8_shift
    0U,	// SSHLLv16i8_shift
    0U,	// SSHLLv2i32_shift
    0U,	// SSHLLv4i16_shift
    0U,	// SSHLLv4i32_shift
    0U,	// SSHLLv8i16_shift
    0U,	// SSHLLv8i8_shift
    16U,	// SSHLv16i8
    0U,	// SSHLv1i64
    16U,	// SSHLv2i32
    16U,	// SSHLv2i64
    16U,	// SSHLv4i16
    16U,	// SSHLv4i32
    16U,	// SSHLv8i16
    16U,	// SSHLv8i8
    0U,	// SSHRd
    0U,	// SSHRv16i8_shift
    0U,	// SSHRv2i32_shift
    0U,	// SSHRv2i64_shift
    0U,	// SSHRv4i16_shift
    0U,	// SSHRv4i32_shift
    0U,	// SSHRv8i16_shift
    0U,	// SSHRv8i8_shift
    128U,	// SSRAd
    128U,	// SSRAv16i8_shift
    128U,	// SSRAv2i32_shift
    128U,	// SSRAv2i64_shift
    128U,	// SSRAv4i16_shift
    128U,	// SSRAv4i32_shift
    128U,	// SSRAv8i16_shift
    128U,	// SSRAv8i8_shift
    16U,	// SSUBLv16i8_v8i16
    16U,	// SSUBLv2i32_v2i64
    16U,	// SSUBLv4i16_v4i32
    16U,	// SSUBLv4i32_v2i64
    16U,	// SSUBLv8i16_v4i32
    16U,	// SSUBLv8i8_v8i16
    16U,	// SSUBWv16i8_v8i16
    16U,	// SSUBWv2i32_v2i64
    16U,	// SSUBWv4i16_v4i32
    16U,	// SSUBWv4i32_v2i64
    16U,	// SSUBWv8i16_v4i32
    16U,	// SSUBWv8i8_v8i16
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    4U,	// STLLRB
    4U,	// STLLRH
    4U,	// STLLRW
    4U,	// STLLRX
    4U,	// STLRB
    4U,	// STLRH
    4U,	// STLRW
    4U,	// STLRX
    2048U,	// STLXPW
    2048U,	// STLXPX
    1284U,	// STLXRB
    1284U,	// STLXRH
    1284U,	// STLXRW
    1284U,	// STLXRX
    12804U,	// STNPDi
    16900U,	// STNPQi
    20996U,	// STNPSi
    20996U,	// STNPWi
    12804U,	// STNPXi
    12804U,	// STPDi
    26244U,	// STPDpost
    156292U,	// STPDpre
    16900U,	// STPQi
    30340U,	// STPQpost
    160388U,	// STPQpre
    20996U,	// STPSi
    34436U,	// STPSpost
    164484U,	// STPSpre
    20996U,	// STPWi
    34436U,	// STPWpost
    164484U,	// STPWpre
    12804U,	// STPXi
    26244U,	// STPXpost
    156292U,	// STPXpre
    5U,	// STRBBpost
    1920U,	// STRBBpre
    37376U,	// STRBBroW
    41472U,	// STRBBroX
    144U,	// STRBBui
    5U,	// STRBpost
    1920U,	// STRBpre
    37376U,	// STRBroW
    41472U,	// STRBroX
    144U,	// STRBui
    5U,	// STRDpost
    1920U,	// STRDpre
    45568U,	// STRDroW
    49664U,	// STRDroX
    160U,	// STRDui
    5U,	// STRHHpost
    1920U,	// STRHHpre
    53760U,	// STRHHroW
    57856U,	// STRHHroX
    176U,	// STRHHui
    5U,	// STRHpost
    1920U,	// STRHpre
    53760U,	// STRHroW
    57856U,	// STRHroX
    176U,	// STRHui
    5U,	// STRQpost
    1920U,	// STRQpre
    61952U,	// STRQroW
    66048U,	// STRQroX
    192U,	// STRQui
    5U,	// STRSpost
    1920U,	// STRSpre
    70144U,	// STRSroW
    74240U,	// STRSroX
    208U,	// STRSui
    5U,	// STRWpost
    1920U,	// STRWpre
    70144U,	// STRWroW
    74240U,	// STRWroX
    208U,	// STRWui
    5U,	// STRXpost
    1920U,	// STRXpre
    45568U,	// STRXroW
    49664U,	// STRXroX
    160U,	// STRXui
    1280U,	// STTRBi
    1280U,	// STTRHi
    1280U,	// STTRWi
    1280U,	// STTRXi
    1280U,	// STURBBi
    1280U,	// STURBi
    1280U,	// STURDi
    1280U,	// STURHHi
    1280U,	// STURHi
    1280U,	// STURQi
    1280U,	// STURSi
    1280U,	// STURWi
    1280U,	// STURXi
    2048U,	// STXPW
    2048U,	// STXPX
    1284U,	// STXRB
    1284U,	// STXRH
    1284U,	// STXRW
    1284U,	// STXRX
    16U,	// SUBHNv2i64_v2i32
    32U,	// SUBHNv2i64_v4i32
    16U,	// SUBHNv4i32_v4i16
    32U,	// SUBHNv4i32_v8i16
    32U,	// SUBHNv8i16_v16i8
    16U,	// SUBHNv8i16_v8i8
    48U,	// SUBSWri
    0U,	// SUBSWrr
    64U,	// SUBSWrs
    80U,	// SUBSWrx
    48U,	// SUBSXri
    0U,	// SUBSXrr
    64U,	// SUBSXrs
    80U,	// SUBSXrx
    256U,	// SUBSXrx64
    48U,	// SUBWri
    0U,	// SUBWrr
    64U,	// SUBWrs
    80U,	// SUBWrx
    48U,	// SUBXri
    0U,	// SUBXrr
    64U,	// SUBXrs
    80U,	// SUBXrx
    256U,	// SUBXrx64
    16U,	// SUBv16i8
    0U,	// SUBv1i64
    16U,	// SUBv2i32
    16U,	// SUBv2i64
    16U,	// SUBv4i16
    16U,	// SUBv4i32
    16U,	// SUBv8i16
    16U,	// SUBv8i8
    0U,	// SUQADDv16i8
    0U,	// SUQADDv1i16
    0U,	// SUQADDv1i32
    0U,	// SUQADDv1i64
    0U,	// SUQADDv1i8
    0U,	// SUQADDv2i32
    0U,	// SUQADDv2i64
    0U,	// SUQADDv4i16
    0U,	// SUQADDv4i32
    0U,	// SUQADDv8i16
    0U,	// SUQADDv8i8
    0U,	// SVC
    224U,	// SYSLxt
    0U,	// SYSxt
    7U,	// TBLv16i8Four
    7U,	// TBLv16i8One
    7U,	// TBLv16i8Three
    7U,	// TBLv16i8Two
    8U,	// TBLv8i8Four
    8U,	// TBLv8i8One
    8U,	// TBLv8i8Three
    8U,	// TBLv8i8Two
    240U,	// TBNZW
    240U,	// TBNZX
    7U,	// TBXv16i8Four
    7U,	// TBXv16i8One
    7U,	// TBXv16i8Three
    7U,	// TBXv16i8Two
    8U,	// TBXv8i8Four
    8U,	// TBXv8i8One
    8U,	// TBXv8i8Three
    8U,	// TBXv8i8Two
    240U,	// TBZW
    240U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    16U,	// TRN1v16i8
    16U,	// TRN1v2i32
    16U,	// TRN1v2i64
    16U,	// TRN1v4i16
    16U,	// TRN1v4i32
    16U,	// TRN1v8i16
    16U,	// TRN1v8i8
    16U,	// TRN2v16i8
    16U,	// TRN2v2i32
    16U,	// TRN2v2i64
    16U,	// TRN2v4i16
    16U,	// TRN2v4i32
    16U,	// TRN2v8i16
    16U,	// TRN2v8i8
    32U,	// UABALv16i8_v8i16
    32U,	// UABALv2i32_v2i64
    32U,	// UABALv4i16_v4i32
    32U,	// UABALv4i32_v2i64
    32U,	// UABALv8i16_v4i32
    32U,	// UABALv8i8_v8i16
    32U,	// UABAv16i8
    32U,	// UABAv2i32
    32U,	// UABAv4i16
    32U,	// UABAv4i32
    32U,	// UABAv8i16
    32U,	// UABAv8i8
    16U,	// UABDLv16i8_v8i16
    16U,	// UABDLv2i32_v2i64
    16U,	// UABDLv4i16_v4i32
    16U,	// UABDLv4i32_v2i64
    16U,	// UABDLv8i16_v4i32
    16U,	// UABDLv8i8_v8i16
    16U,	// UABDv16i8
    16U,	// UABDv2i32
    16U,	// UABDv4i16
    16U,	// UABDv4i32
    16U,	// UABDv8i16
    16U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    0U,	// UADALPv2i32_v1i64
    0U,	// UADALPv4i16_v2i32
    0U,	// UADALPv4i32_v2i64
    0U,	// UADALPv8i16_v4i32
    0U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    0U,	// UADDLPv2i32_v1i64
    0U,	// UADDLPv4i16_v2i32
    0U,	// UADDLPv4i32_v2i64
    0U,	// UADDLPv8i16_v4i32
    0U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    0U,	// UADDLVv4i16v
    0U,	// UADDLVv4i32v
    0U,	// UADDLVv8i16v
    0U,	// UADDLVv8i8v
    16U,	// UADDLv16i8_v8i16
    16U,	// UADDLv2i32_v2i64
    16U,	// UADDLv4i16_v4i32
    16U,	// UADDLv4i32_v2i64
    16U,	// UADDLv8i16_v4i32
    16U,	// UADDLv8i8_v8i16
    16U,	// UADDWv16i8_v8i16
    16U,	// UADDWv2i32_v2i64
    16U,	// UADDWv4i16_v4i32
    16U,	// UADDWv4i32_v2i64
    16U,	// UADDWv8i16_v4i32
    16U,	// UADDWv8i8_v8i16
    8704U,	// UBFMWri
    8704U,	// UBFMXri
    0U,	// UCVTFSWDri
    0U,	// UCVTFSWSri
    0U,	// UCVTFSXDri
    0U,	// UCVTFSXSri
    0U,	// UCVTFUWDri
    0U,	// UCVTFUWSri
    0U,	// UCVTFUXDri
    0U,	// UCVTFUXSri
    0U,	// UCVTFd
    0U,	// UCVTFs
    0U,	// UCVTFv1i32
    0U,	// UCVTFv1i64
    0U,	// UCVTFv2f32
    0U,	// UCVTFv2f64
    0U,	// UCVTFv2i32_shift
    0U,	// UCVTFv2i64_shift
    0U,	// UCVTFv4f32
    0U,	// UCVTFv4i32_shift
    0U,	// UDIVWr
    0U,	// UDIVXr
    0U,	// UDIV_IntWr
    0U,	// UDIV_IntXr
    16U,	// UHADDv16i8
    16U,	// UHADDv2i32
    16U,	// UHADDv4i16
    16U,	// UHADDv4i32
    16U,	// UHADDv8i16
    16U,	// UHADDv8i8
    16U,	// UHSUBv16i8
    16U,	// UHSUBv2i32
    16U,	// UHSUBv4i16
    16U,	// UHSUBv4i32
    16U,	// UHSUBv8i16
    16U,	// UHSUBv8i8
    8704U,	// UMADDLrrr
    16U,	// UMAXPv16i8
    16U,	// UMAXPv2i32
    16U,	// UMAXPv4i16
    16U,	// UMAXPv4i32
    16U,	// UMAXPv8i16
    16U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    0U,	// UMAXVv4i16v
    0U,	// UMAXVv4i32v
    0U,	// UMAXVv8i16v
    0U,	// UMAXVv8i8v
    16U,	// UMAXv16i8
    16U,	// UMAXv2i32
    16U,	// UMAXv4i16
    16U,	// UMAXv4i32
    16U,	// UMAXv8i16
    16U,	// UMAXv8i8
    16U,	// UMINPv16i8
    16U,	// UMINPv2i32
    16U,	// UMINPv4i16
    16U,	// UMINPv4i32
    16U,	// UMINPv8i16
    16U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    0U,	// UMINVv4i16v
    0U,	// UMINVv4i32v
    0U,	// UMINVv8i16v
    0U,	// UMINVv8i8v
    16U,	// UMINv16i8
    16U,	// UMINv2i32
    16U,	// UMINv4i16
    16U,	// UMINv4i32
    16U,	// UMINv8i16
    16U,	// UMINv8i8
    32U,	// UMLALv16i8_v8i16
    800U,	// UMLALv2i32_indexed
    32U,	// UMLALv2i32_v2i64
    800U,	// UMLALv4i16_indexed
    32U,	// UMLALv4i16_v4i32
    800U,	// UMLALv4i32_indexed
    32U,	// UMLALv4i32_v2i64
    800U,	// UMLALv8i16_indexed
    32U,	// UMLALv8i16_v4i32
    32U,	// UMLALv8i8_v8i16
    32U,	// UMLSLv16i8_v8i16
    800U,	// UMLSLv2i32_indexed
    32U,	// UMLSLv2i32_v2i64
    800U,	// UMLSLv4i16_indexed
    32U,	// UMLSLv4i16_v4i32
    800U,	// UMLSLv4i32_indexed
    32U,	// UMLSLv4i32_v2i64
    800U,	// UMLSLv8i16_indexed
    32U,	// UMLSLv8i16_v4i32
    32U,	// UMLSLv8i8_v8i16
    1U,	// UMOVvi16
    1U,	// UMOVvi32
    1U,	// UMOVvi64
    1U,	// UMOVvi8
    8704U,	// UMSUBLrrr
    0U,	// UMULHrr
    16U,	// UMULLv16i8_v8i16
    1040U,	// UMULLv2i32_indexed
    16U,	// UMULLv2i32_v2i64
    1040U,	// UMULLv4i16_indexed
    16U,	// UMULLv4i16_v4i32
    1040U,	// UMULLv4i32_indexed
    16U,	// UMULLv4i32_v2i64
    1040U,	// UMULLv8i16_indexed
    16U,	// UMULLv8i16_v4i32
    16U,	// UMULLv8i8_v8i16
    16U,	// UQADDv16i8
    0U,	// UQADDv1i16
    0U,	// UQADDv1i32
    0U,	// UQADDv1i64
    0U,	// UQADDv1i8
    16U,	// UQADDv2i32
    16U,	// UQADDv2i64
    16U,	// UQADDv4i16
    16U,	// UQADDv4i32
    16U,	// UQADDv8i16
    16U,	// UQADDv8i8
    16U,	// UQRSHLv16i8
    0U,	// UQRSHLv1i16
    0U,	// UQRSHLv1i32
    0U,	// UQRSHLv1i64
    0U,	// UQRSHLv1i8
    16U,	// UQRSHLv2i32
    16U,	// UQRSHLv2i64
    16U,	// UQRSHLv4i16
    16U,	// UQRSHLv4i32
    16U,	// UQRSHLv8i16
    16U,	// UQRSHLv8i8
    0U,	// UQRSHRNb
    0U,	// UQRSHRNh
    0U,	// UQRSHRNs
    128U,	// UQRSHRNv16i8_shift
    0U,	// UQRSHRNv2i32_shift
    0U,	// UQRSHRNv4i16_shift
    128U,	// UQRSHRNv4i32_shift
    128U,	// UQRSHRNv8i16_shift
    0U,	// UQRSHRNv8i8_shift
    0U,	// UQSHLb
    0U,	// UQSHLd
    0U,	// UQSHLh
    0U,	// UQSHLs
    16U,	// UQSHLv16i8
    0U,	// UQSHLv16i8_shift
    0U,	// UQSHLv1i16
    0U,	// UQSHLv1i32
    0U,	// UQSHLv1i64
    0U,	// UQSHLv1i8
    16U,	// UQSHLv2i32
    0U,	// UQSHLv2i32_shift
    16U,	// UQSHLv2i64
    0U,	// UQSHLv2i64_shift
    16U,	// UQSHLv4i16
    0U,	// UQSHLv4i16_shift
    16U,	// UQSHLv4i32
    0U,	// UQSHLv4i32_shift
    16U,	// UQSHLv8i16
    0U,	// UQSHLv8i16_shift
    16U,	// UQSHLv8i8
    0U,	// UQSHLv8i8_shift
    0U,	// UQSHRNb
    0U,	// UQSHRNh
    0U,	// UQSHRNs
    128U,	// UQSHRNv16i8_shift
    0U,	// UQSHRNv2i32_shift
    0U,	// UQSHRNv4i16_shift
    128U,	// UQSHRNv4i32_shift
    128U,	// UQSHRNv8i16_shift
    0U,	// UQSHRNv8i8_shift
    16U,	// UQSUBv16i8
    0U,	// UQSUBv1i16
    0U,	// UQSUBv1i32
    0U,	// UQSUBv1i64
    0U,	// UQSUBv1i8
    16U,	// UQSUBv2i32
    16U,	// UQSUBv2i64
    16U,	// UQSUBv4i16
    16U,	// UQSUBv4i32
    16U,	// UQSUBv8i16
    16U,	// UQSUBv8i8
    0U,	// UQXTNv16i8
    0U,	// UQXTNv1i16
    0U,	// UQXTNv1i32
    0U,	// UQXTNv1i8
    0U,	// UQXTNv2i32
    0U,	// UQXTNv4i16
    0U,	// UQXTNv4i32
    0U,	// UQXTNv8i16
    0U,	// UQXTNv8i8
    0U,	// URECPEv2i32
    0U,	// URECPEv4i32
    16U,	// URHADDv16i8
    16U,	// URHADDv2i32
    16U,	// URHADDv4i16
    16U,	// URHADDv4i32
    16U,	// URHADDv8i16
    16U,	// URHADDv8i8
    16U,	// URSHLv16i8
    0U,	// URSHLv1i64
    16U,	// URSHLv2i32
    16U,	// URSHLv2i64
    16U,	// URSHLv4i16
    16U,	// URSHLv4i32
    16U,	// URSHLv8i16
    16U,	// URSHLv8i8
    0U,	// URSHRd
    0U,	// URSHRv16i8_shift
    0U,	// URSHRv2i32_shift
    0U,	// URSHRv2i64_shift
    0U,	// URSHRv4i16_shift
    0U,	// URSHRv4i32_shift
    0U,	// URSHRv8i16_shift
    0U,	// URSHRv8i8_shift
    0U,	// URSQRTEv2i32
    0U,	// URSQRTEv4i32
    128U,	// URSRAd
    128U,	// URSRAv16i8_shift
    128U,	// URSRAv2i32_shift
    128U,	// URSRAv2i64_shift
    128U,	// URSRAv4i16_shift
    128U,	// URSRAv4i32_shift
    128U,	// URSRAv8i16_shift
    128U,	// URSRAv8i8_shift
    0U,	// USHLLv16i8_shift
    0U,	// USHLLv2i32_shift
    0U,	// USHLLv4i16_shift
    0U,	// USHLLv4i32_shift
    0U,	// USHLLv8i16_shift
    0U,	// USHLLv8i8_shift
    16U,	// USHLv16i8
    0U,	// USHLv1i64
    16U,	// USHLv2i32
    16U,	// USHLv2i64
    16U,	// USHLv4i16
    16U,	// USHLv4i32
    16U,	// USHLv8i16
    16U,	// USHLv8i8
    0U,	// USHRd
    0U,	// USHRv16i8_shift
    0U,	// USHRv2i32_shift
    0U,	// USHRv2i64_shift
    0U,	// USHRv4i16_shift
    0U,	// USHRv4i32_shift
    0U,	// USHRv8i16_shift
    0U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    0U,	// USQADDv1i16
    0U,	// USQADDv1i32
    0U,	// USQADDv1i64
    0U,	// USQADDv1i8
    0U,	// USQADDv2i32
    0U,	// USQADDv2i64
    0U,	// USQADDv4i16
    0U,	// USQADDv4i32
    0U,	// USQADDv8i16
    0U,	// USQADDv8i8
    128U,	// USRAd
    128U,	// USRAv16i8_shift
    128U,	// USRAv2i32_shift
    128U,	// USRAv2i64_shift
    128U,	// USRAv4i16_shift
    128U,	// USRAv4i32_shift
    128U,	// USRAv8i16_shift
    128U,	// USRAv8i8_shift
    16U,	// USUBLv16i8_v8i16
    16U,	// USUBLv2i32_v2i64
    16U,	// USUBLv4i16_v4i32
    16U,	// USUBLv4i32_v2i64
    16U,	// USUBLv8i16_v4i32
    16U,	// USUBLv8i8_v8i16
    16U,	// USUBWv16i8_v8i16
    16U,	// USUBWv2i32_v2i64
    16U,	// USUBWv4i16_v4i32
    16U,	// USUBWv4i32_v2i64
    16U,	// USUBWv8i16_v4i32
    16U,	// USUBWv8i8_v8i16
    16U,	// UZP1v16i8
    16U,	// UZP1v2i32
    16U,	// UZP1v2i64
    16U,	// UZP1v4i16
    16U,	// UZP1v4i32
    16U,	// UZP1v8i16
    16U,	// UZP1v8i8
    16U,	// UZP2v16i8
    16U,	// UZP2v2i32
    16U,	// UZP2v2i64
    16U,	// UZP2v4i16
    16U,	// UZP2v4i32
    16U,	// UZP2v8i16
    16U,	// UZP2v8i8
    0U,	// XTNv16i8
    0U,	// XTNv2i32
    0U,	// XTNv4i16
    0U,	// XTNv4i32
    0U,	// XTNv8i16
    0U,	// XTNv8i8
    16U,	// ZIP1v16i8
    16U,	// ZIP1v2i32
    16U,	// ZIP1v2i64
    16U,	// ZIP1v4i16
    16U,	// ZIP1v4i32
    16U,	// ZIP1v8i16
    16U,	// ZIP1v8i8
    16U,	// ZIP2v16i8
    16U,	// ZIP2v2i32
    16U,	// ZIP2v2i64
    16U,	// ZIP2v4i16
    16U,	// ZIP2v4i32
    16U,	// ZIP2v8i16
    16U,	// ZIP2v8i8
    0U
  };

  static const char AsmStrs[] = {
  /* 0 */ 'l', 'd', '1', 9, 0,
  /* 5 */ 'd', 'c', 'p', 's', '1', 9, 0,
  /* 12 */ 's', 't', '1', 9, 0,
  /* 17 */ 'r', 'e', 'v', '3', '2', 9, 0,
  /* 24 */ 'l', 'd', '2', 9, 0,
  /* 29 */ 'f', 'c', 'v', 't', 'l', '2', 9, 0,
  /* 37 */ 'f', 'c', 'v', 't', 'n', '2', 9, 0,
  /* 45 */ 'f', 'c', 'v', 't', 'x', 'n', '2', 9, 0,
  /* 54 */ 'd', 'c', 'p', 's', '2', 9, 0,
  /* 61 */ 's', 't', '2', 9, 0,
  /* 66 */ 'l', 'd', '3', 9, 0,
  /* 71 */ 'd', 'c', 'p', 's', '3', 9, 0,
  /* 78 */ 's', 't', '3', 9, 0,
  /* 83 */ 'l', 'd', '4', 9, 0,
  /* 88 */ 's', 't', '4', 9, 0,
  /* 93 */ 'r', 'e', 'v', '1', '6', 9, 0,
  /* 100 */ 's', 'r', 's', 'r', 'a', 9, 0,
  /* 107 */ 'u', 'r', 's', 'r', 'a', 9, 0,
  /* 114 */ 's', 's', 'r', 'a', 9, 0,
  /* 120 */ 'u', 's', 'r', 'a', 9, 0,
  /* 126 */ 'f', 'r', 'i', 'n', 't', 'a', 9, 0,
  /* 134 */ 'i', 'n', 's', '.', 'b', 9, 0,
  /* 141 */ 's', 'm', 'o', 'v', '.', 'b', 9, 0,
  /* 149 */ 'u', 'm', 'o', 'v', '.', 'b', 9, 0,
  /* 157 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 165 */ 't', 'r', 'n', '1', '.', '1', '6', 'b', 9, 0,
  /* 175 */ 'z', 'i', 'p', '1', '.', '1', '6', 'b', 9, 0,
  /* 185 */ 'u', 'z', 'p', '1', '.', '1', '6', 'b', 9, 0,
  /* 195 */ 'r', 'e', 'v', '3', '2', '.', '1', '6', 'b', 9, 0,
  /* 206 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 219 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 232 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 245 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 258 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 272 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 286 */ 't', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 296 */ 's', 'q', 'x', 't', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 308 */ 'u', 'q', 'x', 't', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 320 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 334 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 349 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 362 */ 'z', 'i', 'p', '2', '.', '1', '6', 'b', 9, 0,
  /* 372 */ 'u', 'z', 'p', '2', '.', '1', '6', 'b', 9, 0,
  /* 382 */ 'r', 'e', 'v', '6', '4', '.', '1', '6', 'b', 9, 0,
  /* 393 */ 'r', 'e', 'v', '1', '6', '.', '1', '6', 'b', 9, 0,
  /* 404 */ 's', 'a', 'b', 'a', '.', '1', '6', 'b', 9, 0,
  /* 414 */ 'u', 'a', 'b', 'a', '.', '1', '6', 'b', 9, 0,
  /* 424 */ 'm', 'l', 'a', '.', '1', '6', 'b', 9, 0,
  /* 433 */ 's', 'r', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 444 */ 'u', 'r', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 455 */ 's', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 465 */ 'u', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 475 */ 's', 'h', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 486 */ 'u', 'h', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 497 */ 's', 'q', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 508 */ 'u', 'q', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 519 */ 'b', 'i', 'c', '.', '1', '6', 'b', 9, 0,
  /* 528 */ 'a', 'e', 's', 'i', 'm', 'c', '.', '1', '6', 'b', 9, 0,
  /* 540 */ 'a', 'e', 's', 'm', 'c', '.', '1', '6', 'b', 9, 0,
  /* 551 */ 's', 'a', 'b', 'd', '.', '1', '6', 'b', 9, 0,
  /* 561 */ 'u', 'a', 'b', 'd', '.', '1', '6', 'b', 9, 0,
  /* 571 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 583 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 595 */ 's', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 606 */ 'u', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 617 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 629 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 641 */ 'a', 'n', 'd', '.', '1', '6', 'b', 9, 0,
  /* 650 */ 'a', 'e', 's', 'd', '.', '1', '6', 'b', 9, 0,
  /* 660 */ 'c', 'm', 'g', 'e', '.', '1', '6', 'b', 9, 0,
  /* 670 */ 'c', 'm', 'l', 'e', '.', '1', '6', 'b', 9, 0,
  /* 680 */ 'a', 'e', 's', 'e', '.', '1', '6', 'b', 9, 0,
  /* 690 */ 'b', 'i', 'f', '.', '1', '6', 'b', 9, 0,
  /* 699 */ 's', 'q', 'n', 'e', 'g', '.', '1', '6', 'b', 9, 0,
  /* 710 */ 'c', 'm', 'h', 'i', '.', '1', '6', 'b', 9, 0,
  /* 720 */ 's', 'l', 'i', '.', '1', '6', 'b', 9, 0,
  /* 729 */ 's', 'r', 'i', '.', '1', '6', 'b', 9, 0,
  /* 738 */ 'm', 'o', 'v', 'i', '.', '1', '6', 'b', 9, 0,
  /* 748 */ 's', 'q', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 759 */ 'u', 'q', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 770 */ 's', 'q', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 782 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 794 */ 's', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 805 */ 'u', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 816 */ 's', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 826 */ 'u', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 836 */ 'b', 's', 'l', '.', '1', '6', 'b', 9, 0,
  /* 845 */ 'p', 'm', 'u', 'l', '.', '1', '6', 'b', 9, 0,
  /* 855 */ 's', 'm', 'i', 'n', '.', '1', '6', 'b', 9, 0,
  /* 865 */ 'u', 'm', 'i', 'n', '.', '1', '6', 'b', 9, 0,
  /* 875 */ 'o', 'r', 'n', '.', '1', '6', 'b', 9, 0,
  /* 884 */ 'a', 'd', 'd', 'p', '.', '1', '6', 'b', 9, 0,
  /* 894 */ 's', 'm', 'i', 'n', 'p', '.', '1', '6', 'b', 9, 0,
  /* 905 */ 'u', 'm', 'i', 'n', 'p', '.', '1', '6', 'b', 9, 0,
  /* 916 */ 'd', 'u', 'p', '.', '1', '6', 'b', 9, 0,
  /* 925 */ 's', 'm', 'a', 'x', 'p', '.', '1', '6', 'b', 9, 0,
  /* 936 */ 'u', 'm', 'a', 'x', 'p', '.', '1', '6', 'b', 9, 0,
  /* 947 */ 'c', 'm', 'e', 'q', '.', '1', '6', 'b', 9, 0,
  /* 957 */ 's', 'r', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 968 */ 'u', 'r', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 979 */ 's', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 989 */ 'u', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 999 */ 'e', 'o', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1008 */ 'o', 'r', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1017 */ 's', 'q', 'a', 'b', 's', '.', '1', '6', 'b', 9, 0,
  /* 1028 */ 'c', 'm', 'h', 's', '.', '1', '6', 'b', 9, 0,
  /* 1038 */ 'c', 'l', 's', '.', '1', '6', 'b', 9, 0,
  /* 1047 */ 'm', 'l', 's', '.', '1', '6', 'b', 9, 0,
  /* 1056 */ 'c', 'm', 'g', 't', '.', '1', '6', 'b', 9, 0,
  /* 1066 */ 'r', 'b', 'i', 't', '.', '1', '6', 'b', 9, 0,
  /* 1076 */ 'c', 'm', 'l', 't', '.', '1', '6', 'b', 9, 0,
  /* 1086 */ 'c', 'n', 't', '.', '1', '6', 'b', 9, 0,
  /* 1095 */ 'n', 'o', 't', '.', '1', '6', 'b', 9, 0,
  /* 1104 */ 'c', 'm', 't', 's', 't', '.', '1', '6', 'b', 9, 0,
  /* 1115 */ 'e', 'x', 't', '.', '1', '6', 'b', 9, 0,
  /* 1124 */ 's', 'q', 's', 'h', 'l', 'u', '.', '1', '6', 'b', 9, 0,
  /* 1136 */ 'a', 'd', 'd', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1146 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1158 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1170 */ 's', 'm', 'i', 'n', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1181 */ 'u', 'm', 'i', 'n', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1192 */ 's', 'm', 'a', 'x', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1203 */ 'u', 'm', 'a', 'x', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1214 */ 's', 'm', 'a', 'x', '.', '1', '6', 'b', 9, 0,
  /* 1224 */ 'u', 'm', 'a', 'x', '.', '1', '6', 'b', 9, 0,
  /* 1234 */ 'c', 'l', 'z', '.', '1', '6', 'b', 9, 0,
  /* 1243 */ 't', 'r', 'n', '1', '.', '8', 'b', 9, 0,
  /* 1252 */ 'z', 'i', 'p', '1', '.', '8', 'b', 9, 0,
  /* 1261 */ 'u', 'z', 'p', '1', '.', '8', 'b', 9, 0,
  /* 1270 */ 'r', 'e', 'v', '3', '2', '.', '8', 'b', 9, 0,
  /* 1280 */ 't', 'r', 'n', '2', '.', '8', 'b', 9, 0,
  /* 1289 */ 'z', 'i', 'p', '2', '.', '8', 'b', 9, 0,
  /* 1298 */ 'u', 'z', 'p', '2', '.', '8', 'b', 9, 0,
  /* 1307 */ 'r', 'e', 'v', '6', '4', '.', '8', 'b', 9, 0,
  /* 1317 */ 'r', 'e', 'v', '1', '6', '.', '8', 'b', 9, 0,
  /* 1327 */ 's', 'a', 'b', 'a', '.', '8', 'b', 9, 0,
  /* 1336 */ 'u', 'a', 'b', 'a', '.', '8', 'b', 9, 0,
  /* 1345 */ 'm', 'l', 'a', '.', '8', 'b', 9, 0,
  /* 1353 */ 's', 'r', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1363 */ 'u', 'r', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1373 */ 's', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1382 */ 'u', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1391 */ 's', 'h', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1401 */ 'u', 'h', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1411 */ 's', 'q', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1421 */ 'u', 'q', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1431 */ 'b', 'i', 'c', '.', '8', 'b', 9, 0,
  /* 1439 */ 's', 'a', 'b', 'd', '.', '8', 'b', 9, 0,
  /* 1448 */ 'u', 'a', 'b', 'd', '.', '8', 'b', 9, 0,
  /* 1457 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1468 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1479 */ 's', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1489 */ 'u', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1499 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1510 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1521 */ 'a', 'n', 'd', '.', '8', 'b', 9, 0,
  /* 1529 */ 'c', 'm', 'g', 'e', '.', '8', 'b', 9, 0,
  /* 1538 */ 'c', 'm', 'l', 'e', '.', '8', 'b', 9, 0,
  /* 1547 */ 'b', 'i', 'f', '.', '8', 'b', 9, 0,
  /* 1555 */ 's', 'q', 'n', 'e', 'g', '.', '8', 'b', 9, 0,
  /* 1565 */ 'c', 'm', 'h', 'i', '.', '8', 'b', 9, 0,
  /* 1574 */ 's', 'l', 'i', '.', '8', 'b', 9, 0,
  /* 1582 */ 's', 'r', 'i', '.', '8', 'b', 9, 0,
  /* 1590 */ 'm', 'o', 'v', 'i', '.', '8', 'b', 9, 0,
  /* 1599 */ 's', 'q', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1609 */ 'u', 'q', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1619 */ 's', 'q', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1630 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1641 */ 's', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1651 */ 'u', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1661 */ 's', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1670 */ 'u', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1679 */ 'b', 's', 'l', '.', '8', 'b', 9, 0,
  /* 1687 */ 'p', 'm', 'u', 'l', '.', '8', 'b', 9, 0,
  /* 1696 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '8', 'b', 9, 0,
  /* 1707 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '8', 'b', 9, 0,
  /* 1718 */ 's', 'm', 'i', 'n', '.', '8', 'b', 9, 0,
  /* 1727 */ 'u', 'm', 'i', 'n', '.', '8', 'b', 9, 0,
  /* 1736 */ 's', 'q', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1747 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1758 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1770 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1782 */ 'o', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1790 */ 's', 'q', 'x', 't', 'n', '.', '8', 'b', 9, 0,
  /* 1800 */ 'u', 'q', 'x', 't', 'n', '.', '8', 'b', 9, 0,
  /* 1810 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 1822 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 1835 */ 's', 'q', 'x', 't', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 1846 */ 'a', 'd', 'd', 'p', '.', '8', 'b', 9, 0,
  /* 1855 */ 's', 'm', 'i', 'n', 'p', '.', '8', 'b', 9, 0,
  /* 1865 */ 'u', 'm', 'i', 'n', 'p', '.', '8', 'b', 9, 0,
  /* 1875 */ 'd', 'u', 'p', '.', '8', 'b', 9, 0,
  /* 1883 */ 's', 'm', 'a', 'x', 'p', '.', '8', 'b', 9, 0,
  /* 1893 */ 'u', 'm', 'a', 'x', 'p', '.', '8', 'b', 9, 0,
  /* 1903 */ 'c', 'm', 'e', 'q', '.', '8', 'b', 9, 0,
  /* 1912 */ 's', 'r', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 1922 */ 'u', 'r', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 1932 */ 's', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 1941 */ 'u', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 1950 */ 'e', 'o', 'r', '.', '8', 'b', 9, 0,
  /* 1958 */ 'o', 'r', 'r', '.', '8', 'b', 9, 0,
  /* 1966 */ 's', 'q', 'a', 'b', 's', '.', '8', 'b', 9, 0,
  /* 1976 */ 'c', 'm', 'h', 's', '.', '8', 'b', 9, 0,
  /* 1985 */ 'c', 'l', 's', '.', '8', 'b', 9, 0,
  /* 1993 */ 'm', 'l', 's', '.', '8', 'b', 9, 0,
  /* 2001 */ 'c', 'm', 'g', 't', '.', '8', 'b', 9, 0,
  /* 2010 */ 'r', 'b', 'i', 't', '.', '8', 'b', 9, 0,
  /* 2019 */ 'c', 'm', 'l', 't', '.', '8', 'b', 9, 0,
  /* 2028 */ 'c', 'n', 't', '.', '8', 'b', 9, 0,
  /* 2036 */ 'n', 'o', 't', '.', '8', 'b', 9, 0,
  /* 2044 */ 'c', 'm', 't', 's', 't', '.', '8', 'b', 9, 0,
  /* 2054 */ 'e', 'x', 't', '.', '8', 'b', 9, 0,
  /* 2062 */ 's', 'q', 's', 'h', 'l', 'u', '.', '8', 'b', 9, 0,
  /* 2073 */ 'a', 'd', 'd', 'v', '.', '8', 'b', 9, 0,
  /* 2082 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '8', 'b', 9, 0,
  /* 2093 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '8', 'b', 9, 0,
  /* 2104 */ 's', 'm', 'i', 'n', 'v', '.', '8', 'b', 9, 0,
  /* 2114 */ 'u', 'm', 'i', 'n', 'v', '.', '8', 'b', 9, 0,
  /* 2124 */ 's', 'm', 'a', 'x', 'v', '.', '8', 'b', 9, 0,
  /* 2134 */ 'u', 'm', 'a', 'x', 'v', '.', '8', 'b', 9, 0,
  /* 2144 */ 's', 'm', 'a', 'x', '.', '8', 'b', 9, 0,
  /* 2153 */ 'u', 'm', 'a', 'x', '.', '8', 'b', 9, 0,
  /* 2162 */ 'c', 'l', 'z', '.', '8', 'b', 9, 0,
  /* 2170 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 2179 */ 'd', 'm', 'b', 9, 0,
  /* 2184 */ 'l', 'd', 'a', 'r', 'b', 9, 0,
  /* 2191 */ 'l', 'd', 'l', 'a', 'r', 'b', 9, 0,
  /* 2199 */ 'l', 'd', 'r', 'b', 9, 0,
  /* 2205 */ 's', 't', 'l', 'l', 'r', 'b', 9, 0,
  /* 2213 */ 's', 't', 'l', 'r', 'b', 9, 0,
  /* 2220 */ 'l', 'd', 't', 'r', 'b', 9, 0,
  /* 2227 */ 's', 't', 'r', 'b', 9, 0,
  /* 2233 */ 's', 't', 't', 'r', 'b', 9, 0,
  /* 2240 */ 'l', 'd', 'u', 'r', 'b', 9, 0,
  /* 2247 */ 's', 't', 'u', 'r', 'b', 9, 0,
  /* 2254 */ 'l', 'd', 'a', 'x', 'r', 'b', 9, 0,
  /* 2262 */ 'l', 'd', 'x', 'r', 'b', 9, 0,
  /* 2269 */ 's', 't', 'l', 'x', 'r', 'b', 9, 0,
  /* 2277 */ 's', 't', 'x', 'r', 'b', 9, 0,
  /* 2284 */ 'd', 's', 'b', 9, 0,
  /* 2289 */ 'i', 's', 'b', 9, 0,
  /* 2294 */ 'l', 'd', 'r', 's', 'b', 9, 0,
  /* 2301 */ 'l', 'd', 't', 'r', 's', 'b', 9, 0,
  /* 2309 */ 'l', 'd', 'u', 'r', 's', 'b', 9, 0,
  /* 2317 */ 'f', 's', 'u', 'b', 9, 0,
  /* 2323 */ 'f', 'm', 's', 'u', 'b', 9, 0,
  /* 2330 */ 'f', 'n', 'm', 's', 'u', 'b', 9, 0,
  /* 2338 */ 's', 'q', 's', 'u', 'b', 9, 0,
  /* 2345 */ 'u', 'q', 's', 'u', 'b', 9, 0,
  /* 2352 */ 's', 'b', 'c', 9, 0,
  /* 2357 */ 'a', 'd', 'c', 9, 0,
  /* 2362 */ 'b', 'i', 'c', 9, 0,
  /* 2367 */ 's', 'm', 'c', 9, 0,
  /* 2372 */ 'c', 's', 'i', 'n', 'c', 9, 0,
  /* 2379 */ 'h', 'v', 'c', 9, 0,
  /* 2384 */ 's', 'v', 'c', 9, 0,
  /* 2389 */ 'f', 'm', 'l', 'a', '.', 'd', 9, 0,
  /* 2397 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2405 */ 'f', 'm', 'l', 's', '.', 'd', 9, 0,
  /* 2413 */ 'i', 'n', 's', '.', 'd', 9, 0,
  /* 2420 */ 'f', 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 2428 */ 'u', 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 2436 */ 'f', 'm', 'u', 'l', 'x', '.', 'd', 9, 0,
  /* 2445 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2456 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2467 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2478 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2489 */ 't', 'r', 'n', '1', '.', '2', 'd', 9, 0,
  /* 2498 */ 'z', 'i', 'p', '1', '.', '2', 'd', 9, 0,
  /* 2507 */ 'u', 'z', 'p', '1', '.', '2', 'd', 9, 0,
  /* 2516 */ 's', 'a', 'b', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2527 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2538 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2551 */ 's', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2562 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2573 */ 's', 's', 'u', 'b', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2584 */ 'u', 's', 'u', 'b', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2595 */ 's', 'a', 'b', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2606 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2617 */ 's', 'a', 'd', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2628 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2639 */ 's', 's', 'h', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2650 */ 'u', 's', 'h', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2661 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2674 */ 's', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2685 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2696 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2709 */ 's', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2720 */ 'u', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2731 */ 't', 'r', 'n', '2', '.', '2', 'd', 9, 0,
  /* 2740 */ 'z', 'i', 'p', '2', '.', '2', 'd', 9, 0,
  /* 2749 */ 'u', 'z', 'p', '2', '.', '2', 'd', 9, 0,
  /* 2758 */ 's', 's', 'u', 'b', 'w', '2', '.', '2', 'd', 9, 0,
  /* 2769 */ 'u', 's', 'u', 'b', 'w', '2', '.', '2', 'd', 9, 0,
  /* 2780 */ 's', 'a', 'd', 'd', 'w', '2', '.', '2', 'd', 9, 0,
  /* 2791 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '2', 'd', 9, 0,
  /* 2802 */ 'f', 'm', 'l', 'a', '.', '2', 'd', 9, 0,
  /* 2811 */ 's', 'r', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 2821 */ 'u', 'r', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 2831 */ 's', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 2840 */ 'u', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 2849 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '2', 'd', 9, 0,
  /* 2860 */ 'f', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 2869 */ 's', 'q', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 2879 */ 'u', 'q', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 2889 */ 'f', 'a', 'b', 'd', '.', '2', 'd', 9, 0,
  /* 2898 */ 'f', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 2907 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 2918 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 2929 */ 'f', 'a', 'c', 'g', 'e', '.', '2', 'd', 9, 0,
  /* 2939 */ 'f', 'c', 'm', 'g', 'e', '.', '2', 'd', 9, 0,
  /* 2949 */ 'f', 'c', 'm', 'l', 'e', '.', '2', 'd', 9, 0,
  /* 2959 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '2', 'd', 9, 0,
  /* 2970 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 'd', 9, 0,
  /* 2982 */ 's', 'c', 'v', 't', 'f', '.', '2', 'd', 9, 0,
  /* 2992 */ 'u', 'c', 'v', 't', 'f', '.', '2', 'd', 9, 0,
  /* 3002 */ 'f', 'n', 'e', 'g', '.', '2', 'd', 9, 0,
  /* 3011 */ 's', 'q', 'n', 'e', 'g', '.', '2', 'd', 9, 0,
  /* 3021 */ 'c', 'm', 'h', 'i', '.', '2', 'd', 9, 0,
  /* 3030 */ 's', 'l', 'i', '.', '2', 'd', 9, 0,
  /* 3038 */ 's', 'r', 'i', '.', '2', 'd', 9, 0,
  /* 3046 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '2', 'd', 9, 0,
  /* 3057 */ 'm', 'o', 'v', 'i', '.', '2', 'd', 9, 0,
  /* 3066 */ 's', 'a', 'b', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3076 */ 'u', 'a', 'b', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3086 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3098 */ 's', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3108 */ 'u', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3118 */ 's', 's', 'u', 'b', 'l', '.', '2', 'd', 9, 0,
  /* 3128 */ 'u', 's', 'u', 'b', 'l', '.', '2', 'd', 9, 0,
  /* 3138 */ 's', 'a', 'b', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3148 */ 'u', 'a', 'b', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3158 */ 's', 'a', 'd', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3168 */ 'u', 'a', 'd', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3178 */ 's', 'q', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3188 */ 'u', 'q', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3198 */ 's', 'q', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3209 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3220 */ 's', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3230 */ 'u', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3240 */ 's', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3249 */ 'u', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3258 */ 's', 's', 'h', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3268 */ 'u', 's', 'h', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3278 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3290 */ 's', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3300 */ 'u', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3310 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3322 */ 's', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3332 */ 'u', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3342 */ 'f', 'm', 'u', 'l', '.', '2', 'd', 9, 0,
  /* 3351 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '2', 'd', 9, 0,
  /* 3362 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '2', 'd', 9, 0,
  /* 3373 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '2', 'd', 9, 0,
  /* 3384 */ 'f', 'm', 'i', 'n', '.', '2', 'd', 9, 0,
  /* 3393 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '2', 'd', 9, 0,
  /* 3404 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 'd', 9, 0,
  /* 3414 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3425 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3436 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3447 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3458 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 'd', 9, 0,
  /* 3470 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 'd', 9, 0,
  /* 3482 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 'd', 9, 0,
  /* 3492 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '2', 'd', 9, 0,
  /* 3503 */ 'd', 'u', 'p', '.', '2', 'd', 9, 0,
  /* 3511 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 'd', 9, 0,
  /* 3521 */ 'f', 'c', 'm', 'e', 'q', '.', '2', 'd', 9, 0,
  /* 3531 */ 's', 'r', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 3541 */ 'u', 'r', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 3551 */ 's', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 3560 */ 'u', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 3569 */ 'f', 'c', 'v', 't', 'a', 's', '.', '2', 'd', 9, 0,
  /* 3580 */ 'f', 'a', 'b', 's', '.', '2', 'd', 9, 0,
  /* 3589 */ 's', 'q', 'a', 'b', 's', '.', '2', 'd', 9, 0,
  /* 3599 */ 'c', 'm', 'h', 's', '.', '2', 'd', 9, 0,
  /* 3608 */ 'f', 'm', 'l', 's', '.', '2', 'd', 9, 0,
  /* 3617 */ 'f', 'c', 'v', 't', 'm', 's', '.', '2', 'd', 9, 0,
  /* 3628 */ 'f', 'c', 'v', 't', 'n', 's', '.', '2', 'd', 9, 0,
  /* 3639 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '2', 'd', 9, 0,
  /* 3650 */ 'f', 'c', 'v', 't', 'p', 's', '.', '2', 'd', 9, 0,
  /* 3661 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '2', 'd', 9, 0,
  /* 3673 */ 'f', 'c', 'v', 't', 'z', 's', '.', '2', 'd', 9, 0,
  /* 3684 */ 'f', 'a', 'c', 'g', 't', '.', '2', 'd', 9, 0,
  /* 3694 */ 'f', 'c', 'm', 'g', 't', '.', '2', 'd', 9, 0,
  /* 3704 */ 'f', 'c', 'm', 'l', 't', '.', '2', 'd', 9, 0,
  /* 3714 */ 'f', 's', 'q', 'r', 't', '.', '2', 'd', 9, 0,
  /* 3724 */ 'c', 'm', 't', 's', 't', '.', '2', 'd', 9, 0,
  /* 3734 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '2', 'd', 9, 0,
  /* 3745 */ 's', 'q', 's', 'h', 'l', 'u', '.', '2', 'd', 9, 0,
  /* 3756 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '2', 'd', 9, 0,
  /* 3767 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '2', 'd', 9, 0,
  /* 3778 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '2', 'd', 9, 0,
  /* 3789 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '2', 'd', 9, 0,
  /* 3800 */ 'f', 'd', 'i', 'v', '.', '2', 'd', 9, 0,
  /* 3809 */ 'f', 'm', 'o', 'v', '.', '2', 'd', 9, 0,
  /* 3818 */ 's', 's', 'u', 'b', 'w', '.', '2', 'd', 9, 0,
  /* 3828 */ 'u', 's', 'u', 'b', 'w', '.', '2', 'd', 9, 0,
  /* 3838 */ 's', 'a', 'd', 'd', 'w', '.', '2', 'd', 9, 0,
  /* 3848 */ 'u', 'a', 'd', 'd', 'w', '.', '2', 'd', 9, 0,
  /* 3858 */ 'f', 'm', 'a', 'x', '.', '2', 'd', 9, 0,
  /* 3867 */ 'f', 'm', 'u', 'l', 'x', '.', '2', 'd', 9, 0,
  /* 3877 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '2', 'd', 9, 0,
  /* 3888 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '2', 'd', 9, 0,
  /* 3899 */ 'f', 'a', 'b', 'd', 9, 0,
  /* 3905 */ 'f', 'a', 'd', 'd', 9, 0,
  /* 3911 */ 'f', 'm', 'a', 'd', 'd', 9, 0,
  /* 3918 */ 'f', 'n', 'm', 'a', 'd', 'd', 9, 0,
  /* 3926 */ 'u', 's', 'q', 'a', 'd', 'd', 9, 0,
  /* 3934 */ 's', 'u', 'q', 'a', 'd', 'd', 9, 0,
  /* 3942 */ 'a', 'n', 'd', 9, 0,
  /* 3947 */ 'f', 'a', 'c', 'g', 'e', 9, 0,
  /* 3954 */ 'f', 'c', 'm', 'g', 'e', 9, 0,
  /* 3961 */ 'f', 'c', 'm', 'l', 'e', 9, 0,
  /* 3968 */ 'f', 'r', 'e', 'c', 'p', 'e', 9, 0,
  /* 3976 */ 'f', 'c', 'c', 'm', 'p', 'e', 9, 0,
  /* 3984 */ 'f', 'c', 'm', 'p', 'e', 9, 0,
  /* 3991 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 9, 0,
  /* 4000 */ 's', 'c', 'v', 't', 'f', 9, 0,
  /* 4007 */ 'u', 'c', 'v', 't', 'f', 9, 0,
  /* 4014 */ 'f', 'n', 'e', 'g', 9, 0,
  /* 4020 */ 's', 'q', 'n', 'e', 'g', 9, 0,
  /* 4027 */ 'c', 's', 'n', 'e', 'g', 9, 0,
  /* 4034 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', 'h', 9, 0,
  /* 4046 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', 'h', 9, 0,
  /* 4057 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', 'h', 9, 0,
  /* 4069 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', 'h', 9, 0,
  /* 4081 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', 'h', 9, 0,
  /* 4092 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', 'h', 9, 0,
  /* 4103 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', 'h', 9, 0,
  /* 4114 */ 'i', 'n', 's', '.', 'h', 9, 0,
  /* 4121 */ 's', 'm', 'o', 'v', '.', 'h', 9, 0,
  /* 4129 */ 'u', 'm', 'o', 'v', '.', 'h', 9, 0,
  /* 4137 */ 's', 'h', 'a', '1', 'h', 9, 0,
  /* 4144 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 4152 */ 't', 'r', 'n', '1', '.', '4', 'h', 9, 0,
  /* 4161 */ 'z', 'i', 'p', '1', '.', '4', 'h', 9, 0,
  /* 4170 */ 'u', 'z', 'p', '1', '.', '4', 'h', 9, 0,
  /* 4179 */ 'r', 'e', 'v', '3', '2', '.', '4', 'h', 9, 0,
  /* 4189 */ 't', 'r', 'n', '2', '.', '4', 'h', 9, 0,
  /* 4198 */ 'z', 'i', 'p', '2', '.', '4', 'h', 9, 0,
  /* 4207 */ 'u', 'z', 'p', '2', '.', '4', 'h', 9, 0,
  /* 4216 */ 'r', 'e', 'v', '6', '4', '.', '4', 'h', 9, 0,
  /* 4226 */ 's', 'a', 'b', 'a', '.', '4', 'h', 9, 0,
  /* 4235 */ 'u', 'a', 'b', 'a', '.', '4', 'h', 9, 0,
  /* 4244 */ 'm', 'l', 'a', '.', '4', 'h', 9, 0,
  /* 4252 */ 's', 'r', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4262 */ 'u', 'r', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4272 */ 's', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4281 */ 'u', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4290 */ 's', 'h', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4300 */ 'u', 'h', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4310 */ 's', 'q', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4320 */ 'u', 'q', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4330 */ 'b', 'i', 'c', '.', '4', 'h', 9, 0,
  /* 4338 */ 's', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 4347 */ 'u', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 4356 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4367 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4378 */ 's', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4388 */ 'u', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4398 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4409 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4420 */ 'c', 'm', 'g', 'e', '.', '4', 'h', 9, 0,
  /* 4429 */ 'c', 'm', 'l', 'e', '.', '4', 'h', 9, 0,
  /* 4438 */ 's', 'q', 'n', 'e', 'g', '.', '4', 'h', 9, 0,
  /* 4448 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '4', 'h', 9, 0,
  /* 4461 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '4', 'h', 9, 0,
  /* 4473 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '4', 'h', 9, 0,
  /* 4486 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '4', 'h', 9, 0,
  /* 4499 */ 'c', 'm', 'h', 'i', '.', '4', 'h', 9, 0,
  /* 4508 */ 's', 'l', 'i', '.', '4', 'h', 9, 0,
  /* 4516 */ 'm', 'v', 'n', 'i', '.', '4', 'h', 9, 0,
  /* 4525 */ 's', 'r', 'i', '.', '4', 'h', 9, 0,
  /* 4533 */ 'm', 'o', 'v', 'i', '.', '4', 'h', 9, 0,
  /* 4542 */ 's', 'q', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4552 */ 'u', 'q', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4562 */ 's', 'q', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4573 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4584 */ 's', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4594 */ 'u', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4604 */ 's', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4613 */ 'u', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 4622 */ 'm', 'u', 'l', '.', '4', 'h', 9, 0,
  /* 4630 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '4', 'h', 9, 0,
  /* 4641 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '4', 'h', 9, 0,
  /* 4652 */ 's', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 4661 */ 'u', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 4670 */ 's', 'q', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 4681 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 4692 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 4704 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 4716 */ 's', 'q', 'x', 't', 'n', '.', '4', 'h', 9, 0,
  /* 4726 */ 'u', 'q', 'x', 't', 'n', '.', '4', 'h', 9, 0,
  /* 4736 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 4748 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 4761 */ 's', 'q', 'x', 't', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 4772 */ 'a', 'd', 'd', 'p', '.', '4', 'h', 9, 0,
  /* 4781 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 4792 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 4803 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 4814 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 4825 */ 's', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 4835 */ 'u', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 4845 */ 'd', 'u', 'p', '.', '4', 'h', 9, 0,
  /* 4853 */ 's', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 4863 */ 'u', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 4873 */ 'c', 'm', 'e', 'q', '.', '4', 'h', 9, 0,
  /* 4882 */ 's', 'r', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 4892 */ 'u', 'r', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 4902 */ 's', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 4911 */ 'u', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 4920 */ 'o', 'r', 'r', '.', '4', 'h', 9, 0,
  /* 4928 */ 's', 'q', 'a', 'b', 's', '.', '4', 'h', 9, 0,
  /* 4938 */ 'c', 'm', 'h', 's', '.', '4', 'h', 9, 0,
  /* 4947 */ 'c', 'l', 's', '.', '4', 'h', 9, 0,
  /* 4955 */ 'm', 'l', 's', '.', '4', 'h', 9, 0,
  /* 4963 */ 'c', 'm', 'g', 't', '.', '4', 'h', 9, 0,
  /* 4972 */ 'c', 'm', 'l', 't', '.', '4', 'h', 9, 0,
  /* 4981 */ 'c', 'm', 't', 's', 't', '.', '4', 'h', 9, 0,
  /* 4991 */ 's', 'q', 's', 'h', 'l', 'u', '.', '4', 'h', 9, 0,
  /* 5002 */ 'a', 'd', 'd', 'v', '.', '4', 'h', 9, 0,
  /* 5011 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '4', 'h', 9, 0,
  /* 5022 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '4', 'h', 9, 0,
  /* 5033 */ 's', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 5043 */ 'u', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 5053 */ 's', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 5063 */ 'u', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 5073 */ 's', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 5082 */ 'u', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 5091 */ 'c', 'l', 'z', '.', '4', 'h', 9, 0,
  /* 5099 */ 't', 'r', 'n', '1', '.', '8', 'h', 9, 0,
  /* 5108 */ 'z', 'i', 'p', '1', '.', '8', 'h', 9, 0,
  /* 5117 */ 'u', 'z', 'p', '1', '.', '8', 'h', 9, 0,
  /* 5126 */ 'r', 'e', 'v', '3', '2', '.', '8', 'h', 9, 0,
  /* 5136 */ 's', 'a', 'b', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5147 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5158 */ 's', 'm', 'l', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5169 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5180 */ 's', 's', 'u', 'b', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5191 */ 'u', 's', 'u', 'b', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5202 */ 's', 'a', 'b', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5213 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5224 */ 's', 'a', 'd', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5235 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5246 */ 's', 's', 'h', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5257 */ 'u', 's', 'h', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5268 */ 'p', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5279 */ 's', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5290 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5301 */ 's', 'm', 'l', 's', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5312 */ 'u', 'm', 'l', 's', 'l', '2', '.', '8', 'h', 9, 0,
  /* 5323 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5335 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5347 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5359 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5371 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5384 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5397 */ 't', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5406 */ 's', 'q', 'x', 't', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5417 */ 'u', 'q', 'x', 't', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5428 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5441 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5455 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 5467 */ 'z', 'i', 'p', '2', '.', '8', 'h', 9, 0,
  /* 5476 */ 'u', 'z', 'p', '2', '.', '8', 'h', 9, 0,
  /* 5485 */ 's', 's', 'u', 'b', 'w', '2', '.', '8', 'h', 9, 0,
  /* 5496 */ 'u', 's', 'u', 'b', 'w', '2', '.', '8', 'h', 9, 0,
  /* 5507 */ 's', 'a', 'd', 'd', 'w', '2', '.', '8', 'h', 9, 0,
  /* 5518 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '8', 'h', 9, 0,
  /* 5529 */ 'r', 'e', 'v', '6', '4', '.', '8', 'h', 9, 0,
  /* 5539 */ 's', 'a', 'b', 'a', '.', '8', 'h', 9, 0,
  /* 5548 */ 'u', 'a', 'b', 'a', '.', '8', 'h', 9, 0,
  /* 5557 */ 'm', 'l', 'a', '.', '8', 'h', 9, 0,
  /* 5565 */ 's', 'r', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 5575 */ 'u', 'r', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 5585 */ 's', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 5594 */ 'u', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 5603 */ 's', 'h', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 5613 */ 'u', 'h', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 5623 */ 's', 'q', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 5633 */ 'u', 'q', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 5643 */ 'b', 'i', 'c', '.', '8', 'h', 9, 0,
  /* 5651 */ 's', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 5660 */ 'u', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 5669 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 5680 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 5691 */ 's', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 5701 */ 'u', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 5711 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 5722 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 5733 */ 'c', 'm', 'g', 'e', '.', '8', 'h', 9, 0,
  /* 5742 */ 'c', 'm', 'l', 'e', '.', '8', 'h', 9, 0,
  /* 5751 */ 's', 'q', 'n', 'e', 'g', '.', '8', 'h', 9, 0,
  /* 5761 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '8', 'h', 9, 0,
  /* 5774 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '8', 'h', 9, 0,
  /* 5786 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '8', 'h', 9, 0,
  /* 5799 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '8', 'h', 9, 0,
  /* 5812 */ 'c', 'm', 'h', 'i', '.', '8', 'h', 9, 0,
  /* 5821 */ 's', 'l', 'i', '.', '8', 'h', 9, 0,
  /* 5829 */ 'm', 'v', 'n', 'i', '.', '8', 'h', 9, 0,
  /* 5838 */ 's', 'r', 'i', '.', '8', 'h', 9, 0,
  /* 5846 */ 'm', 'o', 'v', 'i', '.', '8', 'h', 9, 0,
  /* 5855 */ 's', 'a', 'b', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 5865 */ 'u', 'a', 'b', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 5875 */ 's', 'm', 'l', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 5885 */ 'u', 'm', 'l', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 5895 */ 's', 's', 'u', 'b', 'l', '.', '8', 'h', 9, 0,
  /* 5905 */ 'u', 's', 'u', 'b', 'l', '.', '8', 'h', 9, 0,
  /* 5915 */ 's', 'a', 'b', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 5925 */ 'u', 'a', 'b', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 5935 */ 's', 'a', 'd', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 5945 */ 'u', 'a', 'd', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 5955 */ 's', 'q', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 5965 */ 'u', 'q', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 5975 */ 's', 'q', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 5986 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 5997 */ 's', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 6007 */ 'u', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 6017 */ 's', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 6026 */ 'u', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 6035 */ 's', 's', 'h', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 6045 */ 'u', 's', 'h', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 6055 */ 'p', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 6065 */ 's', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 6075 */ 'u', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 6085 */ 's', 'm', 'l', 's', 'l', '.', '8', 'h', 9, 0,
  /* 6095 */ 'u', 'm', 'l', 's', 'l', '.', '8', 'h', 9, 0,
  /* 6105 */ 'm', 'u', 'l', '.', '8', 'h', 9, 0,
  /* 6113 */ 's', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 6122 */ 'u', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 6131 */ 'a', 'd', 'd', 'p', '.', '8', 'h', 9, 0,
  /* 6140 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 6151 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 6162 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 6173 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 6184 */ 's', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 6194 */ 'u', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 6204 */ 'd', 'u', 'p', '.', '8', 'h', 9, 0,
  /* 6212 */ 's', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 6222 */ 'u', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 6232 */ 'c', 'm', 'e', 'q', '.', '8', 'h', 9, 0,
  /* 6241 */ 's', 'r', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 6251 */ 'u', 'r', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 6261 */ 's', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 6270 */ 'u', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 6279 */ 'o', 'r', 'r', '.', '8', 'h', 9, 0,
  /* 6287 */ 's', 'q', 'a', 'b', 's', '.', '8', 'h', 9, 0,
  /* 6297 */ 'c', 'm', 'h', 's', '.', '8', 'h', 9, 0,
  /* 6306 */ 'c', 'l', 's', '.', '8', 'h', 9, 0,
  /* 6314 */ 'm', 'l', 's', '.', '8', 'h', 9, 0,
  /* 6322 */ 'c', 'm', 'g', 't', '.', '8', 'h', 9, 0,
  /* 6331 */ 'c', 'm', 'l', 't', '.', '8', 'h', 9, 0,
  /* 6340 */ 'c', 'm', 't', 's', 't', '.', '8', 'h', 9, 0,
  /* 6350 */ 's', 'q', 's', 'h', 'l', 'u', '.', '8', 'h', 9, 0,
  /* 6361 */ 'a', 'd', 'd', 'v', '.', '8', 'h', 9, 0,
  /* 6370 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '8', 'h', 9, 0,
  /* 6381 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '8', 'h', 9, 0,
  /* 6392 */ 's', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 6402 */ 'u', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 6412 */ 's', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 6422 */ 'u', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 6432 */ 's', 's', 'u', 'b', 'w', '.', '8', 'h', 9, 0,
  /* 6442 */ 'u', 's', 'u', 'b', 'w', '.', '8', 'h', 9, 0,
  /* 6452 */ 's', 'a', 'd', 'd', 'w', '.', '8', 'h', 9, 0,
  /* 6462 */ 'u', 'a', 'd', 'd', 'w', '.', '8', 'h', 9, 0,
  /* 6472 */ 's', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 6481 */ 'u', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 6490 */ 'c', 'l', 'z', '.', '8', 'h', 9, 0,
  /* 6498 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', 9, 0,
  /* 6508 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 6517 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 6526 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 6536 */ 's', 'm', 'u', 'l', 'h', 9, 0,
  /* 6543 */ 'u', 'm', 'u', 'l', 'h', 9, 0,
  /* 6550 */ 'l', 'd', 'a', 'r', 'h', 9, 0,
  /* 6557 */ 'l', 'd', 'l', 'a', 'r', 'h', 9, 0,
  /* 6565 */ 'l', 'd', 'r', 'h', 9, 0,
  /* 6571 */ 's', 't', 'l', 'l', 'r', 'h', 9, 0,
  /* 6579 */ 's', 't', 'l', 'r', 'h', 9, 0,
  /* 6586 */ 'l', 'd', 't', 'r', 'h', 9, 0,
  /* 6593 */ 's', 't', 'r', 'h', 9, 0,
  /* 6599 */ 's', 't', 't', 'r', 'h', 9, 0,
  /* 6606 */ 'l', 'd', 'u', 'r', 'h', 9, 0,
  /* 6613 */ 's', 't', 'u', 'r', 'h', 9, 0,
  /* 6620 */ 'l', 'd', 'a', 'x', 'r', 'h', 9, 0,
  /* 6628 */ 'l', 'd', 'x', 'r', 'h', 9, 0,
  /* 6635 */ 's', 't', 'l', 'x', 'r', 'h', 9, 0,
  /* 6643 */ 's', 't', 'x', 'r', 'h', 9, 0,
  /* 6650 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', 9, 0,
  /* 6660 */ 'l', 'd', 'r', 's', 'h', 9, 0,
  /* 6667 */ 'l', 'd', 't', 'r', 's', 'h', 9, 0,
  /* 6675 */ 'l', 'd', 'u', 'r', 's', 'h', 9, 0,
  /* 6683 */ 'c', 'm', 'h', 'i', 9, 0,
  /* 6689 */ 's', 'l', 'i', 9, 0,
  /* 6694 */ 's', 'r', 'i', 9, 0,
  /* 6699 */ 'f', 'r', 'i', 'n', 't', 'i', 9, 0,
  /* 6707 */ 'm', 'o', 'v', 'i', 9, 0,
  /* 6713 */ 'b', 'r', 'k', 9, 0,
  /* 6718 */ 'm', 'o', 'v', 'k', 9, 0,
  /* 6724 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', 9, 0,
  /* 6733 */ 't', 'b', 'l', 9, 0,
  /* 6738 */ 's', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 6746 */ 'u', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 6754 */ 's', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 6762 */ 'u', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 6770 */ 'f', 'c', 's', 'e', 'l', 9, 0,
  /* 6777 */ 's', 'q', 's', 'h', 'l', 9, 0,
  /* 6784 */ 'u', 'q', 's', 'h', 'l', 9, 0,
  /* 6791 */ 's', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 6799 */ 'u', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 6807 */ 's', 'r', 's', 'h', 'l', 9, 0,
  /* 6814 */ 'u', 'r', 's', 'h', 'l', 9, 0,
  /* 6821 */ 's', 's', 'h', 'l', 9, 0,
  /* 6827 */ 'u', 's', 'h', 'l', 9, 0,
  /* 6833 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', 9, 0,
  /* 6842 */ 's', 'q', 'd', 'm', 'l', 's', 'l', 9, 0,
  /* 6851 */ 's', 'y', 's', 'l', 9, 0,
  /* 6857 */ 'f', 'c', 'v', 't', 'l', 9, 0,
  /* 6864 */ 'f', 'm', 'u', 'l', 9, 0,
  /* 6870 */ 'f', 'n', 'm', 'u', 'l', 9, 0,
  /* 6877 */ 's', 'b', 'f', 'm', 9, 0,
  /* 6883 */ 'u', 'b', 'f', 'm', 9, 0,
  /* 6889 */ 'p', 'r', 'f', 'm', 9, 0,
  /* 6895 */ 'f', 'm', 'i', 'n', 'n', 'm', 9, 0,
  /* 6903 */ 'f', 'm', 'a', 'x', 'n', 'm', 9, 0,
  /* 6911 */ 'f', 'r', 'i', 'n', 't', 'm', 9, 0,
  /* 6919 */ 'p', 'r', 'f', 'u', 'm', 9, 0,
  /* 6926 */ 'f', 'm', 'i', 'n', 9, 0,
  /* 6932 */ 'c', 'c', 'm', 'n', 9, 0,
  /* 6938 */ 'e', 'o', 'n', 9, 0,
  /* 6943 */ 's', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 6951 */ 'u', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 6959 */ 's', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 6968 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 6977 */ 'o', 'r', 'n', 9, 0,
  /* 6982 */ 'f', 'r', 'i', 'n', 't', 'n', 9, 0,
  /* 6990 */ 'f', 'c', 'v', 't', 'n', 9, 0,
  /* 6997 */ 's', 'q', 'x', 't', 'n', 9, 0,
  /* 7004 */ 'u', 'q', 'x', 't', 'n', 9, 0,
  /* 7011 */ 's', 'q', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 7020 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 7030 */ 's', 'q', 'x', 't', 'u', 'n', 9, 0,
  /* 7038 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 7044 */ 'f', 'c', 'v', 't', 'x', 'n', 9, 0,
  /* 7052 */ 'l', 'd', 'p', 9, 0,
  /* 7057 */ 'f', 'c', 'c', 'm', 'p', 9, 0,
  /* 7064 */ 'f', 'c', 'm', 'p', 9, 0,
  /* 7070 */ 'l', 'd', 'n', 'p', 9, 0,
  /* 7076 */ 's', 't', 'n', 'p', 9, 0,
  /* 7082 */ 'a', 'd', 'r', 'p', 9, 0,
  /* 7088 */ 'f', 'r', 'i', 'n', 't', 'p', 9, 0,
  /* 7096 */ 's', 't', 'p', 9, 0,
  /* 7101 */ 'l', 'd', 'a', 'x', 'p', 9, 0,
  /* 7108 */ 'l', 'd', 'x', 'p', 9, 0,
  /* 7114 */ 's', 't', 'l', 'x', 'p', 9, 0,
  /* 7121 */ 's', 't', 'x', 'p', 9, 0,
  /* 7127 */ 'p', 'm', 'u', 'l', 'l', '2', '.', '1', 'q', 9, 0,
  /* 7138 */ 'p', 'm', 'u', 'l', 'l', '.', '1', 'q', 9, 0,
  /* 7148 */ 'f', 'c', 'm', 'e', 'q', 9, 0,
  /* 7155 */ 'l', 'd', '1', 'r', 9, 0,
  /* 7161 */ 'l', 'd', '2', 'r', 9, 0,
  /* 7167 */ 'l', 'd', '3', 'r', 9, 0,
  /* 7173 */ 'l', 'd', '4', 'r', 9, 0,
  /* 7179 */ 'l', 'd', 'a', 'r', 9, 0,
  /* 7185 */ 'l', 'd', 'l', 'a', 'r', 9, 0,
  /* 7192 */ 'b', 'r', 9, 0,
  /* 7196 */ 'a', 'd', 'r', 9, 0,
  /* 7201 */ 'l', 'd', 'r', 9, 0,
  /* 7206 */ 's', 'r', 's', 'h', 'r', 9, 0,
  /* 7213 */ 'u', 'r', 's', 'h', 'r', 9, 0,
  /* 7220 */ 's', 's', 'h', 'r', 9, 0,
  /* 7226 */ 'u', 's', 'h', 'r', 9, 0,
  /* 7232 */ 'b', 'l', 'r', 9, 0,
  /* 7237 */ 's', 't', 'l', 'l', 'r', 9, 0,
  /* 7244 */ 's', 't', 'l', 'r', 9, 0,
  /* 7250 */ 'e', 'o', 'r', 9, 0,
  /* 7255 */ 'r', 'o', 'r', 9, 0,
  /* 7260 */ 'o', 'r', 'r', 9, 0,
  /* 7265 */ 'a', 's', 'r', 9, 0,
  /* 7270 */ 'l', 's', 'r', 9, 0,
  /* 7275 */ 'm', 's', 'r', 9, 0,
  /* 7280 */ 'l', 'd', 't', 'r', 9, 0,
  /* 7286 */ 's', 't', 'r', 9, 0,
  /* 7291 */ 's', 't', 't', 'r', 9, 0,
  /* 7297 */ 'e', 'x', 't', 'r', 9, 0,
  /* 7303 */ 'l', 'd', 'u', 'r', 9, 0,
  /* 7309 */ 's', 't', 'u', 'r', 9, 0,
  /* 7315 */ 'l', 'd', 'a', 'x', 'r', 9, 0,
  /* 7322 */ 'l', 'd', 'x', 'r', 9, 0,
  /* 7328 */ 's', 't', 'l', 'x', 'r', 9, 0,
  /* 7335 */ 's', 't', 'x', 'r', 9, 0,
  /* 7341 */ 'f', 'm', 'l', 'a', '.', 's', 9, 0,
  /* 7349 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', 's', 9, 0,
  /* 7361 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', 's', 9, 0,
  /* 7372 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', 's', 9, 0,
  /* 7384 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', 's', 9, 0,
  /* 7396 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', 's', 9, 0,
  /* 7407 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', 's', 9, 0,
  /* 7418 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', 's', 9, 0,
  /* 7429 */ 'f', 'm', 'u', 'l', '.', 's', 9, 0,
  /* 7437 */ 'f', 'm', 'l', 's', '.', 's', 9, 0,
  /* 7445 */ 'i', 'n', 's', '.', 's', 9, 0,
  /* 7452 */ 's', 'm', 'o', 'v', '.', 's', 9, 0,
  /* 7460 */ 'u', 'm', 'o', 'v', '.', 's', 9, 0,
  /* 7468 */ 'f', 'm', 'u', 'l', 'x', '.', 's', 9, 0,
  /* 7477 */ 't', 'r', 'n', '1', '.', '2', 's', 9, 0,
  /* 7486 */ 'z', 'i', 'p', '1', '.', '2', 's', 9, 0,
  /* 7495 */ 'u', 'z', 'p', '1', '.', '2', 's', 9, 0,
  /* 7504 */ 't', 'r', 'n', '2', '.', '2', 's', 9, 0,
  /* 7513 */ 'z', 'i', 'p', '2', '.', '2', 's', 9, 0,
  /* 7522 */ 'u', 'z', 'p', '2', '.', '2', 's', 9, 0,
  /* 7531 */ 'r', 'e', 'v', '6', '4', '.', '2', 's', 9, 0,
  /* 7541 */ 's', 'a', 'b', 'a', '.', '2', 's', 9, 0,
  /* 7550 */ 'u', 'a', 'b', 'a', '.', '2', 's', 9, 0,
  /* 7559 */ 'f', 'm', 'l', 'a', '.', '2', 's', 9, 0,
  /* 7568 */ 's', 'r', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 7578 */ 'u', 'r', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 7588 */ 's', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 7597 */ 'u', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 7606 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '2', 's', 9, 0,
  /* 7617 */ 'f', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 7626 */ 's', 'h', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 7636 */ 'u', 'h', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 7646 */ 's', 'q', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 7656 */ 'u', 'q', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 7666 */ 'b', 'i', 'c', '.', '2', 's', 9, 0,
  /* 7674 */ 'f', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 7683 */ 's', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 7692 */ 'u', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 7701 */ 'f', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 7710 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 7721 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 7732 */ 's', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 7742 */ 'u', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 7752 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 7763 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 7774 */ 'f', 'a', 'c', 'g', 'e', '.', '2', 's', 9, 0,
  /* 7784 */ 'f', 'c', 'm', 'g', 'e', '.', '2', 's', 9, 0,
  /* 7794 */ 'f', 'c', 'm', 'l', 'e', '.', '2', 's', 9, 0,
  /* 7804 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '2', 's', 9, 0,
  /* 7815 */ 'u', 'r', 'e', 'c', 'p', 'e', '.', '2', 's', 9, 0,
  /* 7826 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 's', 9, 0,
  /* 7838 */ 'u', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 's', 9, 0,
  /* 7850 */ 's', 'c', 'v', 't', 'f', '.', '2', 's', 9, 0,
  /* 7860 */ 'u', 'c', 'v', 't', 'f', '.', '2', 's', 9, 0,
  /* 7870 */ 'f', 'n', 'e', 'g', '.', '2', 's', 9, 0,
  /* 7879 */ 's', 'q', 'n', 'e', 'g', '.', '2', 's', 9, 0,
  /* 7889 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '2', 's', 9, 0,
  /* 7902 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '2', 's', 9, 0,
  /* 7914 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '2', 's', 9, 0,
  /* 7927 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '2', 's', 9, 0,
  /* 7940 */ 'c', 'm', 'h', 'i', '.', '2', 's', 9, 0,
  /* 7949 */ 's', 'l', 'i', '.', '2', 's', 9, 0,
  /* 7957 */ 'm', 'v', 'n', 'i', '.', '2', 's', 9, 0,
  /* 7966 */ 's', 'r', 'i', '.', '2', 's', 9, 0,
  /* 7974 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '2', 's', 9, 0,
  /* 7985 */ 'm', 'o', 'v', 'i', '.', '2', 's', 9, 0,
  /* 7994 */ 's', 'q', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 8004 */ 'u', 'q', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 8014 */ 's', 'q', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 8025 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 8036 */ 's', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 8046 */ 'u', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 8056 */ 's', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 8065 */ 'u', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 8074 */ 'f', 'm', 'u', 'l', '.', '2', 's', 9, 0,
  /* 8083 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '2', 's', 9, 0,
  /* 8094 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '2', 's', 9, 0,
  /* 8105 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '2', 's', 9, 0,
  /* 8116 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '2', 's', 9, 0,
  /* 8127 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '2', 's', 9, 0,
  /* 8138 */ 'f', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 8147 */ 's', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 8156 */ 'u', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 8165 */ 's', 'q', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 8176 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 8187 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 8199 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 8211 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '2', 's', 9, 0,
  /* 8222 */ 's', 'q', 'x', 't', 'n', '.', '2', 's', 9, 0,
  /* 8232 */ 'u', 'q', 'x', 't', 'n', '.', '2', 's', 9, 0,
  /* 8242 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '2', 's', 9, 0,
  /* 8254 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '2', 's', 9, 0,
  /* 8267 */ 's', 'q', 'x', 't', 'u', 'n', '.', '2', 's', 9, 0,
  /* 8278 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 's', 9, 0,
  /* 8288 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '2', 's', 9, 0,
  /* 8299 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '2', 's', 9, 0,
  /* 8310 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '2', 's', 9, 0,
  /* 8321 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '2', 's', 9, 0,
  /* 8332 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 's', 9, 0,
  /* 8344 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 's', 9, 0,
  /* 8356 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 8366 */ 's', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 8376 */ 'u', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 8386 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '2', 's', 9, 0,
  /* 8397 */ 'd', 'u', 'p', '.', '2', 's', 9, 0,
  /* 8405 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 8415 */ 's', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 8425 */ 'u', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 8435 */ 'f', 'c', 'm', 'e', 'q', '.', '2', 's', 9, 0,
  /* 8445 */ 's', 'r', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 8455 */ 'u', 'r', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 8465 */ 's', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 8474 */ 'u', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 8483 */ 'o', 'r', 'r', '.', '2', 's', 9, 0,
  /* 8491 */ 'f', 'c', 'v', 't', 'a', 's', '.', '2', 's', 9, 0,
  /* 8502 */ 'f', 'a', 'b', 's', '.', '2', 's', 9, 0,
  /* 8511 */ 's', 'q', 'a', 'b', 's', '.', '2', 's', 9, 0,
  /* 8521 */ 'c', 'm', 'h', 's', '.', '2', 's', 9, 0,
  /* 8530 */ 'c', 'l', 's', '.', '2', 's', 9, 0,
  /* 8538 */ 'f', 'm', 'l', 's', '.', '2', 's', 9, 0,
  /* 8547 */ 'f', 'c', 'v', 't', 'm', 's', '.', '2', 's', 9, 0,
  /* 8558 */ 'f', 'c', 'v', 't', 'n', 's', '.', '2', 's', 9, 0,
  /* 8569 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '2', 's', 9, 0,
  /* 8580 */ 'f', 'c', 'v', 't', 'p', 's', '.', '2', 's', 9, 0,
  /* 8591 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '2', 's', 9, 0,
  /* 8603 */ 'f', 'c', 'v', 't', 'z', 's', '.', '2', 's', 9, 0,
  /* 8614 */ 'f', 'a', 'c', 'g', 't', '.', '2', 's', 9, 0,
  /* 8624 */ 'f', 'c', 'm', 'g', 't', '.', '2', 's', 9, 0,
  /* 8634 */ 'f', 'c', 'm', 'l', 't', '.', '2', 's', 9, 0,
  /* 8644 */ 'f', 's', 'q', 'r', 't', '.', '2', 's', 9, 0,
  /* 8654 */ 'c', 'm', 't', 's', 't', '.', '2', 's', 9, 0,
  /* 8664 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '2', 's', 9, 0,
  /* 8675 */ 's', 'q', 's', 'h', 'l', 'u', '.', '2', 's', 9, 0,
  /* 8686 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '2', 's', 9, 0,
  /* 8697 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '2', 's', 9, 0,
  /* 8708 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '2', 's', 9, 0,
  /* 8719 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '2', 's', 9, 0,
  /* 8730 */ 'f', 'd', 'i', 'v', '.', '2', 's', 9, 0,
  /* 8739 */ 'f', 'm', 'o', 'v', '.', '2', 's', 9, 0,
  /* 8748 */ 'f', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 8757 */ 's', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 8766 */ 'u', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 8775 */ 'f', 'm', 'u', 'l', 'x', '.', '2', 's', 9, 0,
  /* 8785 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '2', 's', 9, 0,
  /* 8796 */ 'c', 'l', 'z', '.', '2', 's', 9, 0,
  /* 8804 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '2', 's', 9, 0,
  /* 8815 */ 's', 'h', 'a', '1', 's', 'u', '0', '.', '4', 's', 9, 0,
  /* 8827 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '0', '.', '4', 's', 9, 0,
  /* 8841 */ 't', 'r', 'n', '1', '.', '4', 's', 9, 0,
  /* 8850 */ 'z', 'i', 'p', '1', '.', '4', 's', 9, 0,
  /* 8859 */ 'u', 'z', 'p', '1', '.', '4', 's', 9, 0,
  /* 8868 */ 's', 'h', 'a', '1', 's', 'u', '1', '.', '4', 's', 9, 0,
  /* 8880 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '1', '.', '4', 's', 9, 0,
  /* 8894 */ 's', 'h', 'a', '2', '5', '6', 'h', '2', '.', '4', 's', 9, 0,
  /* 8907 */ 's', 'a', 'b', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 8918 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 8929 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 8942 */ 's', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 8953 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 8964 */ 's', 's', 'u', 'b', 'l', '2', '.', '4', 's', 9, 0,
  /* 8975 */ 'u', 's', 'u', 'b', 'l', '2', '.', '4', 's', 9, 0,
  /* 8986 */ 's', 'a', 'b', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 8997 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 9008 */ 's', 'a', 'd', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 9019 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 9030 */ 's', 's', 'h', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 9041 */ 'u', 's', 'h', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 9052 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 9065 */ 's', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 9076 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 9087 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 9100 */ 's', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 9111 */ 'u', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 9122 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '4', 's', 9, 0,
  /* 9134 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '4', 's', 9, 0,
  /* 9146 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 9158 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 9170 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 9183 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 9196 */ 't', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 9205 */ 's', 'q', 'x', 't', 'n', '2', '.', '4', 's', 9, 0,
  /* 9216 */ 'u', 'q', 'x', 't', 'n', '2', '.', '4', 's', 9, 0,
  /* 9227 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 9240 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 9254 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 9266 */ 'z', 'i', 'p', '2', '.', '4', 's', 9, 0,
  /* 9275 */ 'u', 'z', 'p', '2', '.', '4', 's', 9, 0,
  /* 9284 */ 's', 's', 'u', 'b', 'w', '2', '.', '4', 's', 9, 0,
  /* 9295 */ 'u', 's', 'u', 'b', 'w', '2', '.', '4', 's', 9, 0,
  /* 9306 */ 's', 'a', 'd', 'd', 'w', '2', '.', '4', 's', 9, 0,
  /* 9317 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '4', 's', 9, 0,
  /* 9328 */ 'r', 'e', 'v', '6', '4', '.', '4', 's', 9, 0,
  /* 9338 */ 's', 'a', 'b', 'a', '.', '4', 's', 9, 0,
  /* 9347 */ 'u', 'a', 'b', 'a', '.', '4', 's', 9, 0,
  /* 9356 */ 'f', 'm', 'l', 'a', '.', '4', 's', 9, 0,
  /* 9365 */ 's', 'r', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 9375 */ 'u', 'r', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 9385 */ 's', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 9394 */ 'u', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 9403 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '4', 's', 9, 0,
  /* 9414 */ 'f', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 9423 */ 's', 'h', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 9433 */ 'u', 'h', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 9443 */ 's', 'q', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 9453 */ 'u', 'q', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 9463 */ 's', 'h', 'a', '1', 'c', '.', '4', 's', 9, 0,
  /* 9473 */ 'b', 'i', 'c', '.', '4', 's', 9, 0,
  /* 9481 */ 'f', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 9490 */ 's', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 9499 */ 'u', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 9508 */ 'f', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 9517 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 9528 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 9539 */ 's', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 9549 */ 'u', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 9559 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 9570 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 9581 */ 'f', 'a', 'c', 'g', 'e', '.', '4', 's', 9, 0,
  /* 9591 */ 'f', 'c', 'm', 'g', 'e', '.', '4', 's', 9, 0,
  /* 9601 */ 'f', 'c', 'm', 'l', 'e', '.', '4', 's', 9, 0,
  /* 9611 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '4', 's', 9, 0,
  /* 9622 */ 'u', 'r', 'e', 'c', 'p', 'e', '.', '4', 's', 9, 0,
  /* 9633 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 's', 9, 0,
  /* 9645 */ 'u', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 's', 9, 0,
  /* 9657 */ 's', 'c', 'v', 't', 'f', '.', '4', 's', 9, 0,
  /* 9667 */ 'u', 'c', 'v', 't', 'f', '.', '4', 's', 9, 0,
  /* 9677 */ 'f', 'n', 'e', 'g', '.', '4', 's', 9, 0,
  /* 9686 */ 's', 'q', 'n', 'e', 'g', '.', '4', 's', 9, 0,
  /* 9696 */ 's', 'h', 'a', '2', '5', '6', 'h', '.', '4', 's', 9, 0,
  /* 9708 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '4', 's', 9, 0,
  /* 9721 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '4', 's', 9, 0,
  /* 9733 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '4', 's', 9, 0,
  /* 9746 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '4', 's', 9, 0,
  /* 9759 */ 'c', 'm', 'h', 'i', '.', '4', 's', 9, 0,
  /* 9768 */ 's', 'l', 'i', '.', '4', 's', 9, 0,
  /* 9776 */ 'm', 'v', 'n', 'i', '.', '4', 's', 9, 0,
  /* 9785 */ 's', 'r', 'i', '.', '4', 's', 9, 0,
  /* 9793 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '4', 's', 9, 0,
  /* 9804 */ 'm', 'o', 'v', 'i', '.', '4', 's', 9, 0,
  /* 9813 */ 's', 'a', 'b', 'a', 'l', '.', '4', 's', 9, 0,
  /* 9823 */ 'u', 'a', 'b', 'a', 'l', '.', '4', 's', 9, 0,
  /* 9833 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 9845 */ 's', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 9855 */ 'u', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 9865 */ 's', 's', 'u', 'b', 'l', '.', '4', 's', 9, 0,
  /* 9875 */ 'u', 's', 'u', 'b', 'l', '.', '4', 's', 9, 0,
  /* 9885 */ 's', 'a', 'b', 'd', 'l', '.', '4', 's', 9, 0,
  /* 9895 */ 'u', 'a', 'b', 'd', 'l', '.', '4', 's', 9, 0,
  /* 9905 */ 's', 'a', 'd', 'd', 'l', '.', '4', 's', 9, 0,
  /* 9915 */ 'u', 'a', 'd', 'd', 'l', '.', '4', 's', 9, 0,
  /* 9925 */ 's', 'q', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9935 */ 'u', 'q', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9945 */ 's', 'q', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9956 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9967 */ 's', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9977 */ 'u', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9987 */ 's', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 9996 */ 'u', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 10005 */ 's', 's', 'h', 'l', 'l', '.', '4', 's', 9, 0,
  /* 10015 */ 'u', 's', 'h', 'l', 'l', '.', '4', 's', 9, 0,
  /* 10025 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 10037 */ 's', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 10047 */ 'u', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 10057 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 10069 */ 's', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 10079 */ 'u', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 10089 */ 'f', 'm', 'u', 'l', '.', '4', 's', 9, 0,
  /* 10098 */ 's', 'h', 'a', '1', 'm', '.', '4', 's', 9, 0,
  /* 10108 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '4', 's', 9, 0,
  /* 10119 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '4', 's', 9, 0,
  /* 10130 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '4', 's', 9, 0,
  /* 10141 */ 'f', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 10150 */ 's', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 10159 */ 'u', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 10168 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '4', 's', 9, 0,
  /* 10179 */ 's', 'h', 'a', '1', 'p', '.', '4', 's', 9, 0,
  /* 10189 */ 'f', 'a', 'd', 'd', 'p', '.', '4', 's', 9, 0,
  /* 10199 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '4', 's', 9, 0,
  /* 10210 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '4', 's', 9, 0,
  /* 10221 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '4', 's', 9, 0,
  /* 10232 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '4', 's', 9, 0,
  /* 10243 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '4', 's', 9, 0,
  /* 10255 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '4', 's', 9, 0,
  /* 10267 */ 'f', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 10277 */ 's', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 10287 */ 'u', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 10297 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '4', 's', 9, 0,
  /* 10308 */ 'd', 'u', 'p', '.', '4', 's', 9, 0,
  /* 10316 */ 'f', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 10326 */ 's', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 10336 */ 'u', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 10346 */ 'f', 'c', 'm', 'e', 'q', '.', '4', 's', 9, 0,
  /* 10356 */ 's', 'r', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 10366 */ 'u', 'r', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 10376 */ 's', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 10385 */ 'u', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 10394 */ 'o', 'r', 'r', '.', '4', 's', 9, 0,
  /* 10402 */ 'f', 'c', 'v', 't', 'a', 's', '.', '4', 's', 9, 0,
  /* 10413 */ 'f', 'a', 'b', 's', '.', '4', 's', 9, 0,
  /* 10422 */ 's', 'q', 'a', 'b', 's', '.', '4', 's', 9, 0,
  /* 10432 */ 'c', 'm', 'h', 's', '.', '4', 's', 9, 0,
  /* 10441 */ 'c', 'l', 's', '.', '4', 's', 9, 0,
  /* 10449 */ 'f', 'm', 'l', 's', '.', '4', 's', 9, 0,
  /* 10458 */ 'f', 'c', 'v', 't', 'm', 's', '.', '4', 's', 9, 0,
  /* 10469 */ 'f', 'c', 'v', 't', 'n', 's', '.', '4', 's', 9, 0,
  /* 10480 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '4', 's', 9, 0,
  /* 10491 */ 'f', 'c', 'v', 't', 'p', 's', '.', '4', 's', 9, 0,
  /* 10502 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '4', 's', 9, 0,
  /* 10514 */ 'f', 'c', 'v', 't', 'z', 's', '.', '4', 's', 9, 0,
  /* 10525 */ 'f', 'a', 'c', 'g', 't', '.', '4', 's', 9, 0,
  /* 10535 */ 'f', 'c', 'm', 'g', 't', '.', '4', 's', 9, 0,
  /* 10545 */ 'f', 'c', 'm', 'l', 't', '.', '4', 's', 9, 0,
  /* 10555 */ 'f', 's', 'q', 'r', 't', '.', '4', 's', 9, 0,
  /* 10565 */ 'c', 'm', 't', 's', 't', '.', '4', 's', 9, 0,
  /* 10575 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '4', 's', 9, 0,
  /* 10586 */ 's', 'q', 's', 'h', 'l', 'u', '.', '4', 's', 9, 0,
  /* 10597 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '4', 's', 9, 0,
  /* 10608 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '4', 's', 9, 0,
  /* 10619 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '4', 's', 9, 0,
  /* 10630 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '4', 's', 9, 0,
  /* 10641 */ 'a', 'd', 'd', 'v', '.', '4', 's', 9, 0,
  /* 10650 */ 'f', 'd', 'i', 'v', '.', '4', 's', 9, 0,
  /* 10659 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '4', 's', 9, 0,
  /* 10670 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '4', 's', 9, 0,
  /* 10681 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', '.', '4', 's', 9, 0,
  /* 10693 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', '.', '4', 's', 9, 0,
  /* 10705 */ 'f', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 10715 */ 's', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 10725 */ 'u', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 10735 */ 'f', 'm', 'o', 'v', '.', '4', 's', 9, 0,
  /* 10744 */ 'f', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 10754 */ 's', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 10764 */ 'u', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 10774 */ 's', 's', 'u', 'b', 'w', '.', '4', 's', 9, 0,
  /* 10784 */ 'u', 's', 'u', 'b', 'w', '.', '4', 's', 9, 0,
  /* 10794 */ 's', 'a', 'd', 'd', 'w', '.', '4', 's', 9, 0,
  /* 10804 */ 'u', 'a', 'd', 'd', 'w', '.', '4', 's', 9, 0,
  /* 10814 */ 'f', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 10823 */ 's', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 10832 */ 'u', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 10841 */ 'f', 'm', 'u', 'l', 'x', '.', '4', 's', 9, 0,
  /* 10851 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '4', 's', 9, 0,
  /* 10862 */ 'c', 'l', 'z', '.', '4', 's', 9, 0,
  /* 10870 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '4', 's', 9, 0,
  /* 10881 */ 'f', 'c', 'v', 't', 'a', 's', 9, 0,
  /* 10889 */ 'f', 'a', 'b', 's', 9, 0,
  /* 10895 */ 's', 'q', 'a', 'b', 's', 9, 0,
  /* 10902 */ 's', 'u', 'b', 's', 9, 0,
  /* 10908 */ 's', 'b', 'c', 's', 9, 0,
  /* 10914 */ 'a', 'd', 'c', 's', 9, 0,
  /* 10920 */ 'b', 'i', 'c', 's', 9, 0,
  /* 10926 */ 'a', 'd', 'd', 's', 9, 0,
  /* 10932 */ 'a', 'n', 'd', 's', 9, 0,
  /* 10938 */ 'c', 'm', 'h', 's', 9, 0,
  /* 10944 */ 'c', 'l', 's', 9, 0,
  /* 10949 */ 'f', 'c', 'v', 't', 'm', 's', 9, 0,
  /* 10957 */ 'f', 'c', 'v', 't', 'n', 's', 9, 0,
  /* 10965 */ 'f', 'r', 'e', 'c', 'p', 's', 9, 0,
  /* 10973 */ 'f', 'c', 'v', 't', 'p', 's', 9, 0,
  /* 10981 */ 'm', 'r', 's', 9, 0,
  /* 10986 */ 'f', 'r', 's', 'q', 'r', 't', 's', 9, 0,
  /* 10995 */ 's', 'y', 's', 9, 0,
  /* 11000 */ 'f', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 11008 */ 'r', 'e', 't', 9, 0,
  /* 11013 */ 'f', 'a', 'c', 'g', 't', 9, 0,
  /* 11020 */ 'f', 'c', 'm', 'g', 't', 9, 0,
  /* 11027 */ 'r', 'b', 'i', 't', 9, 0,
  /* 11033 */ 'h', 'l', 't', 9, 0,
  /* 11038 */ 'f', 'c', 'm', 'l', 't', 9, 0,
  /* 11045 */ 'f', 's', 'q', 'r', 't', 9, 0,
  /* 11052 */ 'c', 'm', 't', 's', 't', 9, 0,
  /* 11059 */ 'f', 'c', 'v', 't', 9, 0,
  /* 11065 */ 'f', 'c', 'v', 't', 'a', 'u', 9, 0,
  /* 11073 */ 's', 'q', 's', 'h', 'l', 'u', 9, 0,
  /* 11081 */ 'f', 'c', 'v', 't', 'm', 'u', 9, 0,
  /* 11089 */ 'f', 'c', 'v', 't', 'n', 'u', 9, 0,
  /* 11097 */ 'f', 'c', 'v', 't', 'p', 'u', 9, 0,
  /* 11105 */ 'f', 'c', 'v', 't', 'z', 'u', 9, 0,
  /* 11113 */ 'r', 'e', 'v', 9, 0,
  /* 11118 */ 'f', 'd', 'i', 'v', 9, 0,
  /* 11124 */ 's', 'd', 'i', 'v', 9, 0,
  /* 11130 */ 'u', 'd', 'i', 'v', 9, 0,
  /* 11136 */ 'c', 's', 'i', 'n', 'v', 9, 0,
  /* 11143 */ 'f', 'm', 'o', 'v', 9, 0,
  /* 11149 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 11157 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 11166 */ 'l', 'd', 'p', 's', 'w', 9, 0,
  /* 11173 */ 'l', 'd', 'r', 's', 'w', 9, 0,
  /* 11180 */ 'l', 'd', 't', 'r', 's', 'w', 9, 0,
  /* 11188 */ 'l', 'd', 'u', 'r', 's', 'w', 9, 0,
  /* 11196 */ 'c', 'r', 'c', '3', '2', 'x', 9, 0,
  /* 11204 */ 'f', 'm', 'a', 'x', 9, 0,
  /* 11210 */ 't', 'b', 'x', 9, 0,
  /* 11215 */ 'c', 'r', 'c', '3', '2', 'c', 'x', 9, 0,
  /* 11224 */ 'c', 'l', 'r', 'e', 'x', 9, 0,
  /* 11231 */ 'f', 'm', 'u', 'l', 'x', 9, 0,
  /* 11238 */ 'f', 'r', 'e', 'c', 'p', 'x', 9, 0,
  /* 11246 */ 'f', 'r', 'i', 'n', 't', 'x', 9, 0,
  /* 11254 */ 'c', 'b', 'z', 9, 0,
  /* 11259 */ 't', 'b', 'z', 9, 0,
  /* 11264 */ 'c', 'l', 'z', 9, 0,
  /* 11269 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 11275 */ 't', 'b', 'n', 'z', 9, 0,
  /* 11281 */ 'f', 'r', 'i', 'n', 't', 'z', 9, 0,
  /* 11289 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 11295 */ '.', 't', 'l', 's', 'd', 'e', 's', 'c', 'c', 'a', 'l', 'l', 32, 0,
  /* 11309 */ 'h', 'i', 'n', 't', 32, 0,
  /* 11315 */ 'b', '.', 0,
  /* 11318 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 11331 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 11338 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 11348 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 11363 */ 'd', 'r', 'p', 's', 0,
  /* 11368 */ 'e', 'r', 'e', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 6 bits for 40 unique commands.
  switch ((Bits >> 14) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, DRPS, ERET
    return;
    break;
  case 1:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 0, STI, O); 
    break;
  case 2:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPv2i64p, ADDSWri, ADDSWrs, ...
    printOperand(MI, 0, STI, O); 
    break;
  case 3:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 1, STI, O); 
    break;
  case 4:
    // B, BL
    printAlignedLabel(MI, 0, STI, O); 
    return;
    break;
  case 5:
    // BRK, DCPS1, DCPS2, DCPS3, HINT, HLT, HVC, SMC, SVC
    printHexImm(MI, 0, STI, O); 
    return;
    break;
  case 6:
    // Bcc
    printCondCode(MI, 0, STI, O); 
    O << "\t"; 
    printAlignedLabel(MI, 1, STI, O); 
    return;
    break;
  case 7:
    // DMB, DSB, ISB
    printBarrierOption(MI, 0, STI, O); 
    return;
    break;
  case 8:
    // FMLAv1i32_indexed, FMLAv1i64_indexed, FMLSv1i32_indexed, FMLSv1i64_ind...
    printOperand(MI, 1, STI, O); 
    break;
  case 9:
    // LD1Fourv16b, LD1Onev16b, LD1Rv16b, LD1Threev16b, LD1Twov16b, LD2Rv16b,...
    printTypedVectorList<16, 'b'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 10:
    // LD1Fourv16b_POST, LD1Onev16b_POST, LD1Rv16b_POST, LD1Threev16b_POST, L...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 11:
    // LD1Fourv1d, LD1Onev1d, LD1Rv1d, LD1Threev1d, LD1Twov1d, LD2Rv1d, LD3Rv...
    printTypedVectorList<1, 'd'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 12:
    // LD1Fourv1d_POST, LD1Onev1d_POST, LD1Rv1d_POST, LD1Threev1d_POST, LD1Tw...
    printTypedVectorList<1, 'd'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 13:
    // LD1Fourv2d, LD1Onev2d, LD1Rv2d, LD1Threev2d, LD1Twov2d, LD2Rv2d, LD2Tw...
    printTypedVectorList<2, 'd'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 14:
    // LD1Fourv2d_POST, LD1Onev2d_POST, LD1Rv2d_POST, LD1Threev2d_POST, LD1Tw...
    printTypedVectorList<2, 'd'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 15:
    // LD1Fourv2s, LD1Onev2s, LD1Rv2s, LD1Threev2s, LD1Twov2s, LD2Rv2s, LD2Tw...
    printTypedVectorList<2, 's'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 16:
    // LD1Fourv2s_POST, LD1Onev2s_POST, LD1Rv2s_POST, LD1Threev2s_POST, LD1Tw...
    printTypedVectorList<2, 's'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 17:
    // LD1Fourv4h, LD1Onev4h, LD1Rv4h, LD1Threev4h, LD1Twov4h, LD2Rv4h, LD2Tw...
    printTypedVectorList<4, 'h'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 18:
    // LD1Fourv4h_POST, LD1Onev4h_POST, LD1Rv4h_POST, LD1Threev4h_POST, LD1Tw...
    printTypedVectorList<4, 'h'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 19:
    // LD1Fourv4s, LD1Onev4s, LD1Rv4s, LD1Threev4s, LD1Twov4s, LD2Rv4s, LD2Tw...
    printTypedVectorList<4, 's'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 20:
    // LD1Fourv4s_POST, LD1Onev4s_POST, LD1Rv4s_POST, LD1Threev4s_POST, LD1Tw...
    printTypedVectorList<4, 's'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 21:
    // LD1Fourv8b, LD1Onev8b, LD1Rv8b, LD1Threev8b, LD1Twov8b, LD2Rv8b, LD2Tw...
    printTypedVectorList<8, 'b'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 22:
    // LD1Fourv8b_POST, LD1Onev8b_POST, LD1Rv8b_POST, LD1Threev8b_POST, LD1Tw...
    printTypedVectorList<8, 'b'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 23:
    // LD1Fourv8h, LD1Onev8h, LD1Rv8h, LD1Threev8h, LD1Twov8h, LD2Rv8h, LD2Tw...
    printTypedVectorList<8, 'h'>(MI, 0, STI, O); 
    O << ", ["; 
    printOperand(MI, 1, STI, O); 
    O << ']'; 
    return;
    break;
  case 24:
    // LD1Fourv8h_POST, LD1Onev8h_POST, LD1Rv8h_POST, LD1Threev8h_POST, LD1Tw...
    printTypedVectorList<8, 'h'>(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << "], "; 
    break;
  case 25:
    // LD1i16, LD2i16, LD3i16, LD4i16, ST1i16_POST, ST2i16_POST, ST3i16_POST,...
    printTypedVectorList<0, 'h'>(MI, 1, STI, O); 
    printVectorIndex(MI, 2, STI, O); 
    O << ", ["; 
    printOperand(MI, 3, STI, O); 
    break;
  case 26:
    // LD1i16_POST, LD2i16_POST, LD3i16_POST, LD4i16_POST
    printTypedVectorList<0, 'h'>(MI, 2, STI, O); 
    printVectorIndex(MI, 3, STI, O); 
    O << ", ["; 
    printOperand(MI, 4, STI, O); 
    O << "], "; 
    break;
  case 27:
    // LD1i32, LD2i32, LD3i32, LD4i32, ST1i32_POST, ST2i32_POST, ST3i32_POST,...
    printTypedVectorList<0, 's'>(MI, 1, STI, O); 
    printVectorIndex(MI, 2, STI, O); 
    O << ", ["; 
    printOperand(MI, 3, STI, O); 
    break;
  case 28:
    // LD1i32_POST, LD2i32_POST, LD3i32_POST, LD4i32_POST
    printTypedVectorList<0, 's'>(MI, 2, STI, O); 
    printVectorIndex(MI, 3, STI, O); 
    O << ", ["; 
    printOperand(MI, 4, STI, O); 
    O << "], "; 
    break;
  case 29:
    // LD1i64, LD2i64, LD3i64, LD4i64, ST1i64_POST, ST2i64_POST, ST3i64_POST,...
    printTypedVectorList<0, 'd'>(MI, 1, STI, O); 
    printVectorIndex(MI, 2, STI, O); 
    O << ", ["; 
    printOperand(MI, 3, STI, O); 
    break;
  case 30:
    // LD1i64_POST, LD2i64_POST, LD3i64_POST, LD4i64_POST
    printTypedVectorList<0, 'd'>(MI, 2, STI, O); 
    printVectorIndex(MI, 3, STI, O); 
    O << ", ["; 
    printOperand(MI, 4, STI, O); 
    O << "], "; 
    break;
  case 31:
    // LD1i8, LD2i8, LD3i8, LD4i8, ST1i8_POST, ST2i8_POST, ST3i8_POST, ST4i8_...
    printTypedVectorList<0, 'b'>(MI, 1, STI, O); 
    printVectorIndex(MI, 2, STI, O); 
    O << ", ["; 
    printOperand(MI, 3, STI, O); 
    break;
  case 32:
    // LD1i8_POST, LD2i8_POST, LD3i8_POST, LD4i8_POST
    printTypedVectorList<0, 'b'>(MI, 2, STI, O); 
    printVectorIndex(MI, 3, STI, O); 
    O << ", ["; 
    printOperand(MI, 4, STI, O); 
    O << "], "; 
    break;
  case 33:
    // MSR
    printMSRSystemRegister(MI, 0, STI, O); 
    O << ", "; 
    printOperand(MI, 1, STI, O); 
    return;
    break;
  case 34:
    // MSRpstate
    printSystemPStateField(MI, 0, STI, O); 
    O << ", "; 
    printOperand(MI, 1, STI, O); 
    return;
    break;
  case 35:
    // PRFMl, PRFMroW, PRFMroX, PRFMui, PRFUMi
    printPrefetchOp(MI, 0, STI, O); 
    break;
  case 36:
    // ST1i16, ST2i16, ST3i16, ST4i16
    printTypedVectorList<0, 'h'>(MI, 0, STI, O); 
    printVectorIndex(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 37:
    // ST1i32, ST2i32, ST3i32, ST4i32
    printTypedVectorList<0, 's'>(MI, 0, STI, O); 
    printVectorIndex(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 38:
    // ST1i64, ST2i64, ST3i64, ST4i64
    printTypedVectorList<0, 'd'>(MI, 0, STI, O); 
    printVectorIndex(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 39:
    // ST1i8, ST2i8, ST3i8, ST4i8
    printTypedVectorList<0, 'b'>(MI, 0, STI, O); 
    printVectorIndex(MI, 1, STI, O); 
    O << ", ["; 
    printOperand(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 1 encoded into 6 bits for 36 unique commands.
  switch ((Bits >> 20) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv1i64, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ...
    O << ", "; 
    break;
  case 1:
    // BLR, BR, CLREX, RET, TLSDESCCALL
    return;
    break;
  case 2:
    // FCMPDri, FCMPEDri, FCMPESri, FCMPSri
    O << ", #0.0"; 
    return;
    break;
  case 3:
    // FCVTLv2i32, FCVTLv4i32
    O << ".2d, "; 
    printVRegOperand(MI, 1, STI, O); 
    break;
  case 4:
    // FCVTLv4i16, FCVTLv8i16, FCVTNv4i32, FCVTXNv4f32
    O << ".4s, "; 
    break;
  case 5:
    // FCVTNv2i32, FCVTXNv2f32
    O << ".2s, "; 
    printVRegOperand(MI, 1, STI, O); 
    O << ".2d"; 
    return;
    break;
  case 6:
    // FCVTNv4i16
    O << ".4h, "; 
    printVRegOperand(MI, 1, STI, O); 
    O << ".4s"; 
    return;
    break;
  case 7:
    // FCVTNv8i16
    O << ".8h, "; 
    printVRegOperand(MI, 2, STI, O); 
    O << ".4s"; 
    return;
    break;
  case 8:
    // FMOVXDHighr, INSvi16gpr, INSvi16lane, INSvi32gpr, INSvi32lane, INSvi64...
    printVectorIndex(MI, 2, STI, O); 
    O << ", "; 
    break;
  case 9:
    // LD1Fourv16b_POST, LD1Fourv2d_POST, LD1Fourv4s_POST, LD1Fourv8h_POST, L...
    printPostIncOperand<64>(MI, 3, STI, O); 
    return;
    break;
  case 10:
    // LD1Fourv1d_POST, LD1Fourv2s_POST, LD1Fourv4h_POST, LD1Fourv8b_POST, LD...
    printPostIncOperand<32>(MI, 3, STI, O); 
    return;
    break;
  case 11:
    // LD1Onev16b_POST, LD1Onev2d_POST, LD1Onev4s_POST, LD1Onev8h_POST, LD1Tw...
    printPostIncOperand<16>(MI, 3, STI, O); 
    return;
    break;
  case 12:
    // LD1Onev1d_POST, LD1Onev2s_POST, LD1Onev4h_POST, LD1Onev8b_POST, LD1Rv1...
    printPostIncOperand<8>(MI, 3, STI, O); 
    return;
    break;
  case 13:
    // LD1Rv16b_POST, LD1Rv8b_POST
    printPostIncOperand<1>(MI, 3, STI, O); 
    return;
    break;
  case 14:
    // LD1Rv2s_POST, LD1Rv4s_POST, LD2Rv4h_POST, LD2Rv8h_POST, LD4Rv16b_POST,...
    printPostIncOperand<4>(MI, 3, STI, O); 
    return;
    break;
  case 15:
    // LD1Rv4h_POST, LD1Rv8h_POST, LD2Rv16b_POST, LD2Rv8b_POST
    printPostIncOperand<2>(MI, 3, STI, O); 
    return;
    break;
  case 16:
    // LD1Threev16b_POST, LD1Threev2d_POST, LD1Threev4s_POST, LD1Threev8h_POS...
    printPostIncOperand<48>(MI, 3, STI, O); 
    return;
    break;
  case 17:
    // LD1Threev1d_POST, LD1Threev2s_POST, LD1Threev4h_POST, LD1Threev8b_POST...
    printPostIncOperand<24>(MI, 3, STI, O); 
    return;
    break;
  case 18:
    // LD1i16, LD1i32, LD1i64, LD1i8, LD2i16, LD2i32, LD2i64, LD2i8, LD3i16, ...
    O << ']'; 
    return;
    break;
  case 19:
    // LD1i16_POST, LD2i8_POST
    printPostIncOperand<2>(MI, 5, STI, O); 
    return;
    break;
  case 20:
    // LD1i32_POST, LD2i16_POST, LD4i8_POST
    printPostIncOperand<4>(MI, 5, STI, O); 
    return;
    break;
  case 21:
    // LD1i64_POST, LD2i32_POST, LD4i16_POST
    printPostIncOperand<8>(MI, 5, STI, O); 
    return;
    break;
  case 22:
    // LD1i8_POST
    printPostIncOperand<1>(MI, 5, STI, O); 
    return;
    break;
  case 23:
    // LD2i64_POST, LD4i32_POST
    printPostIncOperand<16>(MI, 5, STI, O); 
    return;
    break;
  case 24:
    // LD3Rv16b_POST, LD3Rv8b_POST
    printPostIncOperand<3>(MI, 3, STI, O); 
    return;
    break;
  case 25:
    // LD3Rv2s_POST, LD3Rv4s_POST
    printPostIncOperand<12>(MI, 3, STI, O); 
    return;
    break;
  case 26:
    // LD3Rv4h_POST, LD3Rv8h_POST
    printPostIncOperand<6>(MI, 3, STI, O); 
    return;
    break;
  case 27:
    // LD3i16_POST
    printPostIncOperand<6>(MI, 5, STI, O); 
    return;
    break;
  case 28:
    // LD3i32_POST
    printPostIncOperand<12>(MI, 5, STI, O); 
    return;
    break;
  case 29:
    // LD3i64_POST
    printPostIncOperand<24>(MI, 5, STI, O); 
    return;
    break;
  case 30:
    // LD3i8_POST
    printPostIncOperand<3>(MI, 5, STI, O); 
    return;
    break;
  case 31:
    // LD4i64_POST
    printPostIncOperand<32>(MI, 5, STI, O); 
    return;
    break;
  case 32:
    // LDARB, LDARH, LDARW, LDARX, LDAXRB, LDAXRH, LDAXRW, LDAXRX, LDLARB, LD...
    O << ", ["; 
    break;
  case 33:
    // ST1i16_POST, ST1i32_POST, ST1i64_POST, ST1i8_POST, ST2i16_POST, ST2i32...
    O << "], "; 
    break;
  case 34:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBXv16i8Four, T...
    O << ".16b, "; 
    break;
  case 35:
    // TBLv8i8Four, TBLv8i8One, TBLv8i8Three, TBLv8i8Two, TBXv8i8Four, TBXv8i...
    O << ".8b, "; 
    break;
  }


  // Fragment 2 encoded into 5 bits for 28 unique commands.
  switch ((Bits >> 26) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 1, STI, O); 
    break;
  case 1:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSWri, ADDSWrs, ADDSWrx, ADD...
    printOperand(MI, 1, STI, O); 
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 2, STI, O); 
    break;
  case 3:
    // ADRP
    printAdrpLabel(MI, 1, STI, O); 
    return;
    break;
  case 4:
    // BFMWri, BFMXri, FMLAv1i32_indexed, FMLAv1i64_indexed, FMLSv1i32_indexe...
    printOperand(MI, 2, STI, O); 
    break;
  case 5:
    // BICv2i32, BICv4i16, BICv4i32, BICv8i16, MOVKWi, MOVKXi, ORRv2i32, ORRv...
    printHexImm(MI, 2, STI, O); 
    printShifter(MI, 3, STI, O); 
    return;
    break;
  case 6:
    // CBNZW, CBNZX, CBZW, CBZX, LDRDl, LDRQl, LDRSWl, LDRSl, LDRWl, LDRXl, P...
    printAlignedLabel(MI, 1, STI, O); 
    return;
    break;
  case 7:
    // FCVTLv2i32
    O << ".2s"; 
    return;
    break;
  case 8:
    // FCVTLv4i32
    O << ".4s"; 
    return;
    break;
  case 9:
    // FMOVDi, FMOVSi, FMOVv2f32_ns, FMOVv2f64_ns, FMOVv4f32_ns
    printFPImmOperand(MI, 1, STI, O); 
    return;
    break;
  case 10:
    // INSvi16gpr, INSvi32gpr, INSvi64gpr, INSvi8gpr
    printOperand(MI, 3, STI, O); 
    return;
    break;
  case 11:
    // INSvi16lane, INSvi32lane, INSvi64lane, INSvi8lane
    printVRegOperand(MI, 3, STI, O); 
    printVectorIndex(MI, 4, STI, O); 
    return;
    break;
  case 12:
    // MOVID, MOVIv2d_ns
    printSIMDType10Operand(MI, 1, STI, O); 
    return;
    break;
  case 13:
    // MOVIv16b_ns, MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl...
    printHexImm(MI, 1, STI, O); 
    break;
  case 14:
    // MRS
    printMRSSystemRegister(MI, 1, STI, O); 
    return;
    break;
  case 15:
    // ST1i16_POST, ST2i8_POST
    printPostIncOperand<2>(MI, 4, STI, O); 
    return;
    break;
  case 16:
    // ST1i32_POST, ST2i16_POST, ST4i8_POST
    printPostIncOperand<4>(MI, 4, STI, O); 
    return;
    break;
  case 17:
    // ST1i64_POST, ST2i32_POST, ST4i16_POST
    printPostIncOperand<8>(MI, 4, STI, O); 
    return;
    break;
  case 18:
    // ST1i8_POST
    printPostIncOperand<1>(MI, 4, STI, O); 
    return;
    break;
  case 19:
    // ST2i64_POST, ST4i32_POST
    printPostIncOperand<16>(MI, 4, STI, O); 
    return;
    break;
  case 20:
    // ST3i16_POST
    printPostIncOperand<6>(MI, 4, STI, O); 
    return;
    break;
  case 21:
    // ST3i32_POST
    printPostIncOperand<12>(MI, 4, STI, O); 
    return;
    break;
  case 22:
    // ST3i64_POST
    printPostIncOperand<24>(MI, 4, STI, O); 
    return;
    break;
  case 23:
    // ST3i8_POST
    printPostIncOperand<3>(MI, 4, STI, O); 
    return;
    break;
  case 24:
    // ST4i64_POST
    printPostIncOperand<32>(MI, 4, STI, O); 
    return;
    break;
  case 25:
    // SYSxt
    printSysCROperand(MI, 1, STI, O); 
    O << ", "; 
    printSysCROperand(MI, 2, STI, O); 
    O << ", "; 
    printOperand(MI, 3, STI, O); 
    O << ", "; 
    printOperand(MI, 4, STI, O); 
    return;
    break;
  case 26:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBLv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O); 
    O << ", "; 
    printVRegOperand(MI, 2, STI, O); 
    break;
  case 27:
    // TBXv16i8Four, TBXv16i8One, TBXv16i8Three, TBXv16i8Two, TBXv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 2, STI, O); 
    O << ", "; 
    printVRegOperand(MI, 3, STI, O); 
    break;
  }


  // Fragment 3 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 31) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv1i64, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ...
    return;
    break;
  case 1:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDH...
    O << ", "; 
    break;
  case 2:
    // CMEQv16i8rz, CMEQv1i64rz, CMEQv2i32rz, CMEQv2i64rz, CMEQv4i16rz, CMEQv...
    O << ", #0"; 
    return;
    break;
  case 3:
    // CPYi16, CPYi32, CPYi64, CPYi8, DUPv16i8lane, DUPv2i32lane, DUPv2i64lan...
    printVectorIndex(MI, 2, STI, O); 
    return;
    break;
  case 4:
    // FCMEQv1i32rz, FCMEQv1i64rz, FCMEQv2i32rz, FCMEQv2i64rz, FCMEQv4i32rz, ...
    O << ", #0.0"; 
    return;
    break;
  case 5:
    // FCVTLv4i16
    O << ".4h"; 
    return;
    break;
  case 6:
    // FCVTLv8i16
    O << ".8h"; 
    return;
    break;
  case 7:
    // FCVTNv4i32, FCVTXNv4f32
    O << ".2d"; 
    return;
    break;
  case 8:
    // LDARB, LDARH, LDARW, LDARX, LDAXRB, LDAXRH, LDAXRW, LDAXRX, LDLARB, LD...
    O << ']'; 
    return;
    break;
  case 9:
    // LDAXPW, LDAXPX, LDNPDi, LDNPQi, LDNPSi, LDNPWi, LDNPXi, LDPDi, LDPDpos...
    O << ", ["; 
    break;
  case 10:
    // LDRBBpost, LDRBpost, LDRDpost, LDRHHpost, LDRHpost, LDRQpost, LDRSBWpo...
    O << "], "; 
    printOperand(MI, 3, STI, O); 
    return;
    break;
  case 11:
    // MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl, MOVIv8i16, ...
    printShifter(MI, 2, STI, O); 
    return;
    break;
  case 12:
    // SHLLv16i8, SHLLv8i8
    O << ", #8"; 
    return;
    break;
  case 13:
    // SHLLv2i32, SHLLv4i32
    O << ", #32"; 
    return;
    break;
  case 14:
    // SHLLv4i16, SHLLv8i16
    O << ", #16"; 
    return;
    break;
  case 15:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBXv16i8Four, T...
    O << ".16b"; 
    return;
    break;
  case 16:
    // TBLv8i8Four, TBLv8i8One, TBLv8i8Three, TBLv8i8Two, TBXv8i8Four, TBXv8i...
    O << ".8b"; 
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 36) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSXrx64, ADDXrx64, ADDv1i64, ASRVWr, A...
    printOperand(MI, 2, STI, O); 
    break;
  case 1:
    // ADDHNv2i64_v2i32, ADDHNv4i32_v4i16, ADDHNv8i16_v8i8, ADDPv16i8, ADDPv2...
    printVRegOperand(MI, 2, STI, O); 
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, BITv16i8, BITv8i...
    printVRegOperand(MI, 3, STI, O); 
    break;
  case 3:
    // ADDSWri, ADDSXri, ADDWri, ADDXri, SUBSWri, SUBSXri, SUBWri, SUBXri
    printAddSubImm(MI, 2, STI, O); 
    return;
    break;
  case 4:
    // ADDSWrs, ADDSXrs, ADDWrs, ADDXrs, ANDSWrs, ANDSXrs, ANDWrs, ANDXrs, BI...
    printShiftedRegister(MI, 2, STI, O); 
    return;
    break;
  case 5:
    // ADDSWrx, ADDSXrx, ADDWrx, ADDXrx, SUBSWrx, SUBSXrx, SUBWrx, SUBXrx
    printExtendedRegister(MI, 2, STI, O); 
    return;
    break;
  case 6:
    // ANDSWri, ANDWri, EORWri, ORRWri
    printLogicalImm32(MI, 2, STI, O); 
    return;
    break;
  case 7:
    // ANDSXri, ANDXri, EORXri, ORRXri
    printLogicalImm64(MI, 2, STI, O); 
    return;
    break;
  case 8:
    // BFMWri, BFMXri, LDPDpost, LDPDpre, LDPQpost, LDPQpre, LDPSWpost, LDPSW...
    printOperand(MI, 3, STI, O); 
    break;
  case 9:
    // LDRBBui, LDRBui, LDRSBWui, LDRSBXui, STRBBui, STRBui
    printUImm12Offset<1>(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 10:
    // LDRDui, LDRXui, PRFMui, STRDui, STRXui
    printUImm12Offset<8>(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 11:
    // LDRHHui, LDRHui, LDRSHWui, LDRSHXui, STRHHui, STRHui
    printUImm12Offset<2>(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 12:
    // LDRQui, STRQui
    printUImm12Offset<16>(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 13:
    // LDRSWui, LDRSui, LDRWui, STRSui, STRWui
    printUImm12Offset<4>(MI, 2, STI, O); 
    O << ']'; 
    return;
    break;
  case 14:
    // SYSLxt
    printSysCROperand(MI, 2, STI, O); 
    O << ", "; 
    printSysCROperand(MI, 3, STI, O); 
    O << ", "; 
    printOperand(MI, 4, STI, O); 
    return;
    break;
  case 15:
    // TBNZW, TBNZX, TBZW, TBZX
    printAlignedLabel(MI, 2, STI, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 40) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDH...
    return;
    break;
  case 1:
    // ADDSXrx64, ADDXrx64, SUBSXrx64, SUBXrx64
    printArithExtend(MI, 3, STI, O); 
    return;
    break;
  case 2:
    // BFMWri, BFMXri, CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi...
    O << ", "; 
    break;
  case 3:
    // FMLAv1i32_indexed, FMLAv1i64_indexed, FMLAv2i32_indexed, FMLAv2i64_ind...
    printVectorIndex(MI, 4, STI, O); 
    return;
    break;
  case 4:
    // FMULXv1i32_indexed, FMULXv1i64_indexed, FMULXv2i32_indexed, FMULXv2i64...
    printVectorIndex(MI, 3, STI, O); 
    return;
    break;
  case 5:
    // LDAXPW, LDAXPX, LDTRBi, LDTRHi, LDTRSBWi, LDTRSBXi, LDTRSHWi, LDTRSHXi...
    O << ']'; 
    return;
    break;
  case 6:
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    O << "], "; 
    break;
  case 7:
    // LDRBBpre, LDRBpre, LDRDpre, LDRHHpre, LDRHpre, LDRQpre, LDRSBWpre, LDR...
    O << "]!"; 
    return;
    break;
  case 8:
    // STLXPW, STLXPX, STXPW, STXPX
    O << ", ["; 
    printOperand(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 6 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 44) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BFMWri, BFMXri
    printOperand(MI, 4, STI, O); 
    return;
    break;
  case 1:
    // CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi, CCMPXr, CSELWr...
    printCondCode(MI, 3, STI, O); 
    return;
    break;
  case 2:
    // EXTRWrri, EXTRXrri, EXTv16i8, EXTv8i8, FMADDDrrr, FMADDSrrr, FMSUBDrrr...
    printOperand(MI, 3, STI, O); 
    return;
    break;
  case 3:
    // LDNPDi, LDNPXi, LDPDi, LDPXi, STNPDi, STNPXi, STPDi, STPXi
    printImmScale<8>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 4:
    // LDNPQi, LDPQi, STNPQi, STPQi
    printImmScale<16>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 5:
    // LDNPSi, LDNPWi, LDPSWi, LDPSi, LDPWi, STNPSi, STNPWi, STPSi, STPWi
    printImmScale<4>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 6:
    // LDPDpost, LDPDpre, LDPXpost, LDPXpre, STPDpost, STPDpre, STPXpost, STP...
    printImmScale<8>(MI, 4, STI, O); 
    break;
  case 7:
    // LDPQpost, LDPQpre, STPQpost, STPQpre
    printImmScale<16>(MI, 4, STI, O); 
    break;
  case 8:
    // LDPSWpost, LDPSWpre, LDPSpost, LDPSpre, LDPWpost, LDPWpre, STPSpost, S...
    printImmScale<4>(MI, 4, STI, O); 
    break;
  case 9:
    // LDRBBroW, LDRBroW, LDRSBWroW, LDRSBXroW, STRBBroW, STRBroW
    printMemExtend<'w', 8>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 10:
    // LDRBBroX, LDRBroX, LDRSBWroX, LDRSBXroX, STRBBroX, STRBroX
    printMemExtend<'x', 8>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 11:
    // LDRDroW, LDRXroW, PRFMroW, STRDroW, STRXroW
    printMemExtend<'w', 64>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 12:
    // LDRDroX, LDRXroX, PRFMroX, STRDroX, STRXroX
    printMemExtend<'x', 64>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 13:
    // LDRHHroW, LDRHroW, LDRSHWroW, LDRSHXroW, STRHHroW, STRHroW
    printMemExtend<'w', 16>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 14:
    // LDRHHroX, LDRHroX, LDRSHWroX, LDRSHXroX, STRHHroX, STRHroX
    printMemExtend<'x', 16>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 15:
    // LDRQroW, STRQroW
    printMemExtend<'w', 128>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 16:
    // LDRQroX, STRQroX
    printMemExtend<'x', 128>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 17:
    // LDRSWroW, LDRSroW, LDRWroW, STRSroW, STRWroW
    printMemExtend<'w', 32>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  case 18:
    // LDRSWroX, LDRSroX, LDRWroX, STRSroX, STRWroX
    printMemExtend<'x', 32>(MI, 3, STI, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 49) & 1) {
    // LDPDpre, LDPQpre, LDPSWpre, LDPSpre, LDPWpre, LDPXpre, STPDpre, STPQpr...
    O << "]!"; 
    return;
  } else {
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *AArch64AppleInstPrinter::
getRegisterName(unsigned RegNo, unsigned AltIdx) {
  assert(RegNo && RegNo < 420 && "Invalid register number!");

  static const char AsmStrsNoRegAltName[] = {
  /* 0 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 13 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 26 */ 'b', '1', '0', 0,
  /* 30 */ 'd', '1', '0', 0,
  /* 34 */ 'h', '1', '0', 0,
  /* 38 */ 'q', '1', '0', 0,
  /* 42 */ 's', '1', '0', 0,
  /* 46 */ 'w', '1', '0', 0,
  /* 50 */ 'x', '1', '0', 0,
  /* 54 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 70 */ 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', 0,
  /* 86 */ 'b', '2', '0', 0,
  /* 90 */ 'd', '2', '0', 0,
  /* 94 */ 'h', '2', '0', 0,
  /* 98 */ 'q', '2', '0', 0,
  /* 102 */ 's', '2', '0', 0,
  /* 106 */ 'w', '2', '0', 0,
  /* 110 */ 'x', '2', '0', 0,
  /* 114 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 130 */ 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', 0,
  /* 146 */ 'b', '3', '0', 0,
  /* 150 */ 'd', '3', '0', 0,
  /* 154 */ 'h', '3', '0', 0,
  /* 158 */ 'q', '3', '0', 0,
  /* 162 */ 's', '3', '0', 0,
  /* 166 */ 'w', '3', '0', 0,
  /* 170 */ 'x', '3', '0', 0,
  /* 174 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', 0,
  /* 189 */ 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', 0,
  /* 204 */ 'b', '0', 0,
  /* 207 */ 'd', '0', 0,
  /* 210 */ 'h', '0', 0,
  /* 213 */ 'q', '0', 0,
  /* 216 */ 's', '0', 0,
  /* 219 */ 'w', '0', 0,
  /* 222 */ 'x', '0', 0,
  /* 225 */ 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 239 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 253 */ 'b', '1', '1', 0,
  /* 257 */ 'd', '1', '1', 0,
  /* 261 */ 'h', '1', '1', 0,
  /* 265 */ 'q', '1', '1', 0,
  /* 269 */ 's', '1', '1', 0,
  /* 273 */ 'w', '1', '1', 0,
  /* 277 */ 'x', '1', '1', 0,
  /* 281 */ 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 297 */ 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', 0,
  /* 313 */ 'b', '2', '1', 0,
  /* 317 */ 'd', '2', '1', 0,
  /* 321 */ 'h', '2', '1', 0,
  /* 325 */ 'q', '2', '1', 0,
  /* 329 */ 's', '2', '1', 0,
  /* 333 */ 'w', '2', '1', 0,
  /* 337 */ 'x', '2', '1', 0,
  /* 341 */ 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 357 */ 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', 0,
  /* 373 */ 'b', '3', '1', 0,
  /* 377 */ 'd', '3', '1', 0,
  /* 381 */ 'h', '3', '1', 0,
  /* 385 */ 'q', '3', '1', 0,
  /* 389 */ 's', '3', '1', 0,
  /* 393 */ 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', 0,
  /* 407 */ 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', 0,
  /* 421 */ 'b', '1', 0,
  /* 424 */ 'd', '1', 0,
  /* 427 */ 'h', '1', 0,
  /* 430 */ 'q', '1', 0,
  /* 433 */ 's', '1', 0,
  /* 436 */ 'w', '1', 0,
  /* 439 */ 'x', '1', 0,
  /* 442 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 457 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 472 */ 'b', '1', '2', 0,
  /* 476 */ 'd', '1', '2', 0,
  /* 480 */ 'h', '1', '2', 0,
  /* 484 */ 'q', '1', '2', 0,
  /* 488 */ 's', '1', '2', 0,
  /* 492 */ 'w', '1', '2', 0,
  /* 496 */ 'x', '1', '2', 0,
  /* 500 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 516 */ 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', 0,
  /* 532 */ 'b', '2', '2', 0,
  /* 536 */ 'd', '2', '2', 0,
  /* 540 */ 'h', '2', '2', 0,
  /* 544 */ 'q', '2', '2', 0,
  /* 548 */ 's', '2', '2', 0,
  /* 552 */ 'w', '2', '2', 0,
  /* 556 */ 'x', '2', '2', 0,
  /* 560 */ 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 573 */ 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', 0,
  /* 586 */ 'b', '2', 0,
  /* 589 */ 'd', '2', 0,
  /* 592 */ 'h', '2', 0,
  /* 595 */ 'q', '2', 0,
  /* 598 */ 's', '2', 0,
  /* 601 */ 'w', '2', 0,
  /* 604 */ 'x', '2', 0,
  /* 607 */ 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 623 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 639 */ 'b', '1', '3', 0,
  /* 643 */ 'd', '1', '3', 0,
  /* 647 */ 'h', '1', '3', 0,
  /* 651 */ 'q', '1', '3', 0,
  /* 655 */ 's', '1', '3', 0,
  /* 659 */ 'w', '1', '3', 0,
  /* 663 */ 'x', '1', '3', 0,
  /* 667 */ 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 683 */ 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', 0,
  /* 699 */ 'b', '2', '3', 0,
  /* 703 */ 'd', '2', '3', 0,
  /* 707 */ 'h', '2', '3', 0,
  /* 711 */ 'q', '2', '3', 0,
  /* 715 */ 's', '2', '3', 0,
  /* 719 */ 'w', '2', '3', 0,
  /* 723 */ 'x', '2', '3', 0,
  /* 727 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 739 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 751 */ 'b', '3', 0,
  /* 754 */ 'd', '3', 0,
  /* 757 */ 'h', '3', 0,
  /* 760 */ 'q', '3', 0,
  /* 763 */ 's', '3', 0,
  /* 766 */ 'w', '3', 0,
  /* 769 */ 'x', '3', 0,
  /* 772 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 788 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 804 */ 'b', '1', '4', 0,
  /* 808 */ 'd', '1', '4', 0,
  /* 812 */ 'h', '1', '4', 0,
  /* 816 */ 'q', '1', '4', 0,
  /* 820 */ 's', '1', '4', 0,
  /* 824 */ 'w', '1', '4', 0,
  /* 828 */ 'x', '1', '4', 0,
  /* 832 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 848 */ 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', 0,
  /* 864 */ 'b', '2', '4', 0,
  /* 868 */ 'd', '2', '4', 0,
  /* 872 */ 'h', '2', '4', 0,
  /* 876 */ 'q', '2', '4', 0,
  /* 880 */ 's', '2', '4', 0,
  /* 884 */ 'w', '2', '4', 0,
  /* 888 */ 'x', '2', '4', 0,
  /* 892 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 904 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 916 */ 'b', '4', 0,
  /* 919 */ 'd', '4', 0,
  /* 922 */ 'h', '4', 0,
  /* 925 */ 'q', '4', 0,
  /* 928 */ 's', '4', 0,
  /* 931 */ 'w', '4', 0,
  /* 934 */ 'x', '4', 0,
  /* 937 */ 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 953 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 969 */ 'b', '1', '5', 0,
  /* 973 */ 'd', '1', '5', 0,
  /* 977 */ 'h', '1', '5', 0,
  /* 981 */ 'q', '1', '5', 0,
  /* 985 */ 's', '1', '5', 0,
  /* 989 */ 'w', '1', '5', 0,
  /* 993 */ 'x', '1', '5', 0,
  /* 997 */ 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 1013 */ 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', 0,
  /* 1029 */ 'b', '2', '5', 0,
  /* 1033 */ 'd', '2', '5', 0,
  /* 1037 */ 'h', '2', '5', 0,
  /* 1041 */ 'q', '2', '5', 0,
  /* 1045 */ 's', '2', '5', 0,
  /* 1049 */ 'w', '2', '5', 0,
  /* 1053 */ 'x', '2', '5', 0,
  /* 1057 */ 'D', '2', '_', 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 1069 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 1081 */ 'b', '5', 0,
  /* 1084 */ 'd', '5', 0,
  /* 1087 */ 'h', '5', 0,
  /* 1090 */ 'q', '5', 0,
  /* 1093 */ 's', '5', 0,
  /* 1096 */ 'w', '5', 0,
  /* 1099 */ 'x', '5', 0,
  /* 1102 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 1118 */ 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', 0,
  /* 1134 */ 'b', '1', '6', 0,
  /* 1138 */ 'd', '1', '6', 0,
  /* 1142 */ 'h', '1', '6', 0,
  /* 1146 */ 'q', '1', '6', 0,
  /* 1150 */ 's', '1', '6', 0,
  /* 1154 */ 'w', '1', '6', 0,
  /* 1158 */ 'x', '1', '6', 0,
  /* 1162 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 1178 */ 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', 0,
  /* 1194 */ 'b', '2', '6', 0,
  /* 1198 */ 'd', '2', '6', 0,
  /* 1202 */ 'h', '2', '6', 0,
  /* 1206 */ 'q', '2', '6', 0,
  /* 1210 */ 's', '2', '6', 0,
  /* 1214 */ 'w', '2', '6', 0,
  /* 1218 */ 'x', '2', '6', 0,
  /* 1222 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 1234 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 1246 */ 'b', '6', 0,
  /* 1249 */ 'd', '6', 0,
  /* 1252 */ 'h', '6', 0,
  /* 1255 */ 'q', '6', 0,
  /* 1258 */ 's', '6', 0,
  /* 1261 */ 'w', '6', 0,
  /* 1264 */ 'x', '6', 0,
  /* 1267 */ 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 1283 */ 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', 0,
  /* 1299 */ 'b', '1', '7', 0,
  /* 1303 */ 'd', '1', '7', 0,
  /* 1307 */ 'h', '1', '7', 0,
  /* 1311 */ 'q', '1', '7', 0,
  /* 1315 */ 's', '1', '7', 0,
  /* 1319 */ 'w', '1', '7', 0,
  /* 1323 */ 'x', '1', '7', 0,
  /* 1327 */ 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 1343 */ 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', 0,
  /* 1359 */ 'b', '2', '7', 0,
  /* 1363 */ 'd', '2', '7', 0,
  /* 1367 */ 'h', '2', '7', 0,
  /* 1371 */ 'q', '2', '7', 0,
  /* 1375 */ 's', '2', '7', 0,
  /* 1379 */ 'w', '2', '7', 0,
  /* 1383 */ 'x', '2', '7', 0,
  /* 1387 */ 'D', '4', '_', 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 1399 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 1411 */ 'b', '7', 0,
  /* 1414 */ 'd', '7', 0,
  /* 1417 */ 'h', '7', 0,
  /* 1420 */ 'q', '7', 0,
  /* 1423 */ 's', '7', 0,
  /* 1426 */ 'w', '7', 0,
  /* 1429 */ 'x', '7', 0,
  /* 1432 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 1448 */ 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', 0,
  /* 1464 */ 'b', '1', '8', 0,
  /* 1468 */ 'd', '1', '8', 0,
  /* 1472 */ 'h', '1', '8', 0,
  /* 1476 */ 'q', '1', '8', 0,
  /* 1480 */ 's', '1', '8', 0,
  /* 1484 */ 'w', '1', '8', 0,
  /* 1488 */ 'x', '1', '8', 0,
  /* 1492 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 1508 */ 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', 0,
  /* 1524 */ 'b', '2', '8', 0,
  /* 1528 */ 'd', '2', '8', 0,
  /* 1532 */ 'h', '2', '8', 0,
  /* 1536 */ 'q', '2', '8', 0,
  /* 1540 */ 's', '2', '8', 0,
  /* 1544 */ 'w', '2', '8', 0,
  /* 1548 */ 'x', '2', '8', 0,
  /* 1552 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 1564 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 1576 */ 'b', '8', 0,
  /* 1579 */ 'd', '8', 0,
  /* 1582 */ 'h', '8', 0,
  /* 1585 */ 'q', '8', 0,
  /* 1588 */ 's', '8', 0,
  /* 1591 */ 'w', '8', 0,
  /* 1594 */ 'x', '8', 0,
  /* 1597 */ 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 1613 */ 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', 0,
  /* 1629 */ 'b', '1', '9', 0,
  /* 1633 */ 'd', '1', '9', 0,
  /* 1637 */ 'h', '1', '9', 0,
  /* 1641 */ 'q', '1', '9', 0,
  /* 1645 */ 's', '1', '9', 0,
  /* 1649 */ 'w', '1', '9', 0,
  /* 1653 */ 'x', '1', '9', 0,
  /* 1657 */ 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 1673 */ 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', 0,
  /* 1689 */ 'b', '2', '9', 0,
  /* 1693 */ 'd', '2', '9', 0,
  /* 1697 */ 'h', '2', '9', 0,
  /* 1701 */ 'q', '2', '9', 0,
  /* 1705 */ 's', '2', '9', 0,
  /* 1709 */ 'w', '2', '9', 0,
  /* 1713 */ 'x', '2', '9', 0,
  /* 1717 */ 'D', '6', '_', 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 1729 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 1741 */ 'b', '9', 0,
  /* 1744 */ 'd', '9', 0,
  /* 1747 */ 'h', '9', 0,
  /* 1750 */ 'q', '9', 0,
  /* 1753 */ 's', '9', 0,
  /* 1756 */ 'w', '9', 0,
  /* 1759 */ 'x', '9', 0,
  /* 1762 */ 'w', 's', 'p', 0,
  /* 1766 */ 'w', 'z', 'r', 0,
  /* 1770 */ 'x', 'z', 'r', 0,
  /* 1774 */ 'n', 'z', 'c', 'v', 0,
  };

  static const uint16_t RegAsmOffsetNoRegAltName[] = {
    1713, 170, 1774, 1763, 1762, 1766, 1770, 204, 421, 586, 751, 916, 1081, 1246, 
    1411, 1576, 1741, 26, 253, 472, 639, 804, 969, 1134, 1299, 1464, 1629, 86, 
    313, 532, 699, 864, 1029, 1194, 1359, 1524, 1689, 146, 373, 207, 424, 589, 
    754, 919, 1084, 1249, 1414, 1579, 1744, 30, 257, 476, 643, 808, 973, 1138, 
    1303, 1468, 1633, 90, 317, 536, 703, 868, 1033, 1198, 1363, 1528, 1693, 150, 
    377, 210, 427, 592, 757, 922, 1087, 1252, 1417, 1582, 1747, 34, 261, 480, 
    647, 812, 977, 1142, 1307, 1472, 1637, 94, 321, 540, 707, 872, 1037, 1202, 
    1367, 1532, 1697, 154, 381, 213, 430, 595, 760, 925, 1090, 1255, 1420, 1585, 
    1750, 38, 265, 484, 651, 816, 981, 1146, 1311, 1476, 1641, 98, 325, 544, 
    711, 876, 1041, 1206, 1371, 1536, 1701, 158, 385, 216, 433, 598, 763, 928, 
    1093, 1258, 1423, 1588, 1753, 42, 269, 488, 655, 820, 985, 1150, 1315, 1480, 
    1645, 102, 329, 548, 715, 880, 1045, 1210, 1375, 1540, 1705, 162, 389, 219, 
    436, 601, 766, 931, 1096, 1261, 1426, 1591, 1756, 46, 273, 492, 659, 824, 
    989, 1154, 1319, 1484, 1649, 106, 333, 552, 719, 884, 1049, 1214, 1379, 1544, 
    1709, 166, 222, 439, 604, 769, 934, 1099, 1264, 1429, 1594, 1759, 50, 277, 
    496, 663, 828, 993, 1158, 1323, 1488, 1653, 110, 337, 556, 723, 888, 1053, 
    1218, 1383, 1548, 401, 567, 733, 898, 1063, 1228, 1393, 1558, 1723, 6, 231, 
    449, 615, 780, 945, 1110, 1275, 1440, 1605, 62, 289, 508, 675, 840, 1005, 
    1170, 1335, 1500, 1665, 122, 349, 182, 727, 892, 1057, 1222, 1387, 1552, 1717, 
    0, 225, 442, 607, 772, 937, 1102, 1267, 1432, 1597, 54, 281, 500, 667, 
    832, 997, 1162, 1327, 1492, 1657, 114, 341, 174, 393, 560, 564, 730, 895, 
    1060, 1225, 1390, 1555, 1720, 3, 228, 445, 611, 776, 941, 1106, 1271, 1436, 
    1601, 58, 285, 504, 671, 836, 1001, 1166, 1331, 1496, 1661, 118, 345, 178, 
    397, 415, 580, 745, 910, 1075, 1240, 1405, 1570, 1735, 19, 245, 464, 631, 
    796, 961, 1126, 1291, 1456, 1621, 78, 305, 524, 691, 856, 1021, 1186, 1351, 
    1516, 1681, 138, 365, 197, 739, 904, 1069, 1234, 1399, 1564, 1729, 13, 239, 
    457, 623, 788, 953, 1118, 1283, 1448, 1613, 70, 297, 516, 683, 848, 1013, 
    1178, 1343, 1508, 1673, 130, 357, 189, 407, 573, 577, 742, 907, 1072, 1237, 
    1402, 1567, 1732, 16, 242, 460, 627, 792, 957, 1122, 1287, 1452, 1617, 74, 
    301, 520, 687, 852, 1017, 1182, 1347, 1512, 1677, 134, 361, 193, 411, 
  };

  static const char AsmStrsvlist1[] = {
  /* 0 */ 0,
  };

  static const uint8_t RegAsmOffsetvlist1[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  };

  static const char AsmStrsvreg[] = {
  /* 0 */ 'v', '1', '0', 0,
  /* 4 */ 'v', '2', '0', 0,
  /* 8 */ 'v', '3', '0', 0,
  /* 12 */ 'v', '0', 0,
  /* 15 */ 'v', '1', '1', 0,
  /* 19 */ 'v', '2', '1', 0,
  /* 23 */ 'v', '3', '1', 0,
  /* 27 */ 'v', '1', 0,
  /* 30 */ 'v', '1', '2', 0,
  /* 34 */ 'v', '2', '2', 0,
  /* 38 */ 'v', '2', 0,
  /* 41 */ 'v', '1', '3', 0,
  /* 45 */ 'v', '2', '3', 0,
  /* 49 */ 'v', '3', 0,
  /* 52 */ 'v', '1', '4', 0,
  /* 56 */ 'v', '2', '4', 0,
  /* 60 */ 'v', '4', 0,
  /* 63 */ 'v', '1', '5', 0,
  /* 67 */ 'v', '2', '5', 0,
  /* 71 */ 'v', '5', 0,
  /* 74 */ 'v', '1', '6', 0,
  /* 78 */ 'v', '2', '6', 0,
  /* 82 */ 'v', '6', 0,
  /* 85 */ 'v', '1', '7', 0,
  /* 89 */ 'v', '2', '7', 0,
  /* 93 */ 'v', '7', 0,
  /* 96 */ 'v', '1', '8', 0,
  /* 100 */ 'v', '2', '8', 0,
  /* 104 */ 'v', '8', 0,
  /* 107 */ 'v', '1', '9', 0,
  /* 111 */ 'v', '2', '9', 0,
  /* 115 */ 'v', '9', 0,
  };

  static const uint8_t RegAsmOffsetvreg[] = {
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 12, 27, 38, 49, 60, 71, 82, 93, 104, 
    115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 
    45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 
    15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 
    67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 
    93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 
    19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 
    41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 
    89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 
    115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 
    45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 
    71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 
    107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 
  };

  switch(AltIdx) {
  default: llvm_unreachable("Invalid register alt name index!");
  case AArch64::NoRegAltName:
    assert(*(AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1];
  case AArch64::vlist1:
    assert(*(AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1];
  case AArch64::vreg:
    assert(*(AsmStrsvreg+RegAsmOffsetvreg[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvreg+RegAsmOffsetvreg[RegNo-1];
  }
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool AArch64AppleInstPrinterValidateMCOperand(
       const MCOperand &MCOp, unsigned PredicateIndex);
bool AArch64AppleInstPrinter::printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case AArch64::ADDSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmn $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmn $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "adds $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmn $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "adds $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmn $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmn $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "adds $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmn $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmn $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "adds $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sponly:$dst, GPR32sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sp:$dst, GPR32sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sponly:$dst, GPR64sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sp:$dst, GPR64sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "add $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSWri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSWri WZR, GPR32:$src1, logical_imm32:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::ANDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, logical_shift32:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "ands $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSXri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSXri XZR, GPR64:$src1, logical_imm64:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x05";
      break;
    }
    return false;
  case AArch64::ANDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, logical_shift64:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "ands $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "and $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "and $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bics $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bics $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bic $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bic $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICv2i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv2i32 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.2s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv4i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv4i16 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.4h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv4i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv4i32 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.4s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv8i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv8i16 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.8h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::CLREX:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (CLREX 15)
      AsmString = "clrex";
      break;
    }
    return false;
  case AArch64::CSINCWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINCWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINCWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINCXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINCXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINCXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINVWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINVWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINVXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSINVXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSNEGWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), 1)) {
      // (CSNEGXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::DCPS1:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS1 0)
      AsmString = "dcps1";
      break;
    }
    return false;
  case AArch64::DCPS2:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS2 0)
      AsmString = "dcps2";
      break;
    }
    return false;
  case AArch64::DCPS3:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS3 0)
      AsmString = "dcps3";
      break;
    }
    return false;
  case AArch64::EONWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eon $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EONXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eon $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eor $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eor $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EXTRWrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRWrri GPR32:$dst, GPR32:$src, GPR32:$src, imm0_31:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::EXTRXrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRXrri GPR64:$dst, GPR64:$src, GPR64:$src, imm0_63:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::HINT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HINT { 0, 0, 0 })
      AsmString = "nop";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (HINT { 0, 0, 1 })
      AsmString = "yield";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (HINT { 0, 1, 0 })
      AsmString = "wfe";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (HINT { 0, 1, 1 })
      AsmString = "wfi";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (HINT { 1, 0, 0 })
      AsmString = "sev";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (HINT { 1, 0, 1 })
      AsmString = "sevl";
      break;
    }
    return false;
  case AArch64::INSvi16gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi16gpr V128:$dst, VectorIndexH:$idx, GPR32:$src)
      AsmString = "mov.h	$\xFF\x01\x06$\xFF\x02\x09, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi16lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi16lane V128:$dst, VectorIndexH:$idx, V128:$src, VectorIndexH:$idx2)
      AsmString = "mov.h $\xFF\x01\x06$\xFF\x02\x09, $\xFF\x03\x06$\xFF\x04\x09";
      break;
    }
    return false;
  case AArch64::INSvi32gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi32gpr V128:$dst, VectorIndexS:$idx, GPR32:$src)
      AsmString = "mov.s	$\xFF\x01\x06$\xFF\x02\x09, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi32lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi32lane V128:$dst, VectorIndexS:$idx, V128:$src, VectorIndexS:$idx2)
      AsmString = "mov.s $\xFF\x01\x06$\xFF\x02\x09, $\xFF\x03\x06$\xFF\x04\x09";
      break;
    }
    return false;
  case AArch64::INSvi64gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi64gpr V128:$dst, VectorIndexD:$idx, GPR64:$src)
      AsmString = "mov.d	$\xFF\x01\x06$\xFF\x02\x09, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi64lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi64lane V128:$dst, VectorIndexD:$idx, V128:$src, VectorIndexD:$idx2)
      AsmString = "mov.d $\xFF\x01\x06$\xFF\x02\x09, $\xFF\x03\x06$\xFF\x04\x09";
      break;
    }
    return false;
  case AArch64::INSvi8gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi8gpr V128:$dst, VectorIndexB:$idx, GPR32:$src)
      AsmString = "mov.b	$\xFF\x01\x06$\xFF\x02\x09, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi8lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg())) {
      // (INSvi8lane V128:$dst, VectorIndexB:$idx, V128:$src, VectorIndexB:$idx2)
      AsmString = "mov.b $\xFF\x01\x06$\xFF\x02\x09, $\xFF\x03\x06$\xFF\x04\x09";
      break;
    }
    return false;
  case AArch64::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case AArch64::LD1Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0A, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Onev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0A, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0B, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0D, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0E, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0F, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x10, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Rv8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x11, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0A, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD2Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0E, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x10, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Rv8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x11, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD3Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0A, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0B, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0D, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0E, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0F, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x10, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Rv8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x11, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0A, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0C, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0F, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x10, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x11, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD4Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0A, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0C, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0F, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x11, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x10, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (LD4Rv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x11, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (LD4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LDNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSWi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldpsw $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrb $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrh $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSWroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsw $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSWui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsw $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsw $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursw $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::MADDWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MADDWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mul $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MADDXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MADDXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mul $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MOVKWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 16) {
      // (MOVKWi GPR32:$Rd, movk_symbol_g1:$sym, 16)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::MOVKXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 48) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g3:$sym, 48)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 32) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g2:$sym, 32)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 16) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g1:$sym, 16)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::MSUBWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MSUBWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mneg $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MSUBXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MSUBXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mneg $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::NOTv16i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv16i8 V128:$Vd, V128:$Vn)
      AsmString = "mvn.16b $\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::NOTv8i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv8i8 V64:$Vd, V64:$Vn)
      AsmString = "mvn.8b $\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::ORNWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, logical_shift32:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orn $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORNXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, logical_shift64:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orn $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orr $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orr $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRv16i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv16i8 V128:$dst, V128:$src, V128:$src)
      AsmString = "mov.16b	$\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::ORRv2i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv2i32 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.2s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv4i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv4i16 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.4h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv4i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv4i32 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.4s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv8i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv8i16 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.8h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv8i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv8i8 V64:$dst, V64:$src, V64:$src)
      AsmString = "mov.8b	$\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::PRFMroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (PRFMroX prfop:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "prfm $\xFF\x01\x16, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::PRFMui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFMui prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfm $\xFF\x01\x16, [$\x02]";
      break;
    }
    return false;
  case AArch64::PRFUMi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFUMi prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfum $\xFF\x01\x16, [$\x02]";
      break;
    }
    return false;
  case AArch64::RET:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == AArch64::LR) {
      // (RET LR)
      AsmString = "ret";
      break;
    }
    return false;
  case AArch64::SBCSWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCSXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (SBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "sxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smull $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smnegl $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ST1Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0A, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Onev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0A, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST1i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST1i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::ST2Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST2i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST2i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST3Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0A, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0C, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0F, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x10, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x11, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::ST3i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::ST3i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::ST4Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0A, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0C, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0F, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR) {
      // (ST4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x11, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x12$\xFF\x03\x09, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST4i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x13$\xFF\x03\x09, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST4i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x14$\xFF\x03\x09, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (ST4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x15$\xFF\x03\x09, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::STNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp $\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strb $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strh $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str $\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturb $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturh $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur $\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::SUBSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmp $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmp $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "subs $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmp $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "subs $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmp $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmp $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "subs $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmp $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmp $\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "subs $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "sub $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SYSxt:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(4).getReg() == AArch64::XZR) {
      // (SYSxt imm0_7:$op1, sys_cr_op:$Cn, sys_cr_op:$Cm, imm0_7:$op2, XZR)
      AsmString = "sys $\x01, $\xFF\x02\x17, $\xFF\x03\x17, $\x04";
      break;
    }
    return false;
  case AArch64::UBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (UBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "uxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umull $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::UMOVvi32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (UMOVvi32 GPR32:$dst, V128:$src, VectorIndexS:$idx)
      AsmString = "mov.s	$\x01, $\xFF\x02\x06$\xFF\x03\x09";
      break;
    }
    return false;
  case AArch64::UMOVvi64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (UMOVvi64 GPR64:$dst, V128:$src, VectorIndexD:$idx)
      AsmString = "mov.d	$\x01, $\xFF\x02\x06$\xFF\x03\x09";
      break;
    }
    return false;
  case AArch64::UMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umnegl $\x01, $\x02, $\x03";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void AArch64AppleInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printAddSubImm(MI, OpIdx, STI, OS);
    break;
  case 1:
    printShifter(MI, OpIdx, STI, OS);
    break;
  case 2:
    printArithExtend(MI, OpIdx, STI, OS);
    break;
  case 3:
    printLogicalImm32(MI, OpIdx, STI, OS);
    break;
  case 4:
    printLogicalImm64(MI, OpIdx, STI, OS);
    break;
  case 5:
    printVRegOperand(MI, OpIdx, STI, OS);
    break;
  case 6:
    printHexImm(MI, OpIdx, STI, OS);
    break;
  case 7:
    printInverseCondCode(MI, OpIdx, STI, OS);
    break;
  case 8:
    printVectorIndex(MI, OpIdx, STI, OS);
    break;
  case 9:
    printTypedVectorList<16, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 10:
    printTypedVectorList<1, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 11:
    printTypedVectorList<2, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 12:
    printTypedVectorList<2, 's'>(MI, OpIdx, STI, OS);
    break;
  case 13:
    printTypedVectorList<4, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 14:
    printTypedVectorList<4, 's'>(MI, OpIdx, STI, OS);
    break;
  case 15:
    printTypedVectorList<8, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 16:
    printTypedVectorList<8, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 17:
    printTypedVectorList<0, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 18:
    printTypedVectorList<0, 's'>(MI, OpIdx, STI, OS);
    break;
  case 19:
    printTypedVectorList<0, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 20:
    printTypedVectorList<0, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 21:
    printPrefetchOp(MI, OpIdx, STI, OS);
    break;
  case 22:
    printSysCROperand(MI, OpIdx, STI, OS);
    break;
  }
}

static bool AArch64AppleInstPrinterValidateMCOperand(
       const MCOperand &MCOp, unsigned PredicateIndex) {
  switch (PredicateIndex) {
  default:
    llvm_unreachable("Unknown MCOperandPredicate kind");
    break;
  case 1: {

    return MCOp.isImm() &&
           MCOp.getImm() != AArch64CC::AL &&
           MCOp.getImm() != AArch64CC::NV;
  
    }
  }
}

#endif // PRINT_ALIAS_INSTR
