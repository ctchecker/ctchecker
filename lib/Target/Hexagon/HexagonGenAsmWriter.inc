/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void HexagonInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    727U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    720U,	// BUNDLE
    737U,	// LIFETIME_START
    707U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// FRAME_ALLOC
    1050U,	// A2_abs
    1050U,	// A2_absp
    4195354U,	// A2_abssat
    8397850U,	// A2_add
    545268762U,	// A2_addh_h16_hh
    545268762U,	// A2_addh_h16_hl
    1082139674U,	// A2_addh_h16_lh
    1082139674U,	// A2_addh_h16_ll
    545268762U,	// A2_addh_h16_sat_hh
    545268762U,	// A2_addh_h16_sat_hl
    1082139674U,	// A2_addh_h16_sat_lh
    1082139674U,	// A2_addh_h16_sat_ll
    1082139674U,	// A2_addh_l16_hl
    1082139674U,	// A2_addh_l16_ll
    1082139674U,	// A2_addh_l16_sat_hl
    1082139674U,	// A2_addh_l16_sat_ll
    1619010586U,	// A2_addi
    8397850U,	// A2_addp
    8397850U,	// A2_addpsat
    8397850U,	// A2_addsat
    8397850U,	// A2_addsp
    8397850U,	// A2_addsph
    8397850U,	// A2_addspl
    2160083994U,	// A2_and
    2701149210U,	// A2_andir
    2160083994U,	// A2_andp
    25626U,	// A2_aslh
    33818U,	// A2_asrh
    2168497178U,	// A2_combine_hh
    2168497178U,	// A2_combine_hl
    2172691482U,	// A2_combine_lh
    2172691482U,	// A2_combine_ll
    1640023066U,	// A2_combineii
    2160108570U,	// A2_combinew
    58394U,	// A2_max
    58394U,	// A2_maxp
    66586U,	// A2_maxu
    66586U,	// A2_maxup
    74778U,	// A2_min
    74778U,	// A2_minp
    82970U,	// A2_minu
    82970U,	// A2_minup
    91162U,	// A2_negp
    4285466U,	// A2_negsat
    780U,	// A2_nop
    99354U,	// A2_not
    99354U,	// A2_notp
    2160174106U,	// A2_or
    2701239322U,	// A2_orir
    2160174106U,	// A2_orp
    33671221U,	// A2_paddf
    33679413U,	// A2_paddfnew
    1644283957U,	// A2_paddif
    1644292149U,	// A2_paddifnew
    1644284220U,	// A2_paddit
    1644292412U,	// A2_padditnew
    33671484U,	// A2_paddt
    33679676U,	// A2_paddtnew
    37865525U,	// A2_pandf
    37873717U,	// A2_pandfnew
    37865788U,	// A2_pandt
    37873980U,	// A2_pandtnew
    42059829U,	// A2_porf
    42068021U,	// A2_porfnew
    42060092U,	// A2_port
    42068284U,	// A2_portnew
    46254133U,	// A2_psubf
    46262325U,	// A2_psubfnew
    46254396U,	// A2_psubt
    46262588U,	// A2_psubtnew
    50448437U,	// A2_pxorf
    50456629U,	// A2_pxorfnew
    50448700U,	// A2_pxort
    50456892U,	// A2_pxortnew
    4326426U,	// A2_roundsat
    140314U,	// A2_sat
    148506U,	// A2_satb
    156698U,	// A2_sath
    164890U,	// A2_satub
    173082U,	// A2_satuh
    8569882U,	// A2_sub
    545440794U,	// A2_subh_h16_hh
    545440794U,	// A2_subh_h16_hl
    1082311706U,	// A2_subh_h16_lh
    1082311706U,	// A2_subh_h16_ll
    545440794U,	// A2_subh_h16_sat_hh
    545440794U,	// A2_subh_h16_sat_hl
    1082311706U,	// A2_subh_h16_sat_lh
    1082311706U,	// A2_subh_h16_sat_ll
    1082311706U,	// A2_subh_l16_hl
    1082311706U,	// A2_subh_l16_ll
    1082311706U,	// A2_subh_l16_sat_hl
    1082311706U,	// A2_subh_l16_sat_ll
    8569882U,	// A2_subp
    2160256026U,	// A2_subri
    8569882U,	// A2_subsat
    197658U,	// A2_svaddh
    4391962U,	// A2_svaddhs
    205850U,	// A2_svadduhs
    214042U,	// A2_svavgh
    54739994U,	// A2_svavghs
    222234U,	// A2_svnavgh
    230426U,	// A2_svsubh
    4424730U,	// A2_svsubhs
    238618U,	// A2_svsubuhs
    246810U,	// A2_swiz
    255002U,	// A2_sxtb
    263194U,	// A2_sxth
    271386U,	// A2_sxtw
    58999834U,	// A2_tfr
    58999834U,	// A2_tfrcrr
    63031349U,	// A2_tfrf
    63039541U,	// A2_tfrfnew
    287770U,	// A2_tfrih
    295962U,	// A2_tfril
    58999834U,	// A2_tfrp
    63031349U,	// A2_tfrpf
    63039541U,	// A2_tfrpfnew
    3288638490U,	// A2_tfrpi
    63031612U,	// A2_tfrpt
    63039804U,	// A2_tfrptnew
    58999834U,	// A2_tfrrcr
    3250889754U,	// A2_tfrsi
    63031612U,	// A2_tfrt
    63039804U,	// A2_tfrtnew
    312346U,	// A2_vabsh
    4506650U,	// A2_vabshsat
    320538U,	// A2_vabsw
    4514842U,	// A2_vabswsat
    197658U,	// A2_vaddh
    4391962U,	// A2_vaddhs
    328730U,	// A2_vaddub
    4523034U,	// A2_vaddubs
    205850U,	// A2_vadduhs
    336922U,	// A2_vaddw
    4531226U,	// A2_vaddws
    214042U,	// A2_vavgh
    71517210U,	// A2_vavghcr
    54739994U,	// A2_vavghr
    345114U,	// A2_vavgub
    54871066U,	// A2_vavgubr
    353306U,	// A2_vavguh
    54879258U,	// A2_vavguhr
    361498U,	// A2_vavguw
    54887450U,	// A2_vavguwr
    369690U,	// A2_vavgw
    71672858U,	// A2_vavgwcr
    54895642U,	// A2_vavgwr
    2160444442U,	// A2_vcmpbeq
    2160452634U,	// A2_vcmpbgtu
    2160460826U,	// A2_vcmpheq
    2160469018U,	// A2_vcmphgt
    2160477210U,	// A2_vcmphgtu
    2160485402U,	// A2_vcmpweq
    2160493594U,	// A2_vcmpwgt
    2160501786U,	// A2_vcmpwgtu
    443418U,	// A2_vconj
    451610U,	// A2_vmaxb
    459802U,	// A2_vmaxh
    467994U,	// A2_vmaxub
    476186U,	// A2_vmaxuh
    484378U,	// A2_vmaxuw
    492570U,	// A2_vmaxw
    500762U,	// A2_vminb
    508954U,	// A2_vminh
    517146U,	// A2_vminub
    525338U,	// A2_vminuh
    533530U,	// A2_vminuw
    541722U,	// A2_vminw
    222234U,	// A2_vnavgh
    75719706U,	// A2_vnavghcr
    79914010U,	// A2_vnavghr
    549914U,	// A2_vnavgw
    76047386U,	// A2_vnavgwcr
    80241690U,	// A2_vnavgwr
    558106U,	// A2_vraddub
    566298U,	// A2_vraddub_acc
    574490U,	// A2_vrsadub
    582682U,	// A2_vrsadub_acc
    230426U,	// A2_vsubh
    4424730U,	// A2_vsubhs
    590874U,	// A2_vsubub
    4785178U,	// A2_vsububs
    238618U,	// A2_vsubuhs
    599066U,	// A2_vsubw
    4793370U,	// A2_vsubws
    8995866U,	// A2_xor
    8995866U,	// A2_xorp
    615450U,	// A2_zxtb
    623642U,	// A2_zxth
    83895322U,	// A4_addp_c
    2235581466U,	// A4_andn
    2235581466U,	// A4_andnp
    2160698394U,	// A4_bitsplit
    3775505434U,	// A4_bitspliti
    640026U,	// A4_boundscheck
    92922906U,	// A4_boundscheck_hi
    97117210U,	// A4_boundscheck_lo
    2160722970U,	// A4_cmpbeq
    3775530010U,	// A4_cmpbeqi
    2160731162U,	// A4_cmpbgt
    3775538202U,	// A4_cmpbgti
    2160739354U,	// A4_cmpbgtu
    2701804570U,	// A4_cmpbgtui
    2160747546U,	// A4_cmpheq
    2701812762U,	// A4_cmpheqi
    2160755738U,	// A4_cmphgt
    2701820954U,	// A4_cmphgti
    2160763930U,	// A4_cmphgtu
    2701829146U,	// A4_cmphgtui
    1677771802U,	// A4_combineii
    29410330U,	// A4_combineir
    2701173786U,	// A4_combineri
    3775579162U,	// A4_cround_ri
    2160772122U,	// A4_cround_rr
    716076U,	// A4_ext
    714028U,	// A4_ext_b
    714028U,	// A4_ext_c
    717100U,	// A4_ext_g
    721946U,	// A4_modwrapu
    2235671578U,	// A4_orn
    2235671578U,	// A4_ornp
    100780085U,	// A4_paslhf
    100788277U,	// A4_paslhfnew
    100780348U,	// A4_paslht
    100788540U,	// A4_paslhtnew
    104974389U,	// A4_pasrhf
    104982581U,	// A4_pasrhfnew
    104974652U,	// A4_pasrht
    104982844U,	// A4_pasrhtnew
    109168693U,	// A4_psxtbf
    109176885U,	// A4_psxtbfnew
    109168956U,	// A4_psxtbt
    109177148U,	// A4_psxtbtnew
    113362997U,	// A4_psxthf
    113371189U,	// A4_psxthfnew
    113363260U,	// A4_psxtht
    113371452U,	// A4_psxthtnew
    117557301U,	// A4_pzxtbf
    117565493U,	// A4_pzxtbfnew
    117557564U,	// A4_pzxtbt
    117565756U,	// A4_pzxtbtnew
    121751605U,	// A4_pzxthf
    121759797U,	// A4_pzxthfnew
    121751868U,	// A4_pzxtht
    121760060U,	// A4_pzxthtnew
    2160796698U,	// A4_rcmpeq
    2701861914U,	// A4_rcmpeqi
    2160804890U,	// A4_rcmpneq
    2701870106U,	// A4_rcmpneqi
    3775005722U,	// A4_round_ri
    3775005722U,	// A4_round_ri_sat
    2160198682U,	// A4_round_rr
    2160198682U,	// A4_round_rr_sat
    84067354U,	// A4_subp_c
    58999834U,	// A4_tfrcpp
    58999834U,	// A4_tfrpcp
    746522U,	// A4_tlbmatch
    754714U,	// A4_vcmpbeq_any
    3775251482U,	// A4_vcmpbeqi
    2160829466U,	// A4_vcmpbgt
    3775636506U,	// A4_vcmpbgti
    3775259674U,	// A4_vcmpbgtui
    3775267866U,	// A4_vcmpheqi
    3775276058U,	// A4_vcmphgti
    3775284250U,	// A4_vcmphgtui
    3775292442U,	// A4_vcmpweqi
    3775300634U,	// A4_vcmpwgti
    3775308826U,	// A4_vcmpwgtui
    771098U,	// A4_vrmaxh
    779290U,	// A4_vrmaxuh
    787482U,	// A4_vrmaxuw
    795674U,	// A4_vrmaxw
    803866U,	// A4_vrminh
    812058U,	// A4_vrminuh
    820250U,	// A4_vrminuw
    828442U,	// A4_vrminw
    836634U,	// A5_vaddhubs
    1U,	// ADJCALLSTACKDOWN
    1U,	// ADJCALLSTACKUP
    1619010586U,	// ADJDYNALLOC
    58999834U,	// ARGEXTEND
    844826U,	// C2_all8
    2160083994U,	// C2_and
    125846554U,	// C2_andn
    853018U,	// C2_any8
    2160927770U,	// C2_bitsclr
    3775734810U,	// C2_bitsclri
    869402U,	// C2_bitsset
    130140213U,	// C2_ccombinewf
    130148405U,	// C2_ccombinewnewf
    130148668U,	// C2_ccombinewnewt
    130140476U,	// C2_ccombinewt
    2818689077U,	// C2_cmoveif
    2818689340U,	// C2_cmoveit
    2818697269U,	// C2_cmovenewif
    2818697532U,	// C2_cmovenewit
    2160796698U,	// C2_cmpeq
    2701861914U,	// C2_cmpeqi
    2160796698U,	// C2_cmpeqp
    877594U,	// C2_cmpgei
    885786U,	// C2_cmpgeui
    2160960538U,	// C2_cmpgt
    2702025754U,	// C2_cmpgti
    2160960538U,	// C2_cmpgtp
    2160968730U,	// C2_cmpgtu
    2702033946U,	// C2_cmpgtui
    2160968730U,	// C2_cmpgtup
    910362U,	// C2_mask
    2160985114U,	// C2_mux
    2702050330U,	// C2_muxii
    2160985114U,	// C2_muxir
    2702050330U,	// C2_muxri
    99354U,	// C2_not
    2160174106U,	// C2_or
    125936666U,	// C2_orn
    58999834U,	// C2_pxfer_map
    58999834U,	// C2_tfrpr
    58999834U,	// C2_tfrrp
    926746U,	// C2_vitpack
    934938U,	// C2_vmux
    8995866U,	// C2_xor
    943130U,	// C4_addipc
    138429466U,	// C4_and_and
    138429466U,	// C4_and_andn
    142623770U,	// C4_and_or
    142623770U,	// C4_and_orn
    2161017882U,	// C4_cmplte
    2702083098U,	// C4_cmpltei
    2161026074U,	// C4_cmplteu
    2702091290U,	// C4_cmplteui
    2160804890U,	// C4_cmpneq
    2701870106U,	// C4_cmpneqi
    967706U,	// C4_fastcorner9
    975898U,	// C4_fastcorner9_not
    2161050650U,	// C4_nbitsclr
    3775857690U,	// C4_nbitsclri
    992282U,	// C4_nbitsset
    138519578U,	// C4_or_and
    138519578U,	// C4_or_andn
    142713882U,	// C4_or_or
    142713882U,	// C4_or_orn
    1000487U,	// CALLRv3nr
    1000475U,	// CALLv3nr
    684680218U,	// CONST32
    546268186U,	// CONST32_Float_Real
    546268186U,	// CONST32_Int_Real
    1016858U,	// CONST32_Label
    152003610U,	// CONST32_set_jt
    1025050U,	// CONST64_Float_Real
    1025050U,	// CONST64_Int_Real
    0U,	// DuplexIClass0
    0U,	// DuplexIClass1
    0U,	// DuplexIClass2
    0U,	// DuplexIClass3
    0U,	// DuplexIClass4
    0U,	// DuplexIClass5
    0U,	// DuplexIClass6
    0U,	// DuplexIClass7
    0U,	// DuplexIClass8
    0U,	// DuplexIClass9
    0U,	// DuplexIClassA
    0U,	// DuplexIClassB
    0U,	// DuplexIClassC
    0U,	// DuplexIClassD
    0U,	// DuplexIClassE
    0U,	// DuplexIClassF
    1000494U,	// EH_RETURN_JMPR
    687U,	// ENDLOOP0
    697U,	// ENDLOOP1
    1033242U,	// F2_conv_d2df
    1041434U,	// F2_conv_d2sf
    1049626U,	// F2_conv_df2d
    156238874U,	// F2_conv_df2d_chop
    1057818U,	// F2_conv_df2sf
    1066010U,	// F2_conv_df2ud
    156255258U,	// F2_conv_df2ud_chop
    1074202U,	// F2_conv_df2uw
    156263450U,	// F2_conv_df2uw_chop
    1082394U,	// F2_conv_df2w
    156271642U,	// F2_conv_df2w_chop
    1090586U,	// F2_conv_sf2d
    156279834U,	// F2_conv_sf2d_chop
    1098778U,	// F2_conv_sf2df
    1106970U,	// F2_conv_sf2ud
    156296218U,	// F2_conv_sf2ud_chop
    1115162U,	// F2_conv_sf2uw
    156304410U,	// F2_conv_sf2uw_chop
    1123354U,	// F2_conv_sf2w
    156312602U,	// F2_conv_sf2w_chop
    1131546U,	// F2_conv_ud2df
    1139738U,	// F2_conv_ud2sf
    1147930U,	// F2_conv_uw2df
    1156122U,	// F2_conv_uw2sf
    1164314U,	// F2_conv_w2df
    1172506U,	// F2_conv_w2sf
    1180698U,	// F2_dfclass
    1188890U,	// F2_dfcmpeq
    1197082U,	// F2_dfcmpge
    1205274U,	// F2_dfcmpgt
    1213466U,	// F2_dfcmpuo
    160605210U,	// F2_dfimm_n
    164799514U,	// F2_dfimm_p
    1229850U,	// F2_sfadd
    1238042U,	// F2_sfclass
    1246234U,	// F2_sfcmpeq
    1254426U,	// F2_sfcmpge
    1262618U,	// F2_sfcmpgt
    1270810U,	// F2_sfcmpuo
    1279002U,	// F2_sffixupd
    1287194U,	// F2_sffixupn
    1295386U,	// F2_sffixupr
    1303578U,	// F2_sffma
    169075738U,	// F2_sffma_lib
    1087628314U,	// F2_sffma_sc
    1311770U,	// F2_sffms
    169083930U,	// F2_sffms_lib
    160703514U,	// F2_sfimm_n
    164897818U,	// F2_sfimm_p
    1620329498U,	// F2_sfinvsqrta
    1336346U,	// F2_sfmax
    1344538U,	// F2_sfmin
    1352730U,	// F2_sfmpy
    2157200410U,	// F2_sfrecipa
    1360922U,	// F2_sfsub
    684680218U,	// FCONST32_nsdata
    546628634U,	// HI
    2832524314U,	// HI_GOT
    3369395226U,	// HI_GOTREL
    1377306U,	// HI_L
    3230983194U,	// HI_PIC
    68U,	// Insert4
    1000475U,	// J2_call
    1385525U,	// J2_callf
    1000487U,	// J2_callr
    1393717U,	// J2_callrf
    1393980U,	// J2_callrt
    1385788U,	// J2_callt
    1000481U,	// J2_jump
    1000674U,	// J2_jump_ext
    1401909U,	// J2_jump_extf
    1410101U,	// J2_jump_extfnew
    1418293U,	// J2_jump_extfnewpt
    1402172U,	// J2_jump_extt
    1410364U,	// J2_jump_exttnew
    1418556U,	// J2_jump_exttnewpt
    1000667U,	// J2_jump_noext
    1426485U,	// J2_jump_noextf
    1434677U,	// J2_jump_noextfnew
    1442869U,	// J2_jump_noextfnewpt
    1426748U,	// J2_jump_noextt
    1434940U,	// J2_jump_noexttnew
    1443132U,	// J2_jump_noexttnewpt
    1451061U,	// J2_jumpf
    1459253U,	// J2_jumpfnew
    1467445U,	// J2_jumpfnewpt
    1000494U,	// J2_jumpr
    1475637U,	// J2_jumprf
    1483829U,	// J2_jumprfnew
    1492021U,	// J2_jumprfnewpt
    1500476U,	// J2_jumprgtez
    1508668U,	// J2_jumprgtezpt
    1516860U,	// J2_jumprltez
    1525052U,	// J2_jumprltezpt
    1533244U,	// J2_jumprnz
    1541436U,	// J2_jumprnzpt
    1475900U,	// J2_jumprt
    1484092U,	// J2_jumprtnew
    1492284U,	// J2_jumprtnewpt
    1549628U,	// J2_jumprz
    1557820U,	// J2_jumprzpt
    1451324U,	// J2_jumpt
    1459516U,	// J2_jumptnew
    1467708U,	// J2_jumptnewpt
    1566025U,	// J2_loop0i
    1566025U,	// J2_loop0iext
    546587977U,	// J2_loop0r
    546587977U,	// J2_loop0rext
    1566062U,	// J2_loop1i
    1566062U,	// J2_loop1iext
    546588014U,	// J2_loop1r
    546588014U,	// J2_loop1rext
    1566017U,	// J2_ploop1si
    546587969U,	// J2_ploop1sr
    1566032U,	// J2_ploop2si
    546587984U,	// J2_ploop2sr
    1566047U,	// J2_ploop3si
    546587999U,	// J2_ploop3sr
    173540835U,	// J4_cmpeq_f_jumpnv_nt
    177735139U,	// J4_cmpeq_f_jumpnv_t
    3767813577U,	// J4_cmpeq_fp0_jump_nt
    9717193U,	// J4_cmpeq_fp0_jump_t
    546588118U,	// J4_cmpeq_fp1_jump_nt
    1083459030U,	// J4_cmpeq_fp1_jump_t
    173540848U,	// J4_cmpeq_t_jumpnv_nt
    177735152U,	// J4_cmpeq_t_jumpnv_t
    1620329929U,	// J4_cmpeq_tp0_jump_nt
    2157200841U,	// J4_cmpeq_tp0_jump_t
    2694071766U,	// J4_cmpeq_tp1_jump_nt
    3230942678U,	// J4_cmpeq_tp1_jump_t
    173549027U,	// J4_cmpeqi_f_jumpnv_nt
    177743331U,	// J4_cmpeqi_f_jumpnv_t
    181921225U,	// J4_cmpeqi_fp0_jump_nt
    186115529U,	// J4_cmpeqi_fp0_jump_t
    190309846U,	// J4_cmpeqi_fp1_jump_nt
    194504150U,	// J4_cmpeqi_fp1_jump_t
    173549040U,	// J4_cmpeqi_t_jumpnv_nt
    177743344U,	// J4_cmpeqi_t_jumpnv_t
    198698441U,	// J4_cmpeqi_tp0_jump_nt
    202892745U,	// J4_cmpeqi_tp0_jump_t
    207087062U,	// J4_cmpeqi_tp1_jump_nt
    211281366U,	// J4_cmpeqi_tp1_jump_t
    1590755U,	// J4_cmpeqn1_f_jumpnv_nt
    1598947U,	// J4_cmpeqn1_f_jumpnv_t
    1607113U,	// J4_cmpeqn1_fp0_jump_nt
    1615305U,	// J4_cmpeqn1_fp0_jump_t
    1623510U,	// J4_cmpeqn1_fp1_jump_nt
    1631702U,	// J4_cmpeqn1_fp1_jump_t
    1590768U,	// J4_cmpeqn1_t_jumpnv_nt
    1598960U,	// J4_cmpeqn1_t_jumpnv_t
    1639881U,	// J4_cmpeqn1_tp0_jump_nt
    1648073U,	// J4_cmpeqn1_tp0_jump_t
    1656278U,	// J4_cmpeqn1_tp1_jump_nt
    1664470U,	// J4_cmpeqn1_tp1_jump_t
    173540894U,	// J4_cmpgt_f_jumpnv_nt
    177735198U,	// J4_cmpgt_f_jumpnv_t
    3767813636U,	// J4_cmpgt_fp0_jump_nt
    9717252U,	// J4_cmpgt_fp0_jump_t
    546588177U,	// J4_cmpgt_fp1_jump_nt
    1083459089U,	// J4_cmpgt_fp1_jump_t
    173540907U,	// J4_cmpgt_t_jumpnv_nt
    177735211U,	// J4_cmpgt_t_jumpnv_t
    1620329988U,	// J4_cmpgt_tp0_jump_nt
    2157200900U,	// J4_cmpgt_tp0_jump_t
    2694071825U,	// J4_cmpgt_tp1_jump_nt
    3230942737U,	// J4_cmpgt_tp1_jump_t
    173549086U,	// J4_cmpgti_f_jumpnv_nt
    177743390U,	// J4_cmpgti_f_jumpnv_t
    181921284U,	// J4_cmpgti_fp0_jump_nt
    186115588U,	// J4_cmpgti_fp0_jump_t
    190309905U,	// J4_cmpgti_fp1_jump_nt
    194504209U,	// J4_cmpgti_fp1_jump_t
    173549099U,	// J4_cmpgti_t_jumpnv_nt
    177743403U,	// J4_cmpgti_t_jumpnv_t
    198698500U,	// J4_cmpgti_tp0_jump_nt
    202892804U,	// J4_cmpgti_tp0_jump_t
    207087121U,	// J4_cmpgti_tp1_jump_nt
    211281425U,	// J4_cmpgti_tp1_jump_t
    1590814U,	// J4_cmpgtn1_f_jumpnv_nt
    1599006U,	// J4_cmpgtn1_f_jumpnv_t
    1607172U,	// J4_cmpgtn1_fp0_jump_nt
    1615364U,	// J4_cmpgtn1_fp0_jump_t
    1623569U,	// J4_cmpgtn1_fp1_jump_nt
    1631761U,	// J4_cmpgtn1_fp1_jump_t
    1590827U,	// J4_cmpgtn1_t_jumpnv_nt
    1599019U,	// J4_cmpgtn1_t_jumpnv_t
    1639940U,	// J4_cmpgtn1_tp0_jump_nt
    1648132U,	// J4_cmpgtn1_tp0_jump_t
    1656337U,	// J4_cmpgtn1_tp1_jump_nt
    1664529U,	// J4_cmpgtn1_tp1_jump_t
    173540998U,	// J4_cmpgtu_f_jumpnv_nt
    177735302U,	// J4_cmpgtu_f_jumpnv_t
    3767813738U,	// J4_cmpgtu_fp0_jump_nt
    9717354U,	// J4_cmpgtu_fp0_jump_t
    546588280U,	// J4_cmpgtu_fp1_jump_nt
    1083459192U,	// J4_cmpgtu_fp1_jump_t
    173541012U,	// J4_cmpgtu_t_jumpnv_nt
    177735316U,	// J4_cmpgtu_t_jumpnv_t
    1620330090U,	// J4_cmpgtu_tp0_jump_nt
    2157201002U,	// J4_cmpgtu_tp0_jump_t
    2694071928U,	// J4_cmpgtu_tp1_jump_nt
    3230942840U,	// J4_cmpgtu_tp1_jump_t
    173549190U,	// J4_cmpgtui_f_jumpnv_nt
    177743494U,	// J4_cmpgtui_f_jumpnv_t
    181921386U,	// J4_cmpgtui_fp0_jump_nt
    186115690U,	// J4_cmpgtui_fp0_jump_t
    190310008U,	// J4_cmpgtui_fp1_jump_nt
    194504312U,	// J4_cmpgtui_fp1_jump_t
    173549204U,	// J4_cmpgtui_t_jumpnv_nt
    177743508U,	// J4_cmpgtui_t_jumpnv_t
    198698602U,	// J4_cmpgtui_tp0_jump_nt
    202892906U,	// J4_cmpgtui_tp0_jump_t
    207087224U,	// J4_cmpgtui_tp1_jump_nt
    211281528U,	// J4_cmpgtui_tp1_jump_t
    3767813662U,	// J4_cmplt_f_jumpnv_nt
    9717278U,	// J4_cmplt_f_jumpnv_t
    3767813675U,	// J4_cmplt_t_jumpnv_nt
    9717291U,	// J4_cmplt_t_jumpnv_t
    3767813766U,	// J4_cmpltu_f_jumpnv_nt
    9717382U,	// J4_cmpltu_f_jumpnv_t
    3767813780U,	// J4_cmpltu_t_jumpnv_nt
    9717396U,	// J4_cmpltu_t_jumpnv_t
    714236U,	// J4_hintjumpr
    604283930U,	// J4_jumpseti
    214189082U,	// J4_jumpsetr
    1672785U,	// J4_tstbit0_f_jumpnv_nt
    1680977U,	// J4_tstbit0_f_jumpnv_t
    1689143U,	// J4_tstbit0_fp0_jump_nt
    1697335U,	// J4_tstbit0_fp0_jump_t
    1705540U,	// J4_tstbit0_fp1_jump_nt
    1713732U,	// J4_tstbit0_fp1_jump_t
    1672798U,	// J4_tstbit0_t_jumpnv_nt
    1680990U,	// J4_tstbit0_t_jumpnv_t
    1721911U,	// J4_tstbit0_tp0_jump_nt
    1730103U,	// J4_tstbit0_tp0_jump_t
    1738308U,	// J4_tstbit0_tp1_jump_nt
    1746500U,	// J4_tstbit0_tp1_jump_t
    1000494U,	// JMPret
    1475637U,	// JMPretf
    1483829U,	// JMPretfnew
    1492021U,	// JMPretfnewpt
    1475900U,	// JMPrett
    1484092U,	// JMPrettnew
    1492284U,	// JMPrettnewpt
    752U,	// L2_deallocframe
    1159382042U,	// L2_loadalignb_io
    1696252954U,	// L2_loadalignb_pbr
    2233123866U,	// L2_loadalignb_pci
    2904212506U,	// L2_loadalignb_pcr
    3441083418U,	// L2_loadalignb_pi
    3977954330U,	// L2_loadalignb_pr
    1159390234U,	// L2_loadalignh_io
    1696261146U,	// L2_loadalignh_pbr
    2233132058U,	// L2_loadalignh_pci
    2904220698U,	// L2_loadalignh_pcr
    3441091610U,	// L2_loadalignh_pi
    3977962522U,	// L2_loadalignh_pr
    1083900954U,	// L2_loadbsw2_io
    1696269338U,	// L2_loadbsw2_pbr
    2233140250U,	// L2_loadbsw2_pci
    2770011162U,	// L2_loadbsw2_pcr
    3306882074U,	// L2_loadbsw2_pi
    3843752986U,	// L2_loadbsw2_pr
    1083900954U,	// L2_loadbsw4_io
    1696269338U,	// L2_loadbsw4_pbr
    2233140250U,	// L2_loadbsw4_pci
    2770011162U,	// L2_loadbsw4_pcr
    3306882074U,	// L2_loadbsw4_pi
    3843752986U,	// L2_loadbsw4_pr
    1083909146U,	// L2_loadbzw2_io
    1696277530U,	// L2_loadbzw2_pbr
    2233148442U,	// L2_loadbzw2_pci
    2770019354U,	// L2_loadbzw2_pcr
    3306890266U,	// L2_loadbzw2_pi
    3843761178U,	// L2_loadbzw2_pr
    1083909146U,	// L2_loadbzw4_io
    1696277530U,	// L2_loadbzw4_pbr
    2233148442U,	// L2_loadbzw4_pci
    2770019354U,	// L2_loadbzw4_pcr
    3306890266U,	// L2_loadbzw4_pi
    3843761178U,	// L2_loadbzw4_pr
    1083917338U,	// L2_loadrb_io
    1696285722U,	// L2_loadrb_pbr
    3843770427U,	// L2_loadrb_pbr_pseudo
    2233156634U,	// L2_loadrb_pci
    3306899515U,	// L2_loadrb_pci_pseudo
    2770027546U,	// L2_loadrb_pcr
    3306898458U,	// L2_loadrb_pi
    3843769370U,	// L2_loadrb_pr
    1795098U,	// L2_loadrbgp
    1083933722U,	// L2_loadrd_io
    1696302106U,	// L2_loadrd_pbr
    3843786811U,	// L2_loadrd_pbr_pseudo
    2233173018U,	// L2_loadrd_pci
    3306915899U,	// L2_loadrd_pci_pseudo
    2770043930U,	// L2_loadrd_pcr
    3306914842U,	// L2_loadrd_pi
    3843785754U,	// L2_loadrd_pr
    1811482U,	// L2_loadrdgp
    1083950106U,	// L2_loadrh_io
    1696318490U,	// L2_loadrh_pbr
    3843803195U,	// L2_loadrh_pbr_pseudo
    2233189402U,	// L2_loadrh_pci
    3306932283U,	// L2_loadrh_pci_pseudo
    2770060314U,	// L2_loadrh_pcr
    3306931226U,	// L2_loadrh_pi
    3843802138U,	// L2_loadrh_pr
    1827866U,	// L2_loadrhgp
    1083966490U,	// L2_loadri_io
    1696334874U,	// L2_loadri_pbr
    3843819579U,	// L2_loadri_pbr_pseudo
    2233205786U,	// L2_loadri_pci
    3306948667U,	// L2_loadri_pci_pseudo
    2770076698U,	// L2_loadri_pcr
    3306947610U,	// L2_loadri_pi
    3843818522U,	// L2_loadri_pr
    1844250U,	// L2_loadrigp
    1083982874U,	// L2_loadrub_io
    1696351258U,	// L2_loadrub_pbr
    3843835963U,	// L2_loadrub_pbr_pseudo
    2233222170U,	// L2_loadrub_pci
    3306965051U,	// L2_loadrub_pci_pseudo
    2770093082U,	// L2_loadrub_pcr
    3306963994U,	// L2_loadrub_pi
    3843834906U,	// L2_loadrub_pr
    1860634U,	// L2_loadrubgp
    1083999258U,	// L2_loadruh_io
    1696367642U,	// L2_loadruh_pbr
    3843852347U,	// L2_loadruh_pbr_pseudo
    2233238554U,	// L2_loadruh_pci
    3306981435U,	// L2_loadruh_pci_pseudo
    2770109466U,	// L2_loadruh_pcr
    3306980378U,	// L2_loadruh_pi
    3843851290U,	// L2_loadruh_pr
    1877018U,	// L2_loadruhgp
    1885210U,	// L2_loadw_locked
    2369898549U,	// L2_ploadrbf_io
    222417973U,	// L2_ploadrbf_pi
    2369906741U,	// L2_ploadrbfnew_io
    222426165U,	// L2_ploadrbfnew_pi
    2369898812U,	// L2_ploadrbt_io
    222418236U,	// L2_ploadrbt_pi
    2369907004U,	// L2_ploadrbtnew_io
    222426428U,	// L2_ploadrbtnew_pi
    2374092853U,	// L2_ploadrdf_io
    226612277U,	// L2_ploadrdf_pi
    2374101045U,	// L2_ploadrdfnew_io
    226620469U,	// L2_ploadrdfnew_pi
    2374093116U,	// L2_ploadrdt_io
    226612540U,	// L2_ploadrdt_pi
    2374101308U,	// L2_ploadrdtnew_io
    226620732U,	// L2_ploadrdtnew_pi
    2378287157U,	// L2_ploadrhf_io
    230806581U,	// L2_ploadrhf_pi
    2378295349U,	// L2_ploadrhfnew_io
    230814773U,	// L2_ploadrhfnew_pi
    2378287420U,	// L2_ploadrht_io
    230806844U,	// L2_ploadrht_pi
    2378295612U,	// L2_ploadrhtnew_io
    230815036U,	// L2_ploadrhtnew_pi
    2382481461U,	// L2_ploadrif_io
    235000885U,	// L2_ploadrif_pi
    2382489653U,	// L2_ploadrifnew_io
    235009077U,	// L2_ploadrifnew_pi
    2382481724U,	// L2_ploadrit_io
    235001148U,	// L2_ploadrit_pi
    2382489916U,	// L2_ploadritnew_io
    235009340U,	// L2_ploadritnew_pi
    2386675765U,	// L2_ploadrubf_io
    239195189U,	// L2_ploadrubf_pi
    2386683957U,	// L2_ploadrubfnew_io
    239203381U,	// L2_ploadrubfnew_pi
    2386676028U,	// L2_ploadrubt_io
    239195452U,	// L2_ploadrubt_pi
    2386684220U,	// L2_ploadrubtnew_io
    239203644U,	// L2_ploadrubtnew_pi
    2390870069U,	// L2_ploadruhf_io
    243389493U,	// L2_ploadruhf_pi
    2390878261U,	// L2_ploadruhfnew_io
    243397685U,	// L2_ploadruhfnew_pi
    2390870332U,	// L2_ploadruht_io
    243389756U,	// L2_ploadruht_pi
    2390878524U,	// L2_ploadruhtnew_io
    243397948U,	// L2_ploadruhtnew_pi
    568124797U,	// L4_add_memopb_io
    568124867U,	// L4_add_memoph_io
    568125097U,	// L4_add_memopw_io
    1104995709U,	// L4_and_memopb_io
    1104995779U,	// L4_and_memoph_io
    1104996009U,	// L4_and_memopw_io
    1641866621U,	// L4_iadd_memopb_io
    1641866691U,	// L4_iadd_memoph_io
    1641866921U,	// L4_iadd_memopw_io
    2178737533U,	// L4_iand_memopb_io
    2178737603U,	// L4_iand_memoph_io
    2178737833U,	// L4_iand_memopw_io
    2715608445U,	// L4_ior_memopb_io
    2715608515U,	// L4_ior_memoph_io
    2715608745U,	// L4_ior_memopw_io
    3252479357U,	// L4_isub_memopb_io
    3252479427U,	// L4_isub_memoph_io
    3252479657U,	// L4_isub_memopw_io
    3768239130U,	// L4_loadalignb_ap
    10142746U,	// L4_loadalignb_ur
    3768247322U,	// L4_loadalignh_ap
    10150938U,	// L4_loadalignh_ur
    3768255514U,	// L4_loadbsw2_ap
    10159130U,	// L4_loadbsw2_ur
    3768255514U,	// L4_loadbsw4_ap
    10159130U,	// L4_loadbsw4_ur
    3768263706U,	// L4_loadbzw2_ap
    10167322U,	// L4_loadbzw2_ur
    3768263706U,	// L4_loadbzw4_ap
    10167322U,	// L4_loadbzw4_ur
    1901594U,	// L4_loadd_locked
    1909786U,	// L4_loadrb_abs
    3768271898U,	// L4_loadrb_ap
    547046426U,	// L4_loadrb_rr
    10175514U,	// L4_loadrb_ur
    1917978U,	// L4_loadrd_abs
    3768288282U,	// L4_loadrd_ap
    547062810U,	// L4_loadrd_rr
    10191898U,	// L4_loadrd_ur
    1926170U,	// L4_loadrh_abs
    3768304666U,	// L4_loadrh_ap
    547079194U,	// L4_loadrh_rr
    10208282U,	// L4_loadrh_ur
    1934362U,	// L4_loadri_abs
    3768321050U,	// L4_loadri_ap
    547095578U,	// L4_loadri_rr
    10224666U,	// L4_loadri_ur
    1942554U,	// L4_loadrub_abs
    3768337434U,	// L4_loadrub_ap
    547111962U,	// L4_loadrub_rr
    10241050U,	// L4_loadrub_ur
    1950746U,	// L4_loadruh_abs
    3768353818U,	// L4_loadruh_ap
    547128346U,	// L4_loadruh_rr
    10257434U,	// L4_loadruh_ur
    1104995709U,	// L4_or_memopb_io
    1104995779U,	// L4_or_memoph_io
    1104996009U,	// L4_or_memopw_io
    247580725U,	// L4_ploadrbf_abs
    2369898549U,	// L4_ploadrbf_rr
    247588917U,	// L4_ploadrbfnew_abs
    2369906741U,	// L4_ploadrbfnew_rr
    247580988U,	// L4_ploadrbt_abs
    2369898812U,	// L4_ploadrbt_rr
    247589180U,	// L4_ploadrbtnew_abs
    2369907004U,	// L4_ploadrbtnew_rr
    251775029U,	// L4_ploadrdf_abs
    2374092853U,	// L4_ploadrdf_rr
    251783221U,	// L4_ploadrdfnew_abs
    2374101045U,	// L4_ploadrdfnew_rr
    251775292U,	// L4_ploadrdt_abs
    2374093116U,	// L4_ploadrdt_rr
    251783484U,	// L4_ploadrdtnew_abs
    2374101308U,	// L4_ploadrdtnew_rr
    255969333U,	// L4_ploadrhf_abs
    2378287157U,	// L4_ploadrhf_rr
    255977525U,	// L4_ploadrhfnew_abs
    2378295349U,	// L4_ploadrhfnew_rr
    255969596U,	// L4_ploadrht_abs
    2378287420U,	// L4_ploadrht_rr
    255977788U,	// L4_ploadrhtnew_abs
    2378295612U,	// L4_ploadrhtnew_rr
    260163637U,	// L4_ploadrif_abs
    2382481461U,	// L4_ploadrif_rr
    260171829U,	// L4_ploadrifnew_abs
    2382489653U,	// L4_ploadrifnew_rr
    260163900U,	// L4_ploadrit_abs
    2382481724U,	// L4_ploadrit_rr
    260172092U,	// L4_ploadritnew_abs
    2382489916U,	// L4_ploadritnew_rr
    264357941U,	// L4_ploadrubf_abs
    2386675765U,	// L4_ploadrubf_rr
    264366133U,	// L4_ploadrubfnew_abs
    2386683957U,	// L4_ploadrubfnew_rr
    264358204U,	// L4_ploadrubt_abs
    2386676028U,	// L4_ploadrubt_rr
    264366396U,	// L4_ploadrubtnew_abs
    2386684220U,	// L4_ploadrubtnew_rr
    268552245U,	// L4_ploadruhf_abs
    2390870069U,	// L4_ploadruhf_rr
    268560437U,	// L4_ploadruhfnew_abs
    2390878261U,	// L4_ploadruhfnew_rr
    268552508U,	// L4_ploadruht_abs
    2390870332U,	// L4_ploadruht_rr
    268560700U,	// L4_ploadruhtnew_abs
    2390878524U,	// L4_ploadruhtnew_rr
    765U,	// L4_return
    1958965U,	// L4_return_f
    1967157U,	// L4_return_fnew_pnt
    1975349U,	// L4_return_fnew_pt
    1959228U,	// L4_return_t
    1967420U,	// L4_return_tnew_pnt
    1975612U,	// L4_return_tnew_pt
    1641866621U,	// L4_sub_memopb_io
    1641866691U,	// L4_sub_memoph_io
    1641866921U,	// L4_sub_memopw_io
    194U,	// LDriw_pred
    547243034U,	// LO
    2833138714U,	// LO_GOT
    3370009626U,	// LO_GOTREL
    1991706U,	// LO_H
    3231597594U,	// LO_PIC
    14582810U,	// M2_acci
    2166260762U,	// M2_accii
    2008090U,	// M2_cmaci_s0
    2016282U,	// M2_cmacr_s0
    6218778U,	// M2_cmacs_s0
    274654234U,	// M2_cmacs_s1
    278848538U,	// M2_cmacsc_s0
    283042842U,	// M2_cmacsc_s1
    2032666U,	// M2_cmpyi_s0
    2040858U,	// M2_cmpyr_s0
    81740826U,	// M2_cmpyrs_s0
    287261722U,	// M2_cmpyrs_s1
    291456026U,	// M2_cmpyrsc_s0
    295650330U,	// M2_cmpyrsc_s1
    6243354U,	// M2_cmpys_s0
    274678810U,	// M2_cmpys_s1
    278873114U,	// M2_cmpysc_s0
    283067418U,	// M2_cmpysc_s1
    6251546U,	// M2_cnacs_s0
    274687002U,	// M2_cnacs_s1
    278881306U,	// M2_cnacsc_s0
    283075610U,	// M2_cnacsc_s1
    14648346U,	// M2_dpmpyss_acc_s0
    14656538U,	// M2_dpmpyss_nac_s0
    2162148378U,	// M2_dpmpyss_rnd_s0
    2162148378U,	// M2_dpmpyss_s0
    14672922U,	// M2_dpmpyuu_acc_s0
    14681114U,	// M2_dpmpyuu_nac_s0
    2162172954U,	// M2_dpmpyuu_s0
    2162148378U,	// M2_hmmpyh_rs1
    2162148378U,	// M2_hmmpyh_s1
    2162148378U,	// M2_hmmpyl_rs1
    2162148378U,	// M2_hmmpyl_s1
    14697498U,	// M2_maci
    2122778U,	// M2_macsin
    2166375450U,	// M2_macsip
    81822746U,	// M2_mmachs_rs0
    287343642U,	// M2_mmachs_rs1
    6325274U,	// M2_mmachs_s0
    274760730U,	// M2_mmachs_s1
    81830938U,	// M2_mmacls_rs0
    287351834U,	// M2_mmacls_rs1
    6333466U,	// M2_mmacls_s0
    274768922U,	// M2_mmacls_s1
    81839130U,	// M2_mmacuhs_rs0
    287360026U,	// M2_mmacuhs_rs1
    6341658U,	// M2_mmacuhs_s0
    274777114U,	// M2_mmacuhs_s1
    81847322U,	// M2_mmaculs_rs0
    287368218U,	// M2_mmaculs_rs1
    6349850U,	// M2_mmaculs_s0
    274785306U,	// M2_mmaculs_s1
    81855514U,	// M2_mmpyh_rs0
    287376410U,	// M2_mmpyh_rs1
    6358042U,	// M2_mmpyh_s0
    274793498U,	// M2_mmpyh_s1
    81863706U,	// M2_mmpyl_rs0
    287384602U,	// M2_mmpyl_rs1
    6366234U,	// M2_mmpyl_s0
    274801690U,	// M2_mmpyl_s1
    81871898U,	// M2_mmpyuh_rs0
    287392794U,	// M2_mmpyuh_rs1
    6374426U,	// M2_mmpyuh_s0
    274809882U,	// M2_mmpyuh_s1
    81880090U,	// M2_mmpyul_rs0
    287400986U,	// M2_mmpyul_rs1
    6382618U,	// M2_mmpyul_s0
    274818074U,	// M2_mmpyul_s1
    23036954U,	// M2_mpy_acc_hh_s0
    23036954U,	// M2_mpy_acc_hh_s1
    23036954U,	// M2_mpy_acc_hl_s0
    23036954U,	// M2_mpy_acc_hl_s1
    27231258U,	// M2_mpy_acc_lh_s0
    27231258U,	// M2_mpy_acc_lh_s1
    27231258U,	// M2_mpy_acc_ll_s0
    27231258U,	// M2_mpy_acc_ll_s1
    23036954U,	// M2_mpy_acc_sat_hh_s0
    23036954U,	// M2_mpy_acc_sat_hh_s1
    23036954U,	// M2_mpy_acc_sat_hl_s0
    23036954U,	// M2_mpy_acc_sat_hl_s1
    27231258U,	// M2_mpy_acc_sat_lh_s0
    27231258U,	// M2_mpy_acc_sat_lh_s1
    27231258U,	// M2_mpy_acc_sat_ll_s0
    27231258U,	// M2_mpy_acc_sat_ll_s1
    2170536986U,	// M2_mpy_hh_s0
    2170536986U,	// M2_mpy_hh_s1
    2170536986U,	// M2_mpy_hl_s0
    2170536986U,	// M2_mpy_hl_s1
    2174731290U,	// M2_mpy_lh_s0
    2174731290U,	// M2_mpy_lh_s1
    2174731290U,	// M2_mpy_ll_s0
    2174731290U,	// M2_mpy_ll_s1
    23045146U,	// M2_mpy_nac_hh_s0
    23045146U,	// M2_mpy_nac_hh_s1
    23045146U,	// M2_mpy_nac_hl_s0
    23045146U,	// M2_mpy_nac_hl_s1
    27239450U,	// M2_mpy_nac_lh_s0
    27239450U,	// M2_mpy_nac_lh_s1
    27239450U,	// M2_mpy_nac_ll_s0
    27239450U,	// M2_mpy_nac_ll_s1
    23045146U,	// M2_mpy_nac_sat_hh_s0
    23045146U,	// M2_mpy_nac_sat_hh_s1
    23045146U,	// M2_mpy_nac_sat_hl_s0
    23045146U,	// M2_mpy_nac_sat_hl_s1
    27239450U,	// M2_mpy_nac_sat_lh_s0
    27239450U,	// M2_mpy_nac_sat_lh_s1
    27239450U,	// M2_mpy_nac_sat_ll_s0
    27239450U,	// M2_mpy_nac_sat_ll_s1
    2170536986U,	// M2_mpy_rnd_hh_s0
    2170536986U,	// M2_mpy_rnd_hh_s1
    2170536986U,	// M2_mpy_rnd_hl_s0
    2170536986U,	// M2_mpy_rnd_hl_s1
    2174731290U,	// M2_mpy_rnd_lh_s0
    2174731290U,	// M2_mpy_rnd_lh_s1
    2174731290U,	// M2_mpy_rnd_ll_s0
    2174731290U,	// M2_mpy_rnd_ll_s1
    2170536986U,	// M2_mpy_sat_hh_s0
    2170536986U,	// M2_mpy_sat_hh_s1
    2170536986U,	// M2_mpy_sat_hl_s0
    2170536986U,	// M2_mpy_sat_hl_s1
    2174731290U,	// M2_mpy_sat_lh_s0
    2174731290U,	// M2_mpy_sat_lh_s1
    2174731290U,	// M2_mpy_sat_ll_s0
    2174731290U,	// M2_mpy_sat_ll_s1
    2170536986U,	// M2_mpy_sat_rnd_hh_s0
    2170536986U,	// M2_mpy_sat_rnd_hh_s1
    2170536986U,	// M2_mpy_sat_rnd_hl_s0
    2170536986U,	// M2_mpy_sat_rnd_hl_s1
    2174731290U,	// M2_mpy_sat_rnd_lh_s0
    2174731290U,	// M2_mpy_sat_rnd_lh_s1
    2174731290U,	// M2_mpy_sat_rnd_ll_s0
    2174731290U,	// M2_mpy_sat_rnd_ll_s1
    2162148378U,	// M2_mpy_up
    2162148378U,	// M2_mpy_up_s1
    2162148378U,	// M2_mpy_up_s1_sat
    23036954U,	// M2_mpyd_acc_hh_s0
    23036954U,	// M2_mpyd_acc_hh_s1
    23036954U,	// M2_mpyd_acc_hl_s0
    23036954U,	// M2_mpyd_acc_hl_s1
    27231258U,	// M2_mpyd_acc_lh_s0
    27231258U,	// M2_mpyd_acc_lh_s1
    27231258U,	// M2_mpyd_acc_ll_s0
    27231258U,	// M2_mpyd_acc_ll_s1
    2170536986U,	// M2_mpyd_hh_s0
    2170536986U,	// M2_mpyd_hh_s1
    2170536986U,	// M2_mpyd_hl_s0
    2170536986U,	// M2_mpyd_hl_s1
    2174731290U,	// M2_mpyd_lh_s0
    2174731290U,	// M2_mpyd_lh_s1
    2174731290U,	// M2_mpyd_ll_s0
    2174731290U,	// M2_mpyd_ll_s1
    23045146U,	// M2_mpyd_nac_hh_s0
    23045146U,	// M2_mpyd_nac_hh_s1
    23045146U,	// M2_mpyd_nac_hl_s0
    23045146U,	// M2_mpyd_nac_hl_s1
    27239450U,	// M2_mpyd_nac_lh_s0
    27239450U,	// M2_mpyd_nac_lh_s1
    27239450U,	// M2_mpyd_nac_ll_s0
    27239450U,	// M2_mpyd_nac_ll_s1
    2170536986U,	// M2_mpyd_rnd_hh_s0
    2170536986U,	// M2_mpyd_rnd_hh_s1
    2170536986U,	// M2_mpyd_rnd_hl_s0
    2170536986U,	// M2_mpyd_rnd_hl_s1
    2174731290U,	// M2_mpyd_rnd_lh_s0
    2174731290U,	// M2_mpyd_rnd_lh_s1
    2174731290U,	// M2_mpyd_rnd_ll_s0
    2174731290U,	// M2_mpyd_rnd_ll_s1
    2162263066U,	// M2_mpyi
    2204698U,	// M2_mpysin
    2212890U,	// M2_mpysip
    2703328282U,	// M2_mpysmi
    2221082U,	// M2_mpysu_up
    23061530U,	// M2_mpyu_acc_hh_s0
    23061530U,	// M2_mpyu_acc_hh_s1
    23061530U,	// M2_mpyu_acc_hl_s0
    23061530U,	// M2_mpyu_acc_hl_s1
    27255834U,	// M2_mpyu_acc_lh_s0
    27255834U,	// M2_mpyu_acc_lh_s1
    27255834U,	// M2_mpyu_acc_ll_s0
    27255834U,	// M2_mpyu_acc_ll_s1
    2170561562U,	// M2_mpyu_hh_s0
    2170561562U,	// M2_mpyu_hh_s1
    2170561562U,	// M2_mpyu_hl_s0
    2170561562U,	// M2_mpyu_hl_s1
    2174755866U,	// M2_mpyu_lh_s0
    2174755866U,	// M2_mpyu_lh_s1
    2174755866U,	// M2_mpyu_ll_s0
    2174755866U,	// M2_mpyu_ll_s1
    23069722U,	// M2_mpyu_nac_hh_s0
    23069722U,	// M2_mpyu_nac_hh_s1
    23069722U,	// M2_mpyu_nac_hl_s0
    23069722U,	// M2_mpyu_nac_hl_s1
    27264026U,	// M2_mpyu_nac_lh_s0
    27264026U,	// M2_mpyu_nac_lh_s1
    27264026U,	// M2_mpyu_nac_ll_s0
    27264026U,	// M2_mpyu_nac_ll_s1
    2162172954U,	// M2_mpyu_up
    23061530U,	// M2_mpyud_acc_hh_s0
    23061530U,	// M2_mpyud_acc_hh_s1
    23061530U,	// M2_mpyud_acc_hl_s0
    23061530U,	// M2_mpyud_acc_hl_s1
    27255834U,	// M2_mpyud_acc_lh_s0
    27255834U,	// M2_mpyud_acc_lh_s1
    27255834U,	// M2_mpyud_acc_ll_s0
    27255834U,	// M2_mpyud_acc_ll_s1
    2170561562U,	// M2_mpyud_hh_s0
    2170561562U,	// M2_mpyud_hh_s1
    2170561562U,	// M2_mpyud_hl_s0
    2170561562U,	// M2_mpyud_hl_s1
    2174755866U,	// M2_mpyud_lh_s0
    2174755866U,	// M2_mpyud_lh_s1
    2174755866U,	// M2_mpyud_ll_s0
    2174755866U,	// M2_mpyud_ll_s1
    23069722U,	// M2_mpyud_nac_hh_s0
    23069722U,	// M2_mpyud_nac_hh_s1
    23069722U,	// M2_mpyud_nac_hl_s0
    23069722U,	// M2_mpyud_nac_hl_s1
    27264026U,	// M2_mpyud_nac_lh_s0
    27264026U,	// M2_mpyud_nac_lh_s1
    27264026U,	// M2_mpyud_nac_ll_s0
    27264026U,	// M2_mpyud_nac_ll_s1
    2229274U,	// M2_mpyui
    14820378U,	// M2_nacci
    2166498330U,	// M2_naccii
    2245658U,	// M2_subacc
    2253850U,	// M2_vabsdiffh
    2262042U,	// M2_vabsdiffw
    2270234U,	// M2_vcmac_s0_sat_i
    2278426U,	// M2_vcmac_s0_sat_r
    6480922U,	// M2_vcmpy_s0_sat_i
    6489114U,	// M2_vcmpy_s0_sat_r
    274916378U,	// M2_vcmpy_s1_sat_i
    274924570U,	// M2_vcmpy_s1_sat_r
    6497306U,	// M2_vdmacs_s0
    274932762U,	// M2_vdmacs_s1
    82002970U,	// M2_vdmpyrs_s0
    287523866U,	// M2_vdmpyrs_s1
    6505498U,	// M2_vdmpys_s0
    274940954U,	// M2_vdmpys_s1
    2319386U,	// M2_vmac2
    2327578U,	// M2_vmac2es
    6521882U,	// M2_vmac2es_s0
    274957338U,	// M2_vmac2es_s1
    6513690U,	// M2_vmac2s_s0
    274949146U,	// M2_vmac2s_s1
    6530074U,	// M2_vmac2su_s0
    274965530U,	// M2_vmac2su_s1
    6538266U,	// M2_vmpy2es_s0
    274973722U,	// M2_vmpy2es_s1
    6546458U,	// M2_vmpy2s_s0
    82043930U,	// M2_vmpy2s_s0pack
    274981914U,	// M2_vmpy2s_s1
    287564826U,	// M2_vmpy2s_s1pack
    6554650U,	// M2_vmpy2su_s0
    274990106U,	// M2_vmpy2su_s1
    2368538U,	// M2_vraddh
    2376730U,	// M2_vradduh
    2384922U,	// M2_vrcmaci_s0
    300180506U,	// M2_vrcmaci_s0c
    2393114U,	// M2_vrcmacr_s0
    300188698U,	// M2_vrcmacr_s0c
    2401306U,	// M2_vrcmpyi_s0
    300196890U,	// M2_vrcmpyi_s0c
    2409498U,	// M2_vrcmpyr_s0
    300205082U,	// M2_vrcmpyr_s0c
    275047450U,	// M2_vrcmpys_acc_s1
    304407578U,	// M2_vrcmpys_acc_s1_h
    308601882U,	// M2_vrcmpys_acc_s1_l
    275055642U,	// M2_vrcmpys_s1
    304423962U,	// M2_vrcmpys_s1_h
    308618266U,	// M2_vrcmpys_s1_l
    287638554U,	// M2_vrcmpys_s1rp
    312812570U,	// M2_vrcmpys_s1rp_h
    317006874U,	// M2_vrcmpys_s1rp_l
    2442266U,	// M2_vrmac_s0
    2450458U,	// M2_vrmpy_s0
    2458650U,	// M2_xor_xacc
    15049754U,	// M4_and_and
    90547226U,	// M4_and_andn
    2475034U,	// M4_and_or
    2483226U,	// M4_and_xor
    287704090U,	// M4_cmpyi_wh
    296092698U,	// M4_cmpyi_whc
    287712282U,	// M4_cmpyr_wh
    296100890U,	// M4_cmpyr_whc
    14648346U,	// M4_mac_up_s1_sat
    1931887642U,	// M4_mpyri_addi
    2692752410U,	// M4_mpyri_addr
    3229623322U,	// M4_mpyri_addr_u2
    321274906U,	// M4_mpyrr_addi
    2692752410U,	// M4_mpyrr_addr
    14656538U,	// M4_nac_up_s1_sat
    15098906U,	// M4_or_and
    90596378U,	// M4_or_andn
    15107098U,	// M4_or_or
    2532378U,	// M4_or_xor
    2540570U,	// M4_pmpyw
    2548762U,	// M4_pmpyw_acc
    2556954U,	// M4_vpmpyh
    2565146U,	// M4_vpmpyh_acc
    2573338U,	// M4_vrmpyeh_acc_s0
    325534746U,	// M4_vrmpyeh_acc_s1
    2581530U,	// M4_vrmpyeh_s0
    325542938U,	// M4_vrmpyeh_s1
    2589722U,	// M4_vrmpyoh_acc_s0
    325551130U,	// M4_vrmpyoh_acc_s1
    2597914U,	// M4_vrmpyoh_s0
    325559322U,	// M4_vrmpyoh_s1
    15189018U,	// M4_xor_and
    90686490U,	// M4_xor_andn
    2614298U,	// M4_xor_or
    2458650U,	// M4_xor_xacc
    2622490U,	// M5_vdmacbsu
    2630682U,	// M5_vdmpybsu
    2638874U,	// M5_vmacbsu
    2647066U,	// M5_vmacbuu
    2655258U,	// M5_vmpybsu
    2663450U,	// M5_vmpybuu
    2671642U,	// M5_vrmacbsu
    2679834U,	// M5_vrmacbuu
    2688026U,	// M5_vrmpybsu
    2696218U,	// M5_vrmpybuu
    1U,	// MUX64_rr
    2160985114U,	// MUX_ir_f
    3775792154U,	// MUX_ri_f
    1000475U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    1000481U,	// RESTORE_DEALLOC_RET_JMP_V4
    2704410U,	// S2_addasl_rrri
    716056U,	// S2_allocframe
    3777586202U,	// S2_asl_i_p
    3777594394U,	// S2_asl_i_p_acc
    3777602586U,	// S2_asl_i_p_and
    3777610778U,	// S2_asl_i_p_nac
    3777618970U,	// S2_asl_i_p_or
    3777627162U,	// S2_asl_i_p_xacc
    3777586202U,	// S2_asl_i_r
    3777594394U,	// S2_asl_i_r_acc
    3777602586U,	// S2_asl_i_r_and
    3777610778U,	// S2_asl_i_r_nac
    3777618970U,	// S2_asl_i_r_or
    3777586202U,	// S2_asl_i_r_sat
    3777627162U,	// S2_asl_i_r_xacc
    3777635354U,	// S2_asl_i_vh
    3777643546U,	// S2_asl_i_vw
    2162779162U,	// S2_asl_r_p
    15303706U,	// S2_asl_r_p_acc
    15311898U,	// S2_asl_r_p_and
    15320090U,	// S2_asl_r_p_nac
    15328282U,	// S2_asl_r_p_or
    15336474U,	// S2_asl_r_p_xor
    2162779162U,	// S2_asl_r_r
    15303706U,	// S2_asl_r_r_acc
    15311898U,	// S2_asl_r_r_and
    15320090U,	// S2_asl_r_r_nac
    15328282U,	// S2_asl_r_r_or
    2162779162U,	// S2_asl_r_r_sat
    2162828314U,	// S2_asl_r_vh
    2162836506U,	// S2_asl_r_vw
    3777651738U,	// S2_asr_i_p
    3777659930U,	// S2_asr_i_p_acc
    3777668122U,	// S2_asr_i_p_and
    3777676314U,	// S2_asr_i_p_nac
    3777684506U,	// S2_asr_i_p_or
    3777651738U,	// S2_asr_i_p_rnd
    2819098U,	// S2_asr_i_p_rnd_goodsyntax
    3777651738U,	// S2_asr_i_r
    3777659930U,	// S2_asr_i_r_acc
    3777668122U,	// S2_asr_i_r_and
    3777676314U,	// S2_asr_i_r_nac
    3777684506U,	// S2_asr_i_r_or
    3777651738U,	// S2_asr_i_r_rnd
    2819098U,	// S2_asr_i_r_rnd_goodsyntax
    3777700890U,	// S2_asr_i_svw_trun
    3777709082U,	// S2_asr_i_vh
    3777700890U,	// S2_asr_i_vw
    2162844698U,	// S2_asr_r_p
    15369242U,	// S2_asr_r_p_acc
    15377434U,	// S2_asr_r_p_and
    15385626U,	// S2_asr_r_p_nac
    15393818U,	// S2_asr_r_p_or
    2843674U,	// S2_asr_r_p_xor
    2162844698U,	// S2_asr_r_r
    15369242U,	// S2_asr_r_r_acc
    15377434U,	// S2_asr_r_r_and
    15385626U,	// S2_asr_r_r_nac
    15393818U,	// S2_asr_r_r_or
    2162844698U,	// S2_asr_r_r_sat
    2162893850U,	// S2_asr_r_svw_trun
    2162902042U,	// S2_asr_r_vh
    2162893850U,	// S2_asr_r_vw
    2851866U,	// S2_brev
    2851866U,	// S2_brevp
    2860058U,	// S2_cabacdecbin
    2868250U,	// S2_cl0
    2868250U,	// S2_cl0p
    2876442U,	// S2_cl1
    2876442U,	// S2_cl1p
    2884634U,	// S2_clb
    2892826U,	// S2_clbnorm
    2884634U,	// S2_clbp
    3777774618U,	// S2_clrbit_i
    2162967578U,	// S2_clrbit_r
    2909210U,	// S2_ct0
    2909210U,	// S2_ct0p
    2917402U,	// S2_ct1
    2917402U,	// S2_ct1p
    2925594U,	// S2_deinterleave
    3777807386U,	// S2_extractu
    2163000346U,	// S2_extractu_rp
    3777807386U,	// S2_extractup
    2163000346U,	// S2_extractup_rp
    3777815578U,	// S2_insert
    15524890U,	// S2_insert_rp
    3777815578U,	// S2_insertp
    15524890U,	// S2_insertp_rp
    2950170U,	// S2_interleave
    2958362U,	// S2_lfsp
    2966554U,	// S2_lsl_r_p
    2974746U,	// S2_lsl_r_p_acc
    2982938U,	// S2_lsl_r_p_and
    2991130U,	// S2_lsl_r_p_nac
    2999322U,	// S2_lsl_r_p_or
    3007514U,	// S2_lsl_r_p_xor
    2966554U,	// S2_lsl_r_r
    2974746U,	// S2_lsl_r_r_acc
    2982938U,	// S2_lsl_r_r_and
    2991130U,	// S2_lsl_r_r_nac
    2999322U,	// S2_lsl_r_r_or
    3015706U,	// S2_lsl_r_vh
    3023898U,	// S2_lsl_r_vw
    3777905690U,	// S2_lsr_i_p
    3777913882U,	// S2_lsr_i_p_acc
    3777922074U,	// S2_lsr_i_p_and
    3777930266U,	// S2_lsr_i_p_nac
    3777938458U,	// S2_lsr_i_p_or
    3777946650U,	// S2_lsr_i_p_xacc
    3777905690U,	// S2_lsr_i_r
    3777913882U,	// S2_lsr_i_r_acc
    3777922074U,	// S2_lsr_i_r_and
    3777930266U,	// S2_lsr_i_r_nac
    3777938458U,	// S2_lsr_i_r_or
    3777946650U,	// S2_lsr_i_r_xacc
    3777954842U,	// S2_lsr_i_vh
    3777963034U,	// S2_lsr_i_vw
    2163098650U,	// S2_lsr_r_p
    15623194U,	// S2_lsr_r_p_acc
    15631386U,	// S2_lsr_r_p_and
    15639578U,	// S2_lsr_r_p_nac
    15647770U,	// S2_lsr_r_p_or
    15655962U,	// S2_lsr_r_p_xor
    2163098650U,	// S2_lsr_r_r
    15623194U,	// S2_lsr_r_r_acc
    15631386U,	// S2_lsr_r_r_and
    15639578U,	// S2_lsr_r_r_nac
    15647770U,	// S2_lsr_r_r_or
    2163147802U,	// S2_lsr_r_vh
    2163155994U,	// S2_lsr_r_vw
    3097626U,	// S2_packhl
    3105818U,	// S2_parityp
    11502645U,	// S2_pstorerbf_io
    3308226613U,	// S2_pstorerbf_pi
    3308234805U,	// S2_pstorerbfnew_pi
    11502645U,	// S2_pstorerbnewf_io
    3308226613U,	// S2_pstorerbnewf_pi
    3308234805U,	// S2_pstorerbnewfnew_pi
    11502908U,	// S2_pstorerbnewt_io
    3308226876U,	// S2_pstorerbnewt_pi
    3308235068U,	// S2_pstorerbnewtnew_pi
    11502908U,	// S2_pstorerbt_io
    3308226876U,	// S2_pstorerbt_pi
    3308235068U,	// S2_pstorerbtnew_pi
    11519029U,	// S2_pstorerdf_io
    3308242997U,	// S2_pstorerdf_pi
    3308251189U,	// S2_pstorerdfnew_pi
    11519292U,	// S2_pstorerdt_io
    3308243260U,	// S2_pstorerdt_pi
    3308251452U,	// S2_pstorerdtnew_pi
    11535413U,	// S2_pstorerff_io
    3308259381U,	// S2_pstorerff_pi
    3308267573U,	// S2_pstorerffnew_pi
    11535676U,	// S2_pstorerft_io
    3308259644U,	// S2_pstorerft_pi
    3308267836U,	// S2_pstorerftnew_pi
    11535413U,	// S2_pstorerhf_io
    3308259381U,	// S2_pstorerhf_pi
    3308267573U,	// S2_pstorerhfnew_pi
    11535413U,	// S2_pstorerhnewf_io
    3308259381U,	// S2_pstorerhnewf_pi
    3308267573U,	// S2_pstorerhnewfnew_pi
    11535676U,	// S2_pstorerhnewt_io
    3308259644U,	// S2_pstorerhnewt_pi
    3308267836U,	// S2_pstorerhnewtnew_pi
    11535676U,	// S2_pstorerht_io
    3308259644U,	// S2_pstorerht_pi
    3308267836U,	// S2_pstorerhtnew_pi
    11551797U,	// S2_pstorerif_io
    3308275765U,	// S2_pstorerif_pi
    3308283957U,	// S2_pstorerifnew_pi
    11551797U,	// S2_pstorerinewf_io
    3308275765U,	// S2_pstorerinewf_pi
    3308283957U,	// S2_pstorerinewfnew_pi
    11552060U,	// S2_pstorerinewt_io
    3308276028U,	// S2_pstorerinewt_pi
    3308284220U,	// S2_pstorerinewtnew_pi
    11552060U,	// S2_pstorerit_io
    3308276028U,	// S2_pstorerit_pi
    3308284220U,	// S2_pstoreritnew_pi
    3778053146U,	// S2_setbit_i
    2163246106U,	// S2_setbit_r
    3187738U,	// S2_shuffeb
    3195930U,	// S2_shuffeh
    3204122U,	// S2_shuffob
    3212314U,	// S2_shuffoh
    568124797U,	// S2_storerb_io
    61942141U,	// S2_storerb_pbr
    1295075701U,	// S2_storerb_pbr_pseudo
    61958525U,	// S2_storerb_pci
    330402165U,	// S2_storerb_pci_pseudo
    61974909U,	// S2_storerb_pcr
    3555821949U,	// S2_storerb_pi
    623987069U,	// S2_storerb_pr
    61983978U,	// S2_storerbabs
    61985034U,	// S2_storerbgp
    568124797U,	// S2_storerbnew_io
    338766205U,	// S2_storerbnew_pbr
    338782589U,	// S2_storerbnew_pci
    338798973U,	// S2_storerbnew_pcr
    1945209213U,	// S2_storerbnew_pi
    623987069U,	// S2_storerbnew_pr
    338808042U,	// S2_storerbnewabs
    338808074U,	// S2_storerbnewgp
    568124837U,	// S2_storerd_io
    61942181U,	// S2_storerd_pbr
    1295075741U,	// S2_storerd_pbr_pseudo
    61958565U,	// S2_storerd_pci
    330402205U,	// S2_storerd_pci_pseudo
    61974949U,	// S2_storerd_pcr
    3555821989U,	// S2_storerd_pi
    623987109U,	// S2_storerd_pr
    61983986U,	// S2_storerdabs
    61985041U,	// S2_storerdgp
    568124867U,	// S2_storerf_io
    342960579U,	// S2_storerf_pbr
    1295075771U,	// S2_storerf_pbr_pseudo
    342976963U,	// S2_storerf_pci
    330402235U,	// S2_storerf_pci_pseudo
    342993347U,	// S2_storerf_pcr
    2482080195U,	// S2_storerf_pi
    623987139U,	// S2_storerf_pr
    343002362U,	// S2_storerfabs
    343003429U,	// S2_storerfgp
    568124867U,	// S2_storerh_io
    61942211U,	// S2_storerh_pbr
    1295075771U,	// S2_storerh_pbr_pseudo
    61958595U,	// S2_storerh_pci
    330402235U,	// S2_storerh_pci_pseudo
    61974979U,	// S2_storerh_pcr
    3555822019U,	// S2_storerh_pi
    623987139U,	// S2_storerh_pr
    61983994U,	// S2_storerhabs
    61985061U,	// S2_storerhgp
    568124867U,	// S2_storerhnew_io
    338766275U,	// S2_storerhnew_pbr
    338782659U,	// S2_storerhnew_pci
    338799043U,	// S2_storerhnew_pcr
    1945209283U,	// S2_storerhnew_pi
    623987139U,	// S2_storerhnew_pr
    338808058U,	// S2_storerhnewabs
    338808101U,	// S2_storerhnewgp
    568125097U,	// S2_storeri_io
    61942441U,	// S2_storeri_pbr
    1295076001U,	// S2_storeri_pbr_pseudo
    61958825U,	// S2_storeri_pci
    330402465U,	// S2_storeri_pci_pseudo
    61975209U,	// S2_storeri_pcr
    3555822249U,	// S2_storeri_pi
    623987369U,	// S2_storeri_pr
    61984002U,	// S2_storeriabs
    61985077U,	// S2_storerigp
    568125097U,	// S2_storerinew_io
    338766505U,	// S2_storerinew_pbr
    338782889U,	// S2_storerinew_pci
    338799273U,	// S2_storerinew_pcr
    1945209513U,	// S2_storerinew_pi
    623987369U,	// S2_storerinew_pr
    338808066U,	// S2_storerinewabs
    338808117U,	// S2_storerinewgp
    882133392U,	// S2_storew_locked
    3269658U,	// S2_svsathb
    3277850U,	// S2_svsathub
    351413274U,	// S2_tableidxb
    3286042U,	// S2_tableidxb_goodsyntax
    351421466U,	// S2_tableidxd
    3294234U,	// S2_tableidxd_goodsyntax
    351429658U,	// S2_tableidxh
    3302426U,	// S2_tableidxh_goodsyntax
    351437850U,	// S2_tableidxw
    3310618U,	// S2_tableidxw_goodsyntax
    3778192410U,	// S2_togglebit_i
    2163385370U,	// S2_togglebit_r
    3778200602U,	// S2_tstbit_i
    2163393562U,	// S2_tstbit_r
    3778208794U,	// S2_valignib
    15918106U,	// S2_valignrb
    3343386U,	// S2_vcnegh
    3351578U,	// S2_vcrotate
    3359770U,	// S2_vrcnegh
    3367962U,	// S2_vrndpackwh
    7562266U,	// S2_vrndpackwhs
    3269658U,	// S2_vsathb
    3269658U,	// S2_vsathb_nopack
    3277850U,	// S2_vsathub
    3277850U,	// S2_vsathub_nopack
    3376154U,	// S2_vsatwh
    3376154U,	// S2_vsatwh_nopack
    3384346U,	// S2_vsatwuh
    3384346U,	// S2_vsatwuh_nopack
    3392538U,	// S2_vsplatrb
    3400730U,	// S2_vsplatrh
    3778282522U,	// S2_vspliceib
    15991834U,	// S2_vsplicerb
    3417114U,	// S2_vsxtbh
    3425306U,	// S2_vsxthw
    3433498U,	// S2_vtrunehb
    3441690U,	// S2_vtrunewh
    3449882U,	// S2_vtrunohb
    3458074U,	// S2_vtrunowh
    3466266U,	// S2_vzxtbh
    3474458U,	// S2_vzxthw
    2692752410U,	// S4_addaddi
    354829338U,	// S4_addi_asl_ri
    359023642U,	// S4_addi_lsr_ri
    355804186U,	// S4_andi_asl_ri
    359998490U,	// S4_andi_lsr_ri
    3490842U,	// S4_clbaddi
    3490842U,	// S4_clbpaddi
    2892826U,	// S4_clbpnorm
    3778372634U,	// S4_extract
    2163565594U,	// S4_extract_rp
    3778372634U,	// S4_extractp
    2163565594U,	// S4_extractp_rp
    3507226U,	// S4_lsli
    3778389018U,	// S4_ntstbit_i
    2163581978U,	// S4_ntstbit_r
    2166776858U,	// S4_or_andi
    1749132314U,	// S4_or_andix
    2166785050U,	// S4_or_ori
    355845146U,	// S4_ori_asl_ri
    360039450U,	// S4_ori_lsr_ri
    3105818U,	// S4_parity
    62252085U,	// S4_pstorerbf_abs
    3232728117U,	// S4_pstorerbf_rr
    62260277U,	// S4_pstorerbfnew_abs
    11510837U,	// S4_pstorerbfnew_io
    3232736309U,	// S4_pstorerbfnew_rr
    339076149U,	// S4_pstorerbnewf_abs
    3232728117U,	// S4_pstorerbnewf_rr
    339084341U,	// S4_pstorerbnewfnew_abs
    11510837U,	// S4_pstorerbnewfnew_io
    3232736309U,	// S4_pstorerbnewfnew_rr
    339076412U,	// S4_pstorerbnewt_abs
    3232728380U,	// S4_pstorerbnewt_rr
    339084604U,	// S4_pstorerbnewtnew_abs
    11511100U,	// S4_pstorerbnewtnew_io
    3232736572U,	// S4_pstorerbnewtnew_rr
    62252348U,	// S4_pstorerbt_abs
    3232728380U,	// S4_pstorerbt_rr
    62260540U,	// S4_pstorerbtnew_abs
    11511100U,	// S4_pstorerbtnew_io
    3232736572U,	// S4_pstorerbtnew_rr
    3548213U,	// S4_pstorerdf_abs
    3232744501U,	// S4_pstorerdf_rr
    3556405U,	// S4_pstorerdfnew_abs
    11527221U,	// S4_pstorerdfnew_io
    3232752693U,	// S4_pstorerdfnew_rr
    3548476U,	// S4_pstorerdt_abs
    3232744764U,	// S4_pstorerdt_rr
    3556668U,	// S4_pstorerdtnew_abs
    11527484U,	// S4_pstorerdtnew_io
    3232752956U,	// S4_pstorerdtnew_rr
    343303221U,	// S4_pstorerff_abs
    3232760885U,	// S4_pstorerff_rr
    343311413U,	// S4_pstorerffnew_abs
    11543605U,	// S4_pstorerffnew_io
    3232769077U,	// S4_pstorerffnew_rr
    343303484U,	// S4_pstorerft_abs
    3232761148U,	// S4_pstorerft_rr
    343311676U,	// S4_pstorerftnew_abs
    11543868U,	// S4_pstorerftnew_io
    3232769340U,	// S4_pstorerftnew_rr
    62284853U,	// S4_pstorerhf_abs
    3232760885U,	// S4_pstorerhf_rr
    62293045U,	// S4_pstorerhfnew_abs
    11543605U,	// S4_pstorerhfnew_io
    3232769077U,	// S4_pstorerhfnew_rr
    339108917U,	// S4_pstorerhnewf_abs
    3232760885U,	// S4_pstorerhnewf_rr
    339117109U,	// S4_pstorerhnewfnew_abs
    11543605U,	// S4_pstorerhnewfnew_io
    3232769077U,	// S4_pstorerhnewfnew_rr
    339109180U,	// S4_pstorerhnewt_abs
    3232761148U,	// S4_pstorerhnewt_rr
    339117372U,	// S4_pstorerhnewtnew_abs
    11543868U,	// S4_pstorerhnewtnew_io
    3232769340U,	// S4_pstorerhnewtnew_rr
    62285116U,	// S4_pstorerht_abs
    3232761148U,	// S4_pstorerht_rr
    62293308U,	// S4_pstorerhtnew_abs
    11543868U,	// S4_pstorerhtnew_io
    3232769340U,	// S4_pstorerhtnew_rr
    62301237U,	// S4_pstorerif_abs
    3232777269U,	// S4_pstorerif_rr
    62309429U,	// S4_pstorerifnew_abs
    11559989U,	// S4_pstorerifnew_io
    3232785461U,	// S4_pstorerifnew_rr
    339125301U,	// S4_pstorerinewf_abs
    3232777269U,	// S4_pstorerinewf_rr
    339133493U,	// S4_pstorerinewfnew_abs
    11559989U,	// S4_pstorerinewfnew_io
    3232785461U,	// S4_pstorerinewfnew_rr
    339125564U,	// S4_pstorerinewt_abs
    3232777532U,	// S4_pstorerinewt_rr
    339133756U,	// S4_pstorerinewtnew_abs
    11560252U,	// S4_pstorerinewtnew_io
    3232785724U,	// S4_pstorerinewtnew_rr
    62301500U,	// S4_pstorerit_abs
    3232777532U,	// S4_pstorerit_rr
    62309692U,	// S4_pstoreritnew_abs
    11560252U,	// S4_pstoreritnew_io
    3232785724U,	// S4_pstoreritnew_rr
    882133379U,	// S4_stored_locked
    3827099005U,	// S4_storeirb_io
    11502645U,	// S4_storeirbf_io
    11510837U,	// S4_storeirbfnew_io
    11502908U,	// S4_storeirbt_io
    11511100U,	// S4_storeirbtnew_io
    3827099075U,	// S4_storeirh_io
    11535413U,	// S4_storeirhf_io
    11543605U,	// S4_storeirhfnew_io
    11535676U,	// S4_storeirht_io
    11543868U,	// S4_storeirhtnew_io
    3827099305U,	// S4_storeiri_io
    11551797U,	// S4_storeirif_io
    11559989U,	// S4_storeirifnew_io
    11552060U,	// S4_storeirit_io
    11560252U,	// S4_storeiritnew_io
    566535549U,	// S4_storerb_ap
    62317949U,	// S4_storerb_rr
    62326141U,	// S4_storerb_ur
    566535549U,	// S4_storerbnew_ap
    339142013U,	// S4_storerbnew_rr
    339150205U,	// S4_storerbnew_ur
    566535589U,	// S4_storerd_ap
    62317989U,	// S4_storerd_rr
    62326181U,	// S4_storerd_ur
    566535619U,	// S4_storerf_ap
    343336387U,	// S4_storerf_rr
    343344579U,	// S4_storerf_ur
    566535619U,	// S4_storerh_ap
    62318019U,	// S4_storerh_rr
    62326211U,	// S4_storerh_ur
    566535619U,	// S4_storerhnew_ap
    339142083U,	// S4_storerhnew_rr
    339150275U,	// S4_storerhnew_ur
    566535849U,	// S4_storeri_ap
    62318249U,	// S4_storeri_rr
    62326441U,	// S4_storeri_ur
    566535849U,	// S4_storerinew_ap
    339142313U,	// S4_storerinew_rr
    339150505U,	// S4_storerinew_ur
    8397850U,	// S4_subaddi
    352511002U,	// S4_subi_asl_ri
    356705306U,	// S4_subi_lsr_ri
    3613722U,	// S4_vrcrotate
    3621914U,	// S4_vrcrotate_acc
    7824410U,	// S4_vxaddsubh
    364340250U,	// S4_vxaddsubhr
    3638298U,	// S4_vxaddsubw
    7840794U,	// S4_vxsubaddh
    364356634U,	// S4_vxsubaddhr
    3654682U,	// S4_vxsubaddw
    351790106U,	// S5_asrhub_rnd_sat
    83354650U,	// S5_asrhub_rnd_sat_goodsyntax
    7857178U,	// S5_asrhub_sat
    3671066U,	// S5_popcountp
    3777709082U,	// S5_vasrhrnd
    367739930U,	// S5_vasrhrnd_goodsyntax
    1000475U,	// SAVE_REGISTERS_CALL_V4
    194U,	// STriw_pred
    0U,	// TCRETURNi
    1000494U,	// TCRETURNr
    3679258U,	// TFRI64_V2_ext
    3288638490U,	// TFRI64_V4
    3250889754U,	// TFRI_V4
    3892430901U,	// TFRI_cNotPt_f
    3892431164U,	// TFRI_cPt_f
    3288638490U,	// TFRI_f
    0U,	// TFR_FI
    344540186U,	// TFR_PdFalse
    0U,	// TFR_PdTrue
    154U,	// VMULW
    110U,	// VMULW_ACC
    784U,	// Y2_barrier
    3687858U,	// Y2_dcfetchbo
    714155U,	// Y4_trace
    8397850U,	// dep_A2_addsat
    8569882U,	// dep_A2_subsat
    372196378U,	// dep_S2_packhl
    0U
  };

  static const uint32_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// FRAME_ALLOC
    0U,	// A2_abs
    0U,	// A2_absp
    0U,	// A2_abssat
    0U,	// A2_add
    8U,	// A2_addh_h16_hh
    16U,	// A2_addh_h16_hl
    8U,	// A2_addh_h16_lh
    16U,	// A2_addh_h16_ll
    24U,	// A2_addh_h16_sat_hh
    32U,	// A2_addh_h16_sat_hl
    24U,	// A2_addh_h16_sat_lh
    32U,	// A2_addh_h16_sat_ll
    40U,	// A2_addh_l16_hl
    48U,	// A2_addh_l16_ll
    56U,	// A2_addh_l16_sat_hl
    64U,	// A2_addh_l16_sat_ll
    72U,	// A2_addi
    0U,	// A2_addp
    512U,	// A2_addpsat
    512U,	// A2_addsat
    0U,	// A2_addsp
    1024U,	// A2_addsph
    1536U,	// A2_addspl
    80U,	// A2_and
    80U,	// A2_andir
    80U,	// A2_andp
    0U,	// A2_aslh
    0U,	// A2_asrh
    40U,	// A2_combine_hh
    48U,	// A2_combine_hl
    40U,	// A2_combine_lh
    48U,	// A2_combine_ll
    88U,	// A2_combineii
    80U,	// A2_combinew
    0U,	// A2_max
    0U,	// A2_maxp
    0U,	// A2_maxu
    0U,	// A2_maxup
    0U,	// A2_min
    0U,	// A2_minp
    0U,	// A2_minu
    0U,	// A2_minup
    0U,	// A2_negp
    0U,	// A2_negsat
    0U,	// A2_nop
    0U,	// A2_not
    0U,	// A2_notp
    80U,	// A2_or
    80U,	// A2_orir
    80U,	// A2_orp
    96U,	// A2_paddf
    96U,	// A2_paddfnew
    104U,	// A2_paddif
    104U,	// A2_paddifnew
    104U,	// A2_paddit
    104U,	// A2_padditnew
    96U,	// A2_paddt
    96U,	// A2_paddtnew
    0U,	// A2_pandf
    0U,	// A2_pandfnew
    0U,	// A2_pandt
    0U,	// A2_pandtnew
    0U,	// A2_porf
    0U,	// A2_porfnew
    0U,	// A2_port
    0U,	// A2_portnew
    0U,	// A2_psubf
    0U,	// A2_psubfnew
    0U,	// A2_psubt
    0U,	// A2_psubtnew
    0U,	// A2_pxorf
    0U,	// A2_pxorfnew
    0U,	// A2_pxort
    0U,	// A2_pxortnew
    0U,	// A2_roundsat
    0U,	// A2_sat
    0U,	// A2_satb
    0U,	// A2_sath
    0U,	// A2_satub
    0U,	// A2_satuh
    0U,	// A2_sub
    8U,	// A2_subh_h16_hh
    16U,	// A2_subh_h16_hl
    8U,	// A2_subh_h16_lh
    16U,	// A2_subh_h16_ll
    24U,	// A2_subh_h16_sat_hh
    32U,	// A2_subh_h16_sat_hl
    24U,	// A2_subh_h16_sat_lh
    32U,	// A2_subh_h16_sat_ll
    40U,	// A2_subh_l16_hl
    48U,	// A2_subh_l16_ll
    56U,	// A2_subh_l16_sat_hl
    64U,	// A2_subh_l16_sat_ll
    0U,	// A2_subp
    80U,	// A2_subri
    512U,	// A2_subsat
    0U,	// A2_svaddh
    0U,	// A2_svaddhs
    0U,	// A2_svadduhs
    0U,	// A2_svavgh
    0U,	// A2_svavghs
    0U,	// A2_svnavgh
    0U,	// A2_svsubh
    0U,	// A2_svsubhs
    0U,	// A2_svsubuhs
    0U,	// A2_swiz
    0U,	// A2_sxtb
    0U,	// A2_sxth
    0U,	// A2_sxtw
    0U,	// A2_tfr
    0U,	// A2_tfrcrr
    0U,	// A2_tfrf
    0U,	// A2_tfrfnew
    0U,	// A2_tfrih
    0U,	// A2_tfril
    0U,	// A2_tfrp
    0U,	// A2_tfrpf
    0U,	// A2_tfrpfnew
    0U,	// A2_tfrpi
    0U,	// A2_tfrpt
    0U,	// A2_tfrptnew
    0U,	// A2_tfrrcr
    0U,	// A2_tfrsi
    0U,	// A2_tfrt
    0U,	// A2_tfrtnew
    0U,	// A2_vabsh
    0U,	// A2_vabshsat
    0U,	// A2_vabsw
    0U,	// A2_vabswsat
    0U,	// A2_vaddh
    0U,	// A2_vaddhs
    0U,	// A2_vaddub
    0U,	// A2_vaddubs
    0U,	// A2_vadduhs
    0U,	// A2_vaddw
    0U,	// A2_vaddws
    0U,	// A2_vavgh
    0U,	// A2_vavghcr
    0U,	// A2_vavghr
    0U,	// A2_vavgub
    0U,	// A2_vavgubr
    0U,	// A2_vavguh
    0U,	// A2_vavguhr
    0U,	// A2_vavguw
    0U,	// A2_vavguwr
    0U,	// A2_vavgw
    0U,	// A2_vavgwcr
    0U,	// A2_vavgwr
    80U,	// A2_vcmpbeq
    80U,	// A2_vcmpbgtu
    80U,	// A2_vcmpheq
    80U,	// A2_vcmphgt
    80U,	// A2_vcmphgtu
    80U,	// A2_vcmpweq
    80U,	// A2_vcmpwgt
    80U,	// A2_vcmpwgtu
    0U,	// A2_vconj
    0U,	// A2_vmaxb
    0U,	// A2_vmaxh
    0U,	// A2_vmaxub
    0U,	// A2_vmaxuh
    0U,	// A2_vmaxuw
    0U,	// A2_vmaxw
    0U,	// A2_vminb
    0U,	// A2_vminh
    0U,	// A2_vminub
    0U,	// A2_vminuh
    0U,	// A2_vminuw
    0U,	// A2_vminw
    0U,	// A2_vnavgh
    0U,	// A2_vnavghcr
    0U,	// A2_vnavghr
    0U,	// A2_vnavgw
    0U,	// A2_vnavgwcr
    0U,	// A2_vnavgwr
    0U,	// A2_vraddub
    0U,	// A2_vraddub_acc
    0U,	// A2_vrsadub
    0U,	// A2_vrsadub_acc
    0U,	// A2_vsubh
    0U,	// A2_vsubhs
    0U,	// A2_vsubub
    0U,	// A2_vsububs
    0U,	// A2_vsubuhs
    0U,	// A2_vsubw
    0U,	// A2_vsubws
    0U,	// A2_xor
    0U,	// A2_xorp
    0U,	// A2_zxtb
    0U,	// A2_zxth
    2144U,	// A4_addp_c
    80U,	// A4_andn
    80U,	// A4_andnp
    80U,	// A4_bitsplit
    80U,	// A4_bitspliti
    0U,	// A4_boundscheck
    0U,	// A4_boundscheck_hi
    0U,	// A4_boundscheck_lo
    80U,	// A4_cmpbeq
    80U,	// A4_cmpbeqi
    80U,	// A4_cmpbgt
    80U,	// A4_cmpbgti
    80U,	// A4_cmpbgtu
    80U,	// A4_cmpbgtui
    80U,	// A4_cmpheq
    80U,	// A4_cmpheqi
    80U,	// A4_cmphgt
    80U,	// A4_cmphgti
    80U,	// A4_cmphgtu
    80U,	// A4_cmphgtui
    72U,	// A4_combineii
    0U,	// A4_combineir
    80U,	// A4_combineri
    80U,	// A4_cround_ri
    80U,	// A4_cround_rr
    0U,	// A4_ext
    0U,	// A4_ext_b
    0U,	// A4_ext_c
    0U,	// A4_ext_g
    0U,	// A4_modwrapu
    80U,	// A4_orn
    80U,	// A4_ornp
    0U,	// A4_paslhf
    0U,	// A4_paslhfnew
    0U,	// A4_paslht
    0U,	// A4_paslhtnew
    0U,	// A4_pasrhf
    0U,	// A4_pasrhfnew
    0U,	// A4_pasrht
    0U,	// A4_pasrhtnew
    0U,	// A4_psxtbf
    0U,	// A4_psxtbfnew
    0U,	// A4_psxtbt
    0U,	// A4_psxtbtnew
    0U,	// A4_psxthf
    0U,	// A4_psxthfnew
    0U,	// A4_psxtht
    0U,	// A4_psxthtnew
    0U,	// A4_pzxtbf
    0U,	// A4_pzxtbfnew
    0U,	// A4_pzxtbt
    0U,	// A4_pzxtbtnew
    0U,	// A4_pzxthf
    0U,	// A4_pzxthfnew
    0U,	// A4_pzxtht
    0U,	// A4_pzxthtnew
    80U,	// A4_rcmpeq
    80U,	// A4_rcmpeqi
    80U,	// A4_rcmpneq
    80U,	// A4_rcmpneqi
    80U,	// A4_round_ri
    112U,	// A4_round_ri_sat
    80U,	// A4_round_rr
    112U,	// A4_round_rr_sat
    2144U,	// A4_subp_c
    0U,	// A4_tfrcpp
    0U,	// A4_tfrpcp
    0U,	// A4_tlbmatch
    0U,	// A4_vcmpbeq_any
    80U,	// A4_vcmpbeqi
    80U,	// A4_vcmpbgt
    80U,	// A4_vcmpbgti
    80U,	// A4_vcmpbgtui
    80U,	// A4_vcmpheqi
    80U,	// A4_vcmphgti
    80U,	// A4_vcmphgtui
    80U,	// A4_vcmpweqi
    80U,	// A4_vcmpwgti
    80U,	// A4_vcmpwgtui
    0U,	// A4_vrmaxh
    0U,	// A4_vrmaxuh
    0U,	// A4_vrmaxuw
    0U,	// A4_vrmaxw
    0U,	// A4_vrminh
    0U,	// A4_vrminuh
    0U,	// A4_vrminuw
    0U,	// A4_vrminw
    0U,	// A5_vaddhubs
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    88U,	// ADJDYNALLOC
    0U,	// ARGEXTEND
    0U,	// C2_all8
    80U,	// C2_and
    0U,	// C2_andn
    0U,	// C2_any8
    80U,	// C2_bitsclr
    80U,	// C2_bitsclri
    0U,	// C2_bitsset
    0U,	// C2_ccombinewf
    0U,	// C2_ccombinewnewf
    0U,	// C2_ccombinewnewt
    0U,	// C2_ccombinewt
    120U,	// C2_cmoveif
    120U,	// C2_cmoveit
    120U,	// C2_cmovenewif
    120U,	// C2_cmovenewit
    80U,	// C2_cmpeq
    80U,	// C2_cmpeqi
    80U,	// C2_cmpeqp
    0U,	// C2_cmpgei
    0U,	// C2_cmpgeui
    80U,	// C2_cmpgt
    80U,	// C2_cmpgti
    80U,	// C2_cmpgtp
    80U,	// C2_cmpgtu
    80U,	// C2_cmpgtui
    80U,	// C2_cmpgtup
    0U,	// C2_mask
    128U,	// C2_mux
    2696U,	// C2_muxii
    3208U,	// C2_muxir
    128U,	// C2_muxri
    0U,	// C2_not
    80U,	// C2_or
    0U,	// C2_orn
    0U,	// C2_pxfer_map
    0U,	// C2_tfrpr
    0U,	// C2_tfrrp
    0U,	// C2_vitpack
    0U,	// C2_vmux
    0U,	// C2_xor
    0U,	// C4_addipc
    3680U,	// C4_and_and
    1U,	// C4_and_andn
    3680U,	// C4_and_or
    1U,	// C4_and_orn
    80U,	// C4_cmplte
    80U,	// C4_cmpltei
    80U,	// C4_cmplteu
    80U,	// C4_cmplteui
    80U,	// C4_cmpneq
    80U,	// C4_cmpneqi
    0U,	// C4_fastcorner9
    0U,	// C4_fastcorner9_not
    80U,	// C4_nbitsclr
    80U,	// C4_nbitsclri
    0U,	// C4_nbitsset
    3680U,	// C4_or_and
    1U,	// C4_or_andn
    3680U,	// C4_or_or
    1U,	// C4_or_orn
    0U,	// CALLRv3nr
    0U,	// CALLv3nr
    1U,	// CONST32
    1U,	// CONST32_Float_Real
    1U,	// CONST32_Int_Real
    0U,	// CONST32_Label
    0U,	// CONST32_set_jt
    0U,	// CONST64_Float_Real
    0U,	// CONST64_Int_Real
    0U,	// DuplexIClass0
    0U,	// DuplexIClass1
    0U,	// DuplexIClass2
    0U,	// DuplexIClass3
    0U,	// DuplexIClass4
    0U,	// DuplexIClass5
    0U,	// DuplexIClass6
    0U,	// DuplexIClass7
    0U,	// DuplexIClass8
    0U,	// DuplexIClass9
    0U,	// DuplexIClassA
    0U,	// DuplexIClassB
    0U,	// DuplexIClassC
    0U,	// DuplexIClassD
    0U,	// DuplexIClassE
    0U,	// DuplexIClassF
    0U,	// EH_RETURN_JMPR
    0U,	// ENDLOOP0
    0U,	// ENDLOOP1
    0U,	// F2_conv_d2df
    0U,	// F2_conv_d2sf
    0U,	// F2_conv_df2d
    0U,	// F2_conv_df2d_chop
    0U,	// F2_conv_df2sf
    0U,	// F2_conv_df2ud
    0U,	// F2_conv_df2ud_chop
    0U,	// F2_conv_df2uw
    0U,	// F2_conv_df2uw_chop
    0U,	// F2_conv_df2w
    0U,	// F2_conv_df2w_chop
    0U,	// F2_conv_sf2d
    0U,	// F2_conv_sf2d_chop
    0U,	// F2_conv_sf2df
    0U,	// F2_conv_sf2ud
    0U,	// F2_conv_sf2ud_chop
    0U,	// F2_conv_sf2uw
    0U,	// F2_conv_sf2uw_chop
    0U,	// F2_conv_sf2w
    0U,	// F2_conv_sf2w_chop
    0U,	// F2_conv_ud2df
    0U,	// F2_conv_ud2sf
    0U,	// F2_conv_uw2df
    0U,	// F2_conv_uw2sf
    0U,	// F2_conv_w2df
    0U,	// F2_conv_w2sf
    0U,	// F2_dfclass
    0U,	// F2_dfcmpeq
    0U,	// F2_dfcmpge
    0U,	// F2_dfcmpgt
    0U,	// F2_dfcmpuo
    0U,	// F2_dfimm_n
    0U,	// F2_dfimm_p
    0U,	// F2_sfadd
    0U,	// F2_sfclass
    0U,	// F2_sfcmpeq
    0U,	// F2_sfcmpge
    0U,	// F2_sfcmpgt
    0U,	// F2_sfcmpuo
    0U,	// F2_sffixupd
    0U,	// F2_sffixupn
    0U,	// F2_sffixupr
    0U,	// F2_sffma
    0U,	// F2_sffma_lib
    1U,	// F2_sffma_sc
    0U,	// F2_sffms
    0U,	// F2_sffms_lib
    0U,	// F2_sfimm_n
    0U,	// F2_sfimm_p
    1U,	// F2_sfinvsqrta
    0U,	// F2_sfmax
    0U,	// F2_sfmin
    0U,	// F2_sfmpy
    1U,	// F2_sfrecipa
    0U,	// F2_sfsub
    1U,	// FCONST32_nsdata
    1U,	// HI
    1U,	// HI_GOT
    1U,	// HI_GOTREL
    0U,	// HI_L
    1U,	// HI_PIC
    0U,	// Insert4
    0U,	// J2_call
    0U,	// J2_callf
    0U,	// J2_callr
    0U,	// J2_callrf
    0U,	// J2_callrt
    0U,	// J2_callt
    0U,	// J2_jump
    0U,	// J2_jump_ext
    0U,	// J2_jump_extf
    0U,	// J2_jump_extfnew
    0U,	// J2_jump_extfnewpt
    0U,	// J2_jump_extt
    0U,	// J2_jump_exttnew
    0U,	// J2_jump_exttnewpt
    0U,	// J2_jump_noext
    0U,	// J2_jump_noextf
    0U,	// J2_jump_noextfnew
    0U,	// J2_jump_noextfnewpt
    0U,	// J2_jump_noextt
    0U,	// J2_jump_noexttnew
    0U,	// J2_jump_noexttnewpt
    0U,	// J2_jumpf
    0U,	// J2_jumpfnew
    0U,	// J2_jumpfnewpt
    0U,	// J2_jumpr
    0U,	// J2_jumprf
    0U,	// J2_jumprfnew
    0U,	// J2_jumprfnewpt
    0U,	// J2_jumprgtez
    0U,	// J2_jumprgtezpt
    0U,	// J2_jumprltez
    0U,	// J2_jumprltezpt
    0U,	// J2_jumprnz
    0U,	// J2_jumprnzpt
    0U,	// J2_jumprt
    0U,	// J2_jumprtnew
    0U,	// J2_jumprtnewpt
    0U,	// J2_jumprz
    0U,	// J2_jumprzpt
    0U,	// J2_jumpt
    0U,	// J2_jumptnew
    0U,	// J2_jumptnewpt
    0U,	// J2_loop0i
    0U,	// J2_loop0iext
    1U,	// J2_loop0r
    1U,	// J2_loop0rext
    0U,	// J2_loop1i
    0U,	// J2_loop1iext
    1U,	// J2_loop1r
    1U,	// J2_loop1rext
    0U,	// J2_ploop1si
    1U,	// J2_ploop1sr
    0U,	// J2_ploop2si
    1U,	// J2_ploop2sr
    0U,	// J2_ploop3si
    1U,	// J2_ploop3sr
    0U,	// J4_cmpeq_f_jumpnv_nt
    0U,	// J4_cmpeq_f_jumpnv_t
    1U,	// J4_cmpeq_fp0_jump_nt
    2U,	// J4_cmpeq_fp0_jump_t
    2U,	// J4_cmpeq_fp1_jump_nt
    2U,	// J4_cmpeq_fp1_jump_t
    0U,	// J4_cmpeq_t_jumpnv_nt
    0U,	// J4_cmpeq_t_jumpnv_t
    2U,	// J4_cmpeq_tp0_jump_nt
    2U,	// J4_cmpeq_tp0_jump_t
    2U,	// J4_cmpeq_tp1_jump_nt
    2U,	// J4_cmpeq_tp1_jump_t
    0U,	// J4_cmpeqi_f_jumpnv_nt
    0U,	// J4_cmpeqi_f_jumpnv_t
    0U,	// J4_cmpeqi_fp0_jump_nt
    0U,	// J4_cmpeqi_fp0_jump_t
    0U,	// J4_cmpeqi_fp1_jump_nt
    0U,	// J4_cmpeqi_fp1_jump_t
    0U,	// J4_cmpeqi_t_jumpnv_nt
    0U,	// J4_cmpeqi_t_jumpnv_t
    0U,	// J4_cmpeqi_tp0_jump_nt
    0U,	// J4_cmpeqi_tp0_jump_t
    0U,	// J4_cmpeqi_tp1_jump_nt
    0U,	// J4_cmpeqi_tp1_jump_t
    0U,	// J4_cmpeqn1_f_jumpnv_nt
    0U,	// J4_cmpeqn1_f_jumpnv_t
    0U,	// J4_cmpeqn1_fp0_jump_nt
    0U,	// J4_cmpeqn1_fp0_jump_t
    0U,	// J4_cmpeqn1_fp1_jump_nt
    0U,	// J4_cmpeqn1_fp1_jump_t
    0U,	// J4_cmpeqn1_t_jumpnv_nt
    0U,	// J4_cmpeqn1_t_jumpnv_t
    0U,	// J4_cmpeqn1_tp0_jump_nt
    0U,	// J4_cmpeqn1_tp0_jump_t
    0U,	// J4_cmpeqn1_tp1_jump_nt
    0U,	// J4_cmpeqn1_tp1_jump_t
    0U,	// J4_cmpgt_f_jumpnv_nt
    0U,	// J4_cmpgt_f_jumpnv_t
    1U,	// J4_cmpgt_fp0_jump_nt
    2U,	// J4_cmpgt_fp0_jump_t
    2U,	// J4_cmpgt_fp1_jump_nt
    2U,	// J4_cmpgt_fp1_jump_t
    0U,	// J4_cmpgt_t_jumpnv_nt
    0U,	// J4_cmpgt_t_jumpnv_t
    2U,	// J4_cmpgt_tp0_jump_nt
    2U,	// J4_cmpgt_tp0_jump_t
    2U,	// J4_cmpgt_tp1_jump_nt
    2U,	// J4_cmpgt_tp1_jump_t
    0U,	// J4_cmpgti_f_jumpnv_nt
    0U,	// J4_cmpgti_f_jumpnv_t
    0U,	// J4_cmpgti_fp0_jump_nt
    0U,	// J4_cmpgti_fp0_jump_t
    0U,	// J4_cmpgti_fp1_jump_nt
    0U,	// J4_cmpgti_fp1_jump_t
    0U,	// J4_cmpgti_t_jumpnv_nt
    0U,	// J4_cmpgti_t_jumpnv_t
    0U,	// J4_cmpgti_tp0_jump_nt
    0U,	// J4_cmpgti_tp0_jump_t
    0U,	// J4_cmpgti_tp1_jump_nt
    0U,	// J4_cmpgti_tp1_jump_t
    0U,	// J4_cmpgtn1_f_jumpnv_nt
    0U,	// J4_cmpgtn1_f_jumpnv_t
    0U,	// J4_cmpgtn1_fp0_jump_nt
    0U,	// J4_cmpgtn1_fp0_jump_t
    0U,	// J4_cmpgtn1_fp1_jump_nt
    0U,	// J4_cmpgtn1_fp1_jump_t
    0U,	// J4_cmpgtn1_t_jumpnv_nt
    0U,	// J4_cmpgtn1_t_jumpnv_t
    0U,	// J4_cmpgtn1_tp0_jump_nt
    0U,	// J4_cmpgtn1_tp0_jump_t
    0U,	// J4_cmpgtn1_tp1_jump_nt
    0U,	// J4_cmpgtn1_tp1_jump_t
    0U,	// J4_cmpgtu_f_jumpnv_nt
    0U,	// J4_cmpgtu_f_jumpnv_t
    1U,	// J4_cmpgtu_fp0_jump_nt
    2U,	// J4_cmpgtu_fp0_jump_t
    2U,	// J4_cmpgtu_fp1_jump_nt
    2U,	// J4_cmpgtu_fp1_jump_t
    0U,	// J4_cmpgtu_t_jumpnv_nt
    0U,	// J4_cmpgtu_t_jumpnv_t
    2U,	// J4_cmpgtu_tp0_jump_nt
    2U,	// J4_cmpgtu_tp0_jump_t
    2U,	// J4_cmpgtu_tp1_jump_nt
    2U,	// J4_cmpgtu_tp1_jump_t
    0U,	// J4_cmpgtui_f_jumpnv_nt
    0U,	// J4_cmpgtui_f_jumpnv_t
    0U,	// J4_cmpgtui_fp0_jump_nt
    0U,	// J4_cmpgtui_fp0_jump_t
    0U,	// J4_cmpgtui_fp1_jump_nt
    0U,	// J4_cmpgtui_fp1_jump_t
    0U,	// J4_cmpgtui_t_jumpnv_nt
    0U,	// J4_cmpgtui_t_jumpnv_t
    0U,	// J4_cmpgtui_tp0_jump_nt
    0U,	// J4_cmpgtui_tp0_jump_t
    0U,	// J4_cmpgtui_tp1_jump_nt
    0U,	// J4_cmpgtui_tp1_jump_t
    2U,	// J4_cmplt_f_jumpnv_nt
    3U,	// J4_cmplt_f_jumpnv_t
    2U,	// J4_cmplt_t_jumpnv_nt
    3U,	// J4_cmplt_t_jumpnv_t
    2U,	// J4_cmpltu_f_jumpnv_nt
    3U,	// J4_cmpltu_f_jumpnv_t
    2U,	// J4_cmpltu_t_jumpnv_nt
    3U,	// J4_cmpltu_t_jumpnv_t
    0U,	// J4_hintjumpr
    3U,	// J4_jumpseti
    0U,	// J4_jumpsetr
    0U,	// J4_tstbit0_f_jumpnv_nt
    0U,	// J4_tstbit0_f_jumpnv_t
    0U,	// J4_tstbit0_fp0_jump_nt
    0U,	// J4_tstbit0_fp0_jump_t
    0U,	// J4_tstbit0_fp1_jump_nt
    0U,	// J4_tstbit0_fp1_jump_t
    0U,	// J4_tstbit0_t_jumpnv_nt
    0U,	// J4_tstbit0_t_jumpnv_t
    0U,	// J4_tstbit0_tp0_jump_nt
    0U,	// J4_tstbit0_tp0_jump_t
    0U,	// J4_tstbit0_tp1_jump_nt
    0U,	// J4_tstbit0_tp1_jump_t
    0U,	// JMPret
    0U,	// JMPretf
    0U,	// JMPretfnew
    0U,	// JMPretfnewpt
    0U,	// JMPrett
    0U,	// JMPrettnew
    0U,	// JMPrettnewpt
    0U,	// L2_deallocframe
    107U,	// L2_loadalignb_io
    3U,	// L2_loadalignb_pbr
    3U,	// L2_loadalignb_pci
    3731U,	// L2_loadalignb_pcr
    155U,	// L2_loadalignb_pi
    147U,	// L2_loadalignb_pr
    107U,	// L2_loadalignh_io
    3U,	// L2_loadalignh_pbr
    3U,	// L2_loadalignh_pci
    3731U,	// L2_loadalignh_pcr
    155U,	// L2_loadalignh_pi
    147U,	// L2_loadalignh_pr
    75U,	// L2_loadbsw2_io
    3U,	// L2_loadbsw2_pbr
    3U,	// L2_loadbsw2_pci
    3683U,	// L2_loadbsw2_pcr
    163U,	// L2_loadbsw2_pi
    99U,	// L2_loadbsw2_pr
    75U,	// L2_loadbsw4_io
    3U,	// L2_loadbsw4_pbr
    3U,	// L2_loadbsw4_pci
    3683U,	// L2_loadbsw4_pcr
    163U,	// L2_loadbsw4_pi
    99U,	// L2_loadbsw4_pr
    75U,	// L2_loadbzw2_io
    3U,	// L2_loadbzw2_pbr
    3U,	// L2_loadbzw2_pci
    3683U,	// L2_loadbzw2_pcr
    163U,	// L2_loadbzw2_pi
    99U,	// L2_loadbzw2_pr
    75U,	// L2_loadbzw4_io
    3U,	// L2_loadbzw4_pbr
    3U,	// L2_loadbzw4_pci
    3683U,	// L2_loadbzw4_pcr
    163U,	// L2_loadbzw4_pi
    99U,	// L2_loadbzw4_pr
    75U,	// L2_loadrb_io
    3U,	// L2_loadrb_pbr
    4243U,	// L2_loadrb_pbr_pseudo
    3U,	// L2_loadrb_pci
    171U,	// L2_loadrb_pci_pseudo
    3683U,	// L2_loadrb_pcr
    163U,	// L2_loadrb_pi
    99U,	// L2_loadrb_pr
    0U,	// L2_loadrbgp
    75U,	// L2_loadrd_io
    3U,	// L2_loadrd_pbr
    4243U,	// L2_loadrd_pbr_pseudo
    3U,	// L2_loadrd_pci
    171U,	// L2_loadrd_pci_pseudo
    3683U,	// L2_loadrd_pcr
    163U,	// L2_loadrd_pi
    99U,	// L2_loadrd_pr
    0U,	// L2_loadrdgp
    75U,	// L2_loadrh_io
    3U,	// L2_loadrh_pbr
    4243U,	// L2_loadrh_pbr_pseudo
    3U,	// L2_loadrh_pci
    171U,	// L2_loadrh_pci_pseudo
    3683U,	// L2_loadrh_pcr
    163U,	// L2_loadrh_pi
    99U,	// L2_loadrh_pr
    0U,	// L2_loadrhgp
    75U,	// L2_loadri_io
    3U,	// L2_loadri_pbr
    4243U,	// L2_loadri_pbr_pseudo
    3U,	// L2_loadri_pci
    171U,	// L2_loadri_pci_pseudo
    3683U,	// L2_loadri_pcr
    163U,	// L2_loadri_pi
    99U,	// L2_loadri_pr
    0U,	// L2_loadrigp
    75U,	// L2_loadrub_io
    3U,	// L2_loadrub_pbr
    4243U,	// L2_loadrub_pbr_pseudo
    3U,	// L2_loadrub_pci
    171U,	// L2_loadrub_pci_pseudo
    3683U,	// L2_loadrub_pcr
    163U,	// L2_loadrub_pi
    99U,	// L2_loadrub_pr
    0U,	// L2_loadrubgp
    75U,	// L2_loadruh_io
    3U,	// L2_loadruh_pbr
    4243U,	// L2_loadruh_pbr_pseudo
    3U,	// L2_loadruh_pci
    171U,	// L2_loadruh_pci_pseudo
    3683U,	// L2_loadruh_pcr
    163U,	// L2_loadruh_pi
    99U,	// L2_loadruh_pr
    0U,	// L2_loadruhgp
    0U,	// L2_loadw_locked
    176U,	// L2_ploadrbf_io
    188U,	// L2_ploadrbf_pi
    176U,	// L2_ploadrbfnew_io
    188U,	// L2_ploadrbfnew_pi
    176U,	// L2_ploadrbt_io
    188U,	// L2_ploadrbt_pi
    176U,	// L2_ploadrbtnew_io
    188U,	// L2_ploadrbtnew_pi
    176U,	// L2_ploadrdf_io
    188U,	// L2_ploadrdf_pi
    176U,	// L2_ploadrdfnew_io
    188U,	// L2_ploadrdfnew_pi
    176U,	// L2_ploadrdt_io
    188U,	// L2_ploadrdt_pi
    176U,	// L2_ploadrdtnew_io
    188U,	// L2_ploadrdtnew_pi
    176U,	// L2_ploadrhf_io
    188U,	// L2_ploadrhf_pi
    176U,	// L2_ploadrhfnew_io
    188U,	// L2_ploadrhfnew_pi
    176U,	// L2_ploadrht_io
    188U,	// L2_ploadrht_pi
    176U,	// L2_ploadrhtnew_io
    188U,	// L2_ploadrhtnew_pi
    176U,	// L2_ploadrif_io
    188U,	// L2_ploadrif_pi
    176U,	// L2_ploadrifnew_io
    188U,	// L2_ploadrifnew_pi
    176U,	// L2_ploadrit_io
    188U,	// L2_ploadrit_pi
    176U,	// L2_ploadritnew_io
    188U,	// L2_ploadritnew_pi
    176U,	// L2_ploadrubf_io
    188U,	// L2_ploadrubf_pi
    176U,	// L2_ploadrubfnew_io
    188U,	// L2_ploadrubfnew_pi
    176U,	// L2_ploadrubt_io
    188U,	// L2_ploadrubt_pi
    176U,	// L2_ploadrubtnew_io
    188U,	// L2_ploadrubtnew_pi
    176U,	// L2_ploadruhf_io
    188U,	// L2_ploadruhf_pi
    176U,	// L2_ploadruhfnew_io
    188U,	// L2_ploadruhfnew_pi
    176U,	// L2_ploadruht_io
    188U,	// L2_ploadruht_pi
    176U,	// L2_ploadruhtnew_io
    188U,	// L2_ploadruhtnew_pi
    4U,	// L4_add_memopb_io
    4U,	// L4_add_memoph_io
    4U,	// L4_add_memopw_io
    4U,	// L4_and_memopb_io
    4U,	// L4_and_memoph_io
    4U,	// L4_and_memopw_io
    4U,	// L4_iadd_memopb_io
    4U,	// L4_iadd_memoph_io
    4U,	// L4_iadd_memopw_io
    4U,	// L4_iand_memopb_io
    4U,	// L4_iand_memoph_io
    4U,	// L4_iand_memopw_io
    4U,	// L4_ior_memopb_io
    4U,	// L4_ior_memoph_io
    4U,	// L4_ior_memopw_io
    4U,	// L4_isub_memopb_io
    4U,	// L4_isub_memoph_io
    4U,	// L4_isub_memopw_io
    4U,	// L4_loadalignb_ap
    5U,	// L4_loadalignb_ur
    4U,	// L4_loadalignh_ap
    5U,	// L4_loadalignh_ur
    4U,	// L4_loadbsw2_ap
    5U,	// L4_loadbsw2_ur
    4U,	// L4_loadbsw4_ap
    5U,	// L4_loadbsw4_ur
    4U,	// L4_loadbzw2_ap
    5U,	// L4_loadbzw2_ur
    4U,	// L4_loadbzw4_ap
    5U,	// L4_loadbzw4_ur
    0U,	// L4_loadd_locked
    0U,	// L4_loadrb_abs
    4U,	// L4_loadrb_ap
    5U,	// L4_loadrb_rr
    5U,	// L4_loadrb_ur
    0U,	// L4_loadrd_abs
    4U,	// L4_loadrd_ap
    5U,	// L4_loadrd_rr
    5U,	// L4_loadrd_ur
    0U,	// L4_loadrh_abs
    4U,	// L4_loadrh_ap
    5U,	// L4_loadrh_rr
    5U,	// L4_loadrh_ur
    0U,	// L4_loadri_abs
    4U,	// L4_loadri_ap
    5U,	// L4_loadri_rr
    5U,	// L4_loadri_ur
    0U,	// L4_loadrub_abs
    4U,	// L4_loadrub_ap
    5U,	// L4_loadrub_rr
    5U,	// L4_loadrub_ur
    0U,	// L4_loadruh_abs
    4U,	// L4_loadruh_ap
    5U,	// L4_loadruh_rr
    5U,	// L4_loadruh_ur
    5U,	// L4_or_memopb_io
    5U,	// L4_or_memoph_io
    5U,	// L4_or_memopw_io
    0U,	// L4_ploadrbf_abs
    192U,	// L4_ploadrbf_rr
    0U,	// L4_ploadrbfnew_abs
    192U,	// L4_ploadrbfnew_rr
    0U,	// L4_ploadrbt_abs
    192U,	// L4_ploadrbt_rr
    0U,	// L4_ploadrbtnew_abs
    192U,	// L4_ploadrbtnew_rr
    0U,	// L4_ploadrdf_abs
    192U,	// L4_ploadrdf_rr
    0U,	// L4_ploadrdfnew_abs
    192U,	// L4_ploadrdfnew_rr
    0U,	// L4_ploadrdt_abs
    192U,	// L4_ploadrdt_rr
    0U,	// L4_ploadrdtnew_abs
    192U,	// L4_ploadrdtnew_rr
    0U,	// L4_ploadrhf_abs
    192U,	// L4_ploadrhf_rr
    0U,	// L4_ploadrhfnew_abs
    192U,	// L4_ploadrhfnew_rr
    0U,	// L4_ploadrht_abs
    192U,	// L4_ploadrht_rr
    0U,	// L4_ploadrhtnew_abs
    192U,	// L4_ploadrhtnew_rr
    0U,	// L4_ploadrif_abs
    192U,	// L4_ploadrif_rr
    0U,	// L4_ploadrifnew_abs
    192U,	// L4_ploadrifnew_rr
    0U,	// L4_ploadrit_abs
    192U,	// L4_ploadrit_rr
    0U,	// L4_ploadritnew_abs
    192U,	// L4_ploadritnew_rr
    0U,	// L4_ploadrubf_abs
    192U,	// L4_ploadrubf_rr
    0U,	// L4_ploadrubfnew_abs
    192U,	// L4_ploadrubfnew_rr
    0U,	// L4_ploadrubt_abs
    192U,	// L4_ploadrubt_rr
    0U,	// L4_ploadrubtnew_abs
    192U,	// L4_ploadrubtnew_rr
    0U,	// L4_ploadruhf_abs
    192U,	// L4_ploadruhf_rr
    0U,	// L4_ploadruhfnew_abs
    192U,	// L4_ploadruhfnew_rr
    0U,	// L4_ploadruht_abs
    192U,	// L4_ploadruht_rr
    0U,	// L4_ploadruhtnew_abs
    192U,	// L4_ploadruhtnew_rr
    0U,	// L4_return
    0U,	// L4_return_f
    0U,	// L4_return_fnew_pnt
    0U,	// L4_return_fnew_pt
    0U,	// L4_return_t
    0U,	// L4_return_tnew_pnt
    0U,	// L4_return_tnew_pt
    5U,	// L4_sub_memopb_io
    5U,	// L4_sub_memoph_io
    5U,	// L4_sub_memopw_io
    0U,	// LDriw_pred
    1U,	// LO
    1U,	// LO_GOT
    1U,	// LO_GOTREL
    0U,	// LO_H
    1U,	// LO_PIC
    84U,	// M2_acci
    5U,	// M2_accii
    0U,	// M2_cmaci_s0
    0U,	// M2_cmacr_s0
    0U,	// M2_cmacs_s0
    0U,	// M2_cmacs_s1
    0U,	// M2_cmacsc_s0
    0U,	// M2_cmacsc_s1
    0U,	// M2_cmpyi_s0
    0U,	// M2_cmpyr_s0
    0U,	// M2_cmpyrs_s0
    0U,	// M2_cmpyrs_s1
    0U,	// M2_cmpyrsc_s0
    0U,	// M2_cmpyrsc_s1
    0U,	// M2_cmpys_s0
    0U,	// M2_cmpys_s1
    0U,	// M2_cmpysc_s0
    0U,	// M2_cmpysc_s1
    0U,	// M2_cnacs_s0
    0U,	// M2_cnacs_s1
    0U,	// M2_cnacsc_s0
    0U,	// M2_cnacsc_s1
    84U,	// M2_dpmpyss_acc_s0
    84U,	// M2_dpmpyss_nac_s0
    200U,	// M2_dpmpyss_rnd_s0
    80U,	// M2_dpmpyss_s0
    84U,	// M2_dpmpyuu_acc_s0
    84U,	// M2_dpmpyuu_nac_s0
    80U,	// M2_dpmpyuu_s0
    208U,	// M2_hmmpyh_rs1
    216U,	// M2_hmmpyh_s1
    224U,	// M2_hmmpyl_rs1
    232U,	// M2_hmmpyl_s1
    84U,	// M2_maci
    0U,	// M2_macsin
    5U,	// M2_macsip
    0U,	// M2_mmachs_rs0
    0U,	// M2_mmachs_rs1
    0U,	// M2_mmachs_s0
    0U,	// M2_mmachs_s1
    0U,	// M2_mmacls_rs0
    0U,	// M2_mmacls_rs1
    0U,	// M2_mmacls_s0
    0U,	// M2_mmacls_s1
    0U,	// M2_mmacuhs_rs0
    0U,	// M2_mmacuhs_rs1
    0U,	// M2_mmacuhs_s0
    0U,	// M2_mmacuhs_s1
    0U,	// M2_mmaculs_rs0
    0U,	// M2_mmaculs_rs1
    0U,	// M2_mmaculs_s0
    0U,	// M2_mmaculs_s1
    0U,	// M2_mmpyh_rs0
    0U,	// M2_mmpyh_rs1
    0U,	// M2_mmpyh_s0
    0U,	// M2_mmpyh_s1
    0U,	// M2_mmpyl_rs0
    0U,	// M2_mmpyl_rs1
    0U,	// M2_mmpyl_s0
    0U,	// M2_mmpyl_s1
    0U,	// M2_mmpyuh_rs0
    0U,	// M2_mmpyuh_rs1
    0U,	// M2_mmpyuh_s0
    0U,	// M2_mmpyuh_s1
    0U,	// M2_mmpyul_rs0
    0U,	// M2_mmpyul_rs1
    0U,	// M2_mmpyul_s0
    0U,	// M2_mmpyul_s1
    44U,	// M2_mpy_acc_hh_s0
    244U,	// M2_mpy_acc_hh_s1
    52U,	// M2_mpy_acc_hl_s0
    252U,	// M2_mpy_acc_hl_s1
    44U,	// M2_mpy_acc_lh_s0
    244U,	// M2_mpy_acc_lh_s1
    52U,	// M2_mpy_acc_ll_s0
    252U,	// M2_mpy_acc_ll_s1
    60U,	// M2_mpy_acc_sat_hh_s0
    220U,	// M2_mpy_acc_sat_hh_s1
    68U,	// M2_mpy_acc_sat_hl_s0
    236U,	// M2_mpy_acc_sat_hl_s1
    60U,	// M2_mpy_acc_sat_lh_s0
    220U,	// M2_mpy_acc_sat_lh_s1
    68U,	// M2_mpy_acc_sat_ll_s0
    236U,	// M2_mpy_acc_sat_ll_s1
    40U,	// M2_mpy_hh_s0
    240U,	// M2_mpy_hh_s1
    48U,	// M2_mpy_hl_s0
    248U,	// M2_mpy_hl_s1
    40U,	// M2_mpy_lh_s0
    240U,	// M2_mpy_lh_s1
    48U,	// M2_mpy_ll_s0
    248U,	// M2_mpy_ll_s1
    44U,	// M2_mpy_nac_hh_s0
    244U,	// M2_mpy_nac_hh_s1
    52U,	// M2_mpy_nac_hl_s0
    252U,	// M2_mpy_nac_hl_s1
    44U,	// M2_mpy_nac_lh_s0
    244U,	// M2_mpy_nac_lh_s1
    52U,	// M2_mpy_nac_ll_s0
    252U,	// M2_mpy_nac_ll_s1
    60U,	// M2_mpy_nac_sat_hh_s0
    220U,	// M2_mpy_nac_sat_hh_s1
    68U,	// M2_mpy_nac_sat_hl_s0
    236U,	// M2_mpy_nac_sat_hl_s1
    60U,	// M2_mpy_nac_sat_lh_s0
    220U,	// M2_mpy_nac_sat_lh_s1
    68U,	// M2_mpy_nac_sat_ll_s0
    236U,	// M2_mpy_nac_sat_ll_s1
    256U,	// M2_mpy_rnd_hh_s0
    264U,	// M2_mpy_rnd_hh_s1
    272U,	// M2_mpy_rnd_hl_s0
    280U,	// M2_mpy_rnd_hl_s1
    256U,	// M2_mpy_rnd_lh_s0
    264U,	// M2_mpy_rnd_lh_s1
    272U,	// M2_mpy_rnd_ll_s0
    280U,	// M2_mpy_rnd_ll_s1
    56U,	// M2_mpy_sat_hh_s0
    216U,	// M2_mpy_sat_hh_s1
    64U,	// M2_mpy_sat_hl_s0
    232U,	// M2_mpy_sat_hl_s1
    56U,	// M2_mpy_sat_lh_s0
    216U,	// M2_mpy_sat_lh_s1
    64U,	// M2_mpy_sat_ll_s0
    232U,	// M2_mpy_sat_ll_s1
    288U,	// M2_mpy_sat_rnd_hh_s0
    208U,	// M2_mpy_sat_rnd_hh_s1
    296U,	// M2_mpy_sat_rnd_hl_s0
    224U,	// M2_mpy_sat_rnd_hl_s1
    288U,	// M2_mpy_sat_rnd_lh_s0
    208U,	// M2_mpy_sat_rnd_lh_s1
    296U,	// M2_mpy_sat_rnd_ll_s0
    224U,	// M2_mpy_sat_rnd_ll_s1
    80U,	// M2_mpy_up
    304U,	// M2_mpy_up_s1
    312U,	// M2_mpy_up_s1_sat
    44U,	// M2_mpyd_acc_hh_s0
    244U,	// M2_mpyd_acc_hh_s1
    52U,	// M2_mpyd_acc_hl_s0
    252U,	// M2_mpyd_acc_hl_s1
    44U,	// M2_mpyd_acc_lh_s0
    244U,	// M2_mpyd_acc_lh_s1
    52U,	// M2_mpyd_acc_ll_s0
    252U,	// M2_mpyd_acc_ll_s1
    40U,	// M2_mpyd_hh_s0
    240U,	// M2_mpyd_hh_s1
    48U,	// M2_mpyd_hl_s0
    248U,	// M2_mpyd_hl_s1
    40U,	// M2_mpyd_lh_s0
    240U,	// M2_mpyd_lh_s1
    48U,	// M2_mpyd_ll_s0
    248U,	// M2_mpyd_ll_s1
    44U,	// M2_mpyd_nac_hh_s0
    244U,	// M2_mpyd_nac_hh_s1
    52U,	// M2_mpyd_nac_hl_s0
    252U,	// M2_mpyd_nac_hl_s1
    44U,	// M2_mpyd_nac_lh_s0
    244U,	// M2_mpyd_nac_lh_s1
    52U,	// M2_mpyd_nac_ll_s0
    252U,	// M2_mpyd_nac_ll_s1
    256U,	// M2_mpyd_rnd_hh_s0
    264U,	// M2_mpyd_rnd_hh_s1
    272U,	// M2_mpyd_rnd_hl_s0
    280U,	// M2_mpyd_rnd_hl_s1
    256U,	// M2_mpyd_rnd_lh_s0
    264U,	// M2_mpyd_rnd_lh_s1
    272U,	// M2_mpyd_rnd_ll_s0
    280U,	// M2_mpyd_rnd_ll_s1
    80U,	// M2_mpyi
    0U,	// M2_mpysin
    0U,	// M2_mpysip
    80U,	// M2_mpysmi
    0U,	// M2_mpysu_up
    44U,	// M2_mpyu_acc_hh_s0
    244U,	// M2_mpyu_acc_hh_s1
    52U,	// M2_mpyu_acc_hl_s0
    252U,	// M2_mpyu_acc_hl_s1
    44U,	// M2_mpyu_acc_lh_s0
    244U,	// M2_mpyu_acc_lh_s1
    52U,	// M2_mpyu_acc_ll_s0
    252U,	// M2_mpyu_acc_ll_s1
    40U,	// M2_mpyu_hh_s0
    240U,	// M2_mpyu_hh_s1
    48U,	// M2_mpyu_hl_s0
    248U,	// M2_mpyu_hl_s1
    40U,	// M2_mpyu_lh_s0
    240U,	// M2_mpyu_lh_s1
    48U,	// M2_mpyu_ll_s0
    248U,	// M2_mpyu_ll_s1
    44U,	// M2_mpyu_nac_hh_s0
    244U,	// M2_mpyu_nac_hh_s1
    52U,	// M2_mpyu_nac_hl_s0
    252U,	// M2_mpyu_nac_hl_s1
    44U,	// M2_mpyu_nac_lh_s0
    244U,	// M2_mpyu_nac_lh_s1
    52U,	// M2_mpyu_nac_ll_s0
    252U,	// M2_mpyu_nac_ll_s1
    80U,	// M2_mpyu_up
    44U,	// M2_mpyud_acc_hh_s0
    244U,	// M2_mpyud_acc_hh_s1
    52U,	// M2_mpyud_acc_hl_s0
    252U,	// M2_mpyud_acc_hl_s1
    44U,	// M2_mpyud_acc_lh_s0
    244U,	// M2_mpyud_acc_lh_s1
    52U,	// M2_mpyud_acc_ll_s0
    252U,	// M2_mpyud_acc_ll_s1
    40U,	// M2_mpyud_hh_s0
    240U,	// M2_mpyud_hh_s1
    48U,	// M2_mpyud_hl_s0
    248U,	// M2_mpyud_hl_s1
    40U,	// M2_mpyud_lh_s0
    240U,	// M2_mpyud_lh_s1
    48U,	// M2_mpyud_ll_s0
    248U,	// M2_mpyud_ll_s1
    44U,	// M2_mpyud_nac_hh_s0
    244U,	// M2_mpyud_nac_hh_s1
    52U,	// M2_mpyud_nac_hl_s0
    252U,	// M2_mpyud_nac_hl_s1
    44U,	// M2_mpyud_nac_lh_s0
    244U,	// M2_mpyud_nac_lh_s1
    52U,	// M2_mpyud_nac_ll_s0
    252U,	// M2_mpyud_nac_ll_s1
    0U,	// M2_mpyui
    84U,	// M2_nacci
    5U,	// M2_naccii
    0U,	// M2_subacc
    0U,	// M2_vabsdiffh
    0U,	// M2_vabsdiffw
    0U,	// M2_vcmac_s0_sat_i
    0U,	// M2_vcmac_s0_sat_r
    0U,	// M2_vcmpy_s0_sat_i
    0U,	// M2_vcmpy_s0_sat_r
    0U,	// M2_vcmpy_s1_sat_i
    0U,	// M2_vcmpy_s1_sat_r
    0U,	// M2_vdmacs_s0
    0U,	// M2_vdmacs_s1
    0U,	// M2_vdmpyrs_s0
    0U,	// M2_vdmpyrs_s1
    0U,	// M2_vdmpys_s0
    0U,	// M2_vdmpys_s1
    0U,	// M2_vmac2
    0U,	// M2_vmac2es
    0U,	// M2_vmac2es_s0
    0U,	// M2_vmac2es_s1
    0U,	// M2_vmac2s_s0
    0U,	// M2_vmac2s_s1
    0U,	// M2_vmac2su_s0
    0U,	// M2_vmac2su_s1
    0U,	// M2_vmpy2es_s0
    0U,	// M2_vmpy2es_s1
    0U,	// M2_vmpy2s_s0
    0U,	// M2_vmpy2s_s0pack
    0U,	// M2_vmpy2s_s1
    0U,	// M2_vmpy2s_s1pack
    0U,	// M2_vmpy2su_s0
    0U,	// M2_vmpy2su_s1
    0U,	// M2_vraddh
    0U,	// M2_vradduh
    0U,	// M2_vrcmaci_s0
    0U,	// M2_vrcmaci_s0c
    0U,	// M2_vrcmacr_s0
    0U,	// M2_vrcmacr_s0c
    0U,	// M2_vrcmpyi_s0
    0U,	// M2_vrcmpyi_s0c
    0U,	// M2_vrcmpyr_s0
    0U,	// M2_vrcmpyr_s0c
    0U,	// M2_vrcmpys_acc_s1
    0U,	// M2_vrcmpys_acc_s1_h
    0U,	// M2_vrcmpys_acc_s1_l
    0U,	// M2_vrcmpys_s1
    0U,	// M2_vrcmpys_s1_h
    0U,	// M2_vrcmpys_s1_l
    0U,	// M2_vrcmpys_s1rp
    0U,	// M2_vrcmpys_s1rp_h
    0U,	// M2_vrcmpys_s1rp_l
    0U,	// M2_vrmac_s0
    0U,	// M2_vrmpy_s0
    0U,	// M2_xor_xacc
    84U,	// M4_and_and
    84U,	// M4_and_andn
    0U,	// M4_and_or
    0U,	// M4_and_xor
    0U,	// M4_cmpyi_wh
    0U,	// M4_cmpyi_whc
    0U,	// M4_cmpyr_wh
    0U,	// M4_cmpyr_whc
    316U,	// M4_mac_up_s1_sat
    3744U,	// M4_mpyri_addi
    11405U,	// M4_mpyri_addr
    5U,	// M4_mpyri_addr_u2
    3680U,	// M4_mpyrr_addi
    3717U,	// M4_mpyrr_addr
    316U,	// M4_nac_up_s1_sat
    84U,	// M4_or_and
    84U,	// M4_or_andn
    84U,	// M4_or_or
    0U,	// M4_or_xor
    0U,	// M4_pmpyw
    0U,	// M4_pmpyw_acc
    0U,	// M4_vpmpyh
    0U,	// M4_vpmpyh_acc
    0U,	// M4_vrmpyeh_acc_s0
    0U,	// M4_vrmpyeh_acc_s1
    0U,	// M4_vrmpyeh_s0
    0U,	// M4_vrmpyeh_s1
    0U,	// M4_vrmpyoh_acc_s0
    0U,	// M4_vrmpyoh_acc_s1
    0U,	// M4_vrmpyoh_s0
    0U,	// M4_vrmpyoh_s1
    84U,	// M4_xor_and
    84U,	// M4_xor_andn
    0U,	// M4_xor_or
    0U,	// M4_xor_xacc
    0U,	// M5_vdmacbsu
    0U,	// M5_vdmpybsu
    0U,	// M5_vmacbsu
    0U,	// M5_vmacbuu
    0U,	// M5_vmpybsu
    0U,	// M5_vmpybuu
    0U,	// M5_vrmacbsu
    0U,	// M5_vrmacbuu
    0U,	// M5_vrmpybsu
    0U,	// M5_vrmpybuu
    0U,	// MUX64_rr
    2696U,	// MUX_ir_f
    128U,	// MUX_ri_f
    0U,	// RESTORE_DEALLOC_BEFORE_TAILCALL_V4
    0U,	// RESTORE_DEALLOC_RET_JMP_V4
    0U,	// S2_addasl_rrri
    0U,	// S2_allocframe
    80U,	// S2_asl_i_p
    85U,	// S2_asl_i_p_acc
    85U,	// S2_asl_i_p_and
    85U,	// S2_asl_i_p_nac
    85U,	// S2_asl_i_p_or
    85U,	// S2_asl_i_p_xacc
    80U,	// S2_asl_i_r
    85U,	// S2_asl_i_r_acc
    85U,	// S2_asl_i_r_and
    85U,	// S2_asl_i_r_nac
    85U,	// S2_asl_i_r_or
    112U,	// S2_asl_i_r_sat
    85U,	// S2_asl_i_r_xacc
    80U,	// S2_asl_i_vh
    80U,	// S2_asl_i_vw
    80U,	// S2_asl_r_p
    84U,	// S2_asl_r_p_acc
    84U,	// S2_asl_r_p_and
    84U,	// S2_asl_r_p_nac
    84U,	// S2_asl_r_p_or
    84U,	// S2_asl_r_p_xor
    80U,	// S2_asl_r_r
    84U,	// S2_asl_r_r_acc
    84U,	// S2_asl_r_r_and
    84U,	// S2_asl_r_r_nac
    84U,	// S2_asl_r_r_or
    112U,	// S2_asl_r_r_sat
    80U,	// S2_asl_r_vh
    80U,	// S2_asl_r_vw
    80U,	// S2_asr_i_p
    85U,	// S2_asr_i_p_acc
    85U,	// S2_asr_i_p_and
    85U,	// S2_asr_i_p_nac
    85U,	// S2_asr_i_p_or
    200U,	// S2_asr_i_p_rnd
    0U,	// S2_asr_i_p_rnd_goodsyntax
    80U,	// S2_asr_i_r
    85U,	// S2_asr_i_r_acc
    85U,	// S2_asr_i_r_and
    85U,	// S2_asr_i_r_nac
    85U,	// S2_asr_i_r_or
    200U,	// S2_asr_i_r_rnd
    0U,	// S2_asr_i_r_rnd_goodsyntax
    80U,	// S2_asr_i_svw_trun
    80U,	// S2_asr_i_vh
    80U,	// S2_asr_i_vw
    80U,	// S2_asr_r_p
    84U,	// S2_asr_r_p_acc
    84U,	// S2_asr_r_p_and
    84U,	// S2_asr_r_p_nac
    84U,	// S2_asr_r_p_or
    0U,	// S2_asr_r_p_xor
    80U,	// S2_asr_r_r
    84U,	// S2_asr_r_r_acc
    84U,	// S2_asr_r_r_and
    84U,	// S2_asr_r_r_nac
    84U,	// S2_asr_r_r_or
    112U,	// S2_asr_r_r_sat
    80U,	// S2_asr_r_svw_trun
    80U,	// S2_asr_r_vh
    80U,	// S2_asr_r_vw
    0U,	// S2_brev
    0U,	// S2_brevp
    0U,	// S2_cabacdecbin
    0U,	// S2_cl0
    0U,	// S2_cl0p
    0U,	// S2_cl1
    0U,	// S2_cl1p
    0U,	// S2_clb
    0U,	// S2_clbnorm
    0U,	// S2_clbp
    80U,	// S2_clrbit_i
    80U,	// S2_clrbit_r
    0U,	// S2_ct0
    0U,	// S2_ct0p
    0U,	// S2_ct1
    0U,	// S2_ct1p
    0U,	// S2_deinterleave
    2696U,	// S2_extractu
    80U,	// S2_extractu_rp
    2696U,	// S2_extractup
    80U,	// S2_extractup_rp
    4749U,	// S2_insert
    84U,	// S2_insert_rp
    4749U,	// S2_insertp
    84U,	// S2_insertp_rp
    0U,	// S2_interleave
    0U,	// S2_lfsp
    0U,	// S2_lsl_r_p
    0U,	// S2_lsl_r_p_acc
    0U,	// S2_lsl_r_p_and
    0U,	// S2_lsl_r_p_nac
    0U,	// S2_lsl_r_p_or
    0U,	// S2_lsl_r_p_xor
    0U,	// S2_lsl_r_r
    0U,	// S2_lsl_r_r_acc
    0U,	// S2_lsl_r_r_and
    0U,	// S2_lsl_r_r_nac
    0U,	// S2_lsl_r_r_or
    0U,	// S2_lsl_r_vh
    0U,	// S2_lsl_r_vw
    80U,	// S2_lsr_i_p
    85U,	// S2_lsr_i_p_acc
    85U,	// S2_lsr_i_p_and
    85U,	// S2_lsr_i_p_nac
    85U,	// S2_lsr_i_p_or
    85U,	// S2_lsr_i_p_xacc
    80U,	// S2_lsr_i_r
    85U,	// S2_lsr_i_r_acc
    85U,	// S2_lsr_i_r_and
    85U,	// S2_lsr_i_r_nac
    85U,	// S2_lsr_i_r_or
    85U,	// S2_lsr_i_r_xacc
    80U,	// S2_lsr_i_vh
    80U,	// S2_lsr_i_vw
    80U,	// S2_lsr_r_p
    84U,	// S2_lsr_r_p_acc
    84U,	// S2_lsr_r_p_and
    84U,	// S2_lsr_r_p_nac
    84U,	// S2_lsr_r_p_or
    84U,	// S2_lsr_r_p_xor
    80U,	// S2_lsr_r_r
    84U,	// S2_lsr_r_r_acc
    84U,	// S2_lsr_r_r_and
    84U,	// S2_lsr_r_r_nac
    84U,	// S2_lsr_r_r_or
    80U,	// S2_lsr_r_vh
    80U,	// S2_lsr_r_vw
    0U,	// S2_packhl
    0U,	// S2_parityp
    21582U,	// S2_pstorerbf_io
    29859U,	// S2_pstorerbf_pi
    29859U,	// S2_pstorerbfnew_pi
    54350U,	// S2_pstorerbnewf_io
    62627U,	// S2_pstorerbnewf_pi
    62627U,	// S2_pstorerbnewfnew_pi
    54350U,	// S2_pstorerbnewt_io
    62627U,	// S2_pstorerbnewt_pi
    62627U,	// S2_pstorerbnewtnew_pi
    21582U,	// S2_pstorerbt_io
    29859U,	// S2_pstorerbt_pi
    29859U,	// S2_pstorerbtnew_pi
    21582U,	// S2_pstorerdf_io
    29859U,	// S2_pstorerdf_pi
    29859U,	// S2_pstorerdfnew_pi
    21582U,	// S2_pstorerdt_io
    29859U,	// S2_pstorerdt_pi
    29859U,	// S2_pstorerdtnew_pi
    87118U,	// S2_pstorerff_io
    95395U,	// S2_pstorerff_pi
    95395U,	// S2_pstorerffnew_pi
    87118U,	// S2_pstorerft_io
    95395U,	// S2_pstorerft_pi
    95395U,	// S2_pstorerftnew_pi
    21582U,	// S2_pstorerhf_io
    29859U,	// S2_pstorerhf_pi
    29859U,	// S2_pstorerhfnew_pi
    54350U,	// S2_pstorerhnewf_io
    62627U,	// S2_pstorerhnewf_pi
    62627U,	// S2_pstorerhnewfnew_pi
    54350U,	// S2_pstorerhnewt_io
    62627U,	// S2_pstorerhnewt_pi
    62627U,	// S2_pstorerhnewtnew_pi
    21582U,	// S2_pstorerht_io
    29859U,	// S2_pstorerht_pi
    29859U,	// S2_pstorerhtnew_pi
    21582U,	// S2_pstorerif_io
    29859U,	// S2_pstorerif_pi
    29859U,	// S2_pstorerifnew_pi
    54350U,	// S2_pstorerinewf_io
    62627U,	// S2_pstorerinewf_pi
    62627U,	// S2_pstorerinewfnew_pi
    54350U,	// S2_pstorerinewt_io
    62627U,	// S2_pstorerinewt_pi
    62627U,	// S2_pstorerinewtnew_pi
    21582U,	// S2_pstorerit_io
    29859U,	// S2_pstorerit_pi
    29859U,	// S2_pstoreritnew_pi
    80U,	// S2_setbit_i
    80U,	// S2_setbit_r
    0U,	// S2_shuffeb
    0U,	// S2_shuffeh
    0U,	// S2_shuffob
    0U,	// S2_shuffoh
    5638U,	// S2_storerb_io
    0U,	// S2_storerb_pbr
    6U,	// S2_storerb_pbr_pseudo
    0U,	// S2_storerb_pci
    0U,	// S2_storerb_pci_pseudo
    0U,	// S2_storerb_pcr
    0U,	// S2_storerb_pi
    5734U,	// S2_storerb_pr
    0U,	// S2_storerbabs
    0U,	// S2_storerbgp
    6150U,	// S2_storerbnew_io
    0U,	// S2_storerbnew_pbr
    0U,	// S2_storerbnew_pci
    0U,	// S2_storerbnew_pcr
    6U,	// S2_storerbnew_pi
    6246U,	// S2_storerbnew_pr
    0U,	// S2_storerbnewabs
    0U,	// S2_storerbnewgp
    5638U,	// S2_storerd_io
    0U,	// S2_storerd_pbr
    6U,	// S2_storerd_pbr_pseudo
    0U,	// S2_storerd_pci
    0U,	// S2_storerd_pci_pseudo
    0U,	// S2_storerd_pcr
    0U,	// S2_storerd_pi
    5734U,	// S2_storerd_pr
    0U,	// S2_storerdabs
    0U,	// S2_storerdgp
    6662U,	// S2_storerf_io
    0U,	// S2_storerf_pbr
    6U,	// S2_storerf_pbr_pseudo
    0U,	// S2_storerf_pci
    0U,	// S2_storerf_pci_pseudo
    0U,	// S2_storerf_pcr
    6U,	// S2_storerf_pi
    6758U,	// S2_storerf_pr
    0U,	// S2_storerfabs
    0U,	// S2_storerfgp
    5638U,	// S2_storerh_io
    0U,	// S2_storerh_pbr
    6U,	// S2_storerh_pbr_pseudo
    0U,	// S2_storerh_pci
    0U,	// S2_storerh_pci_pseudo
    0U,	// S2_storerh_pcr
    0U,	// S2_storerh_pi
    5734U,	// S2_storerh_pr
    0U,	// S2_storerhabs
    0U,	// S2_storerhgp
    6150U,	// S2_storerhnew_io
    0U,	// S2_storerhnew_pbr
    0U,	// S2_storerhnew_pci
    0U,	// S2_storerhnew_pcr
    6U,	// S2_storerhnew_pi
    6246U,	// S2_storerhnew_pr
    0U,	// S2_storerhnewabs
    0U,	// S2_storerhnewgp
    5638U,	// S2_storeri_io
    0U,	// S2_storeri_pbr
    6U,	// S2_storeri_pbr_pseudo
    0U,	// S2_storeri_pci
    0U,	// S2_storeri_pci_pseudo
    0U,	// S2_storeri_pcr
    0U,	// S2_storeri_pi
    5734U,	// S2_storeri_pr
    0U,	// S2_storeriabs
    0U,	// S2_storerigp
    6150U,	// S2_storerinew_io
    0U,	// S2_storerinew_pbr
    0U,	// S2_storerinew_pci
    0U,	// S2_storerinew_pcr
    6U,	// S2_storerinew_pi
    6246U,	// S2_storerinew_pr
    0U,	// S2_storerinewabs
    0U,	// S2_storerinewgp
    5638U,	// S2_storew_locked
    0U,	// S2_svsathb
    0U,	// S2_svsathub
    0U,	// S2_tableidxb
    0U,	// S2_tableidxb_goodsyntax
    0U,	// S2_tableidxd
    0U,	// S2_tableidxd_goodsyntax
    0U,	// S2_tableidxh
    0U,	// S2_tableidxh_goodsyntax
    0U,	// S2_tableidxw
    0U,	// S2_tableidxw_goodsyntax
    80U,	// S2_togglebit_i
    80U,	// S2_togglebit_r
    80U,	// S2_tstbit_i
    80U,	// S2_tstbit_r
    85U,	// S2_valignib
    84U,	// S2_valignrb
    0U,	// S2_vcnegh
    0U,	// S2_vcrotate
    0U,	// S2_vrcnegh
    0U,	// S2_vrndpackwh
    0U,	// S2_vrndpackwhs
    0U,	// S2_vsathb
    0U,	// S2_vsathb_nopack
    0U,	// S2_vsathub
    0U,	// S2_vsathub_nopack
    0U,	// S2_vsatwh
    0U,	// S2_vsatwh_nopack
    0U,	// S2_vsatwuh
    0U,	// S2_vsatwuh_nopack
    0U,	// S2_vsplatrb
    0U,	// S2_vsplatrh
    85U,	// S2_vspliceib
    84U,	// S2_vsplicerb
    0U,	// S2_vsxtbh
    0U,	// S2_vsxthw
    0U,	// S2_vtrunehb
    0U,	// S2_vtrunewh
    0U,	// S2_vtrunohb
    0U,	// S2_vtrunowh
    0U,	// S2_vzxtbh
    0U,	// S2_vzxthw
    6U,	// S4_addaddi
    0U,	// S4_addi_asl_ri
    0U,	// S4_addi_lsr_ri
    0U,	// S4_andi_asl_ri
    0U,	// S4_andi_lsr_ri
    0U,	// S4_clbaddi
    0U,	// S4_clbpaddi
    0U,	// S4_clbpnorm
    2696U,	// S4_extract
    80U,	// S4_extract_rp
    2696U,	// S4_extractp
    80U,	// S4_extractp_rp
    0U,	// S4_lsli
    80U,	// S4_ntstbit_i
    80U,	// S4_ntstbit_r
    5U,	// S4_or_andi
    3688U,	// S4_or_andix
    5U,	// S4_or_ori
    0U,	// S4_ori_asl_ri
    0U,	// S4_ori_lsr_ri
    0U,	// S4_parity
    0U,	// S4_pstorerbf_abs
    126U,	// S4_pstorerbf_rr
    0U,	// S4_pstorerbfnew_abs
    21582U,	// S4_pstorerbfnew_io
    126U,	// S4_pstorerbfnew_rr
    0U,	// S4_pstorerbnewf_abs
    326U,	// S4_pstorerbnewf_rr
    0U,	// S4_pstorerbnewfnew_abs
    54350U,	// S4_pstorerbnewfnew_io
    326U,	// S4_pstorerbnewfnew_rr
    0U,	// S4_pstorerbnewt_abs
    326U,	// S4_pstorerbnewt_rr
    0U,	// S4_pstorerbnewtnew_abs
    54350U,	// S4_pstorerbnewtnew_io
    326U,	// S4_pstorerbnewtnew_rr
    0U,	// S4_pstorerbt_abs
    126U,	// S4_pstorerbt_rr
    0U,	// S4_pstorerbtnew_abs
    21582U,	// S4_pstorerbtnew_io
    126U,	// S4_pstorerbtnew_rr
    0U,	// S4_pstorerdf_abs
    126U,	// S4_pstorerdf_rr
    0U,	// S4_pstorerdfnew_abs
    21582U,	// S4_pstorerdfnew_io
    126U,	// S4_pstorerdfnew_rr
    0U,	// S4_pstorerdt_abs
    126U,	// S4_pstorerdt_rr
    0U,	// S4_pstorerdtnew_abs
    21582U,	// S4_pstorerdtnew_io
    126U,	// S4_pstorerdtnew_rr
    0U,	// S4_pstorerff_abs
    334U,	// S4_pstorerff_rr
    0U,	// S4_pstorerffnew_abs
    87118U,	// S4_pstorerffnew_io
    334U,	// S4_pstorerffnew_rr
    0U,	// S4_pstorerft_abs
    334U,	// S4_pstorerft_rr
    0U,	// S4_pstorerftnew_abs
    87118U,	// S4_pstorerftnew_io
    334U,	// S4_pstorerftnew_rr
    0U,	// S4_pstorerhf_abs
    126U,	// S4_pstorerhf_rr
    0U,	// S4_pstorerhfnew_abs
    21582U,	// S4_pstorerhfnew_io
    126U,	// S4_pstorerhfnew_rr
    0U,	// S4_pstorerhnewf_abs
    326U,	// S4_pstorerhnewf_rr
    0U,	// S4_pstorerhnewfnew_abs
    54350U,	// S4_pstorerhnewfnew_io
    326U,	// S4_pstorerhnewfnew_rr
    0U,	// S4_pstorerhnewt_abs
    326U,	// S4_pstorerhnewt_rr
    0U,	// S4_pstorerhnewtnew_abs
    54350U,	// S4_pstorerhnewtnew_io
    326U,	// S4_pstorerhnewtnew_rr
    0U,	// S4_pstorerht_abs
    126U,	// S4_pstorerht_rr
    0U,	// S4_pstorerhtnew_abs
    21582U,	// S4_pstorerhtnew_io
    126U,	// S4_pstorerhtnew_rr
    0U,	// S4_pstorerif_abs
    126U,	// S4_pstorerif_rr
    0U,	// S4_pstorerifnew_abs
    21582U,	// S4_pstorerifnew_io
    126U,	// S4_pstorerifnew_rr
    0U,	// S4_pstorerinewf_abs
    326U,	// S4_pstorerinewf_rr
    0U,	// S4_pstorerinewfnew_abs
    54350U,	// S4_pstorerinewfnew_io
    326U,	// S4_pstorerinewfnew_rr
    0U,	// S4_pstorerinewt_abs
    326U,	// S4_pstorerinewt_rr
    0U,	// S4_pstorerinewtnew_abs
    54350U,	// S4_pstorerinewtnew_io
    326U,	// S4_pstorerinewtnew_rr
    0U,	// S4_pstorerit_abs
    126U,	// S4_pstorerit_rr
    0U,	// S4_pstoreritnew_abs
    21582U,	// S4_pstoreritnew_io
    126U,	// S4_pstoreritnew_rr
    5638U,	// S4_stored_locked
    6U,	// S4_storeirb_io
    7262U,	// S4_storeirbf_io
    7262U,	// S4_storeirbfnew_io
    7262U,	// S4_storeirbt_io
    7262U,	// S4_storeirbtnew_io
    6U,	// S4_storeirh_io
    7262U,	// S4_storeirhf_io
    7262U,	// S4_storeirhfnew_io
    7262U,	// S4_storeirht_io
    7262U,	// S4_storeirhtnew_io
    6U,	// S4_storeiri_io
    7262U,	// S4_storeirif_io
    7262U,	// S4_storeirifnew_io
    7262U,	// S4_storeirit_io
    7262U,	// S4_storeiritnew_io
    5638U,	// S4_storerb_ap
    0U,	// S4_storerb_rr
    0U,	// S4_storerb_ur
    6150U,	// S4_storerbnew_ap
    0U,	// S4_storerbnew_rr
    0U,	// S4_storerbnew_ur
    5638U,	// S4_storerd_ap
    0U,	// S4_storerd_rr
    0U,	// S4_storerd_ur
    6662U,	// S4_storerf_ap
    0U,	// S4_storerf_rr
    0U,	// S4_storerf_ur
    5638U,	// S4_storerh_ap
    0U,	// S4_storerh_rr
    0U,	// S4_storerh_ur
    6150U,	// S4_storerhnew_ap
    0U,	// S4_storerhnew_rr
    0U,	// S4_storerhnew_ur
    5638U,	// S4_storeri_ap
    0U,	// S4_storeri_rr
    0U,	// S4_storeri_ur
    6150U,	// S4_storerinew_ap
    0U,	// S4_storerinew_rr
    0U,	// S4_storerinew_ur
    7U,	// S4_subaddi
    0U,	// S4_subi_asl_ri
    0U,	// S4_subi_lsr_ri
    0U,	// S4_vrcrotate
    0U,	// S4_vrcrotate_acc
    0U,	// S4_vxaddsubh
    0U,	// S4_vxaddsubhr
    0U,	// S4_vxaddsubw
    0U,	// S4_vxsubaddh
    0U,	// S4_vxsubaddhr
    0U,	// S4_vxsubaddw
    0U,	// S5_asrhub_rnd_sat
    0U,	// S5_asrhub_rnd_sat_goodsyntax
    0U,	// S5_asrhub_sat
    0U,	// S5_popcountp
    336U,	// S5_vasrhrnd
    0U,	// S5_vasrhrnd_goodsyntax
    0U,	// SAVE_REGISTERS_CALL_V4
    0U,	// STriw_pred
    0U,	// TCRETURNi
    0U,	// TCRETURNr
    0U,	// TFRI64_V2_ext
    0U,	// TFRI64_V4
    0U,	// TFRI_V4
    120U,	// TFRI_cNotPt_f
    120U,	// TFRI_cPt_f
    0U,	// TFRI_f
    0U,	// TFR_FI
    344U,	// TFR_PdFalse
    0U,	// TFR_PdTrue
    0U,	// VMULW
    0U,	// VMULW_ACC
    0U,	// Y2_barrier
    0U,	// Y2_dcfetchbo
    0U,	// Y4_trace
    7680U,	// dep_A2_addsat
    7680U,	// dep_A2_subsat
    0U,	// dep_S2_packhl
    0U
  };

  static const char AsmStrs[] = {
  /* 0 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 's', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'o', 't', 32, 'e', 'm', 'i', 't', '"', 32, 0,
  /* 26 */ 'c', 'a', 'l', 'l', 32, 0,
  /* 32 */ 'j', 'u', 'm', 'p', 32, 0,
  /* 38 */ 'c', 'a', 'l', 'l', 'r', 32, 0,
  /* 45 */ 'j', 'u', 'm', 'p', 'r', 32, 0,
  /* 52 */ 'i', 'f', 32, '(', '!', 0,
  /* 58 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 0,
  /* 67 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 'S', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'e', 'v', 'e', 'r', 32, 't', 'r', 'y', 32, 't', 'o', 32, 'e', 'm', 'i', 't', 32, 'I', 'n', 's', 'e', 'r', 't', '4', '"', 0,
  /* 109 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 'S', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'e', 'v', 'e', 'r', 32, 't', 'r', 'y', 32, 't', 'o', 32, 'e', 'm', 'i', 't', 32, 'V', 'M', 'U', 'L', 'W', '_', 'A', 'C', 'C', '"', 0,
  /* 153 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 'S', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'e', 'v', 'e', 'r', 32, 't', 'r', 'y', 32, 't', 'o', 32, 'e', 'm', 'i', 't', 32, 'V', 'M', 'U', 'L', 'W', '"', 0,
  /* 193 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 's', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'o', 't', 32, 'e', 'm', 'i', 't', '"', 0,
  /* 218 */ 'j', 'u', 'm', 'p', 32, '#', 0,
  /* 225 */ 'j', 'u', 'm', 'p', 32, '#', '#', 0,
  /* 233 */ 'm', 'e', 'm', 'b', '(', '#', '#', 0,
  /* 241 */ 'm', 'e', 'm', 'd', '(', '#', '#', 0,
  /* 249 */ 'm', 'e', 'm', 'h', '(', '#', '#', 0,
  /* 257 */ 'm', 'e', 'm', 'w', '(', '#', '#', 0,
  /* 265 */ 'm', 'e', 'm', 'b', '(', '#', 0,
  /* 272 */ 'm', 'e', 'm', 'd', '(', '#', 0,
  /* 279 */ 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', '(', '#', 0,
  /* 292 */ 'm', 'e', 'm', 'h', '(', '#', 0,
  /* 299 */ 'i', 'm', 'm', 'e', 'x', 't', '(', '#', 0,
  /* 308 */ 'm', 'e', 'm', 'w', '(', '#', 0,
  /* 315 */ 'i', 'f', 32, '(', 0,
  /* 320 */ 'p', '3', 32, '=', 32, 's', 'p', '1', 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 335 */ 'p', '3', 32, '=', 32, 's', 'p', '2', 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 350 */ 'p', '3', 32, '=', 32, 's', 'p', '3', 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 365 */ 'l', 'o', 'o', 'p', '1', '(', 0,
  /* 372 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 'm', 'e', 'm', 'b', '(', 0,
  /* 386 */ 'm', 'e', 'm', 'd', '_', 'l', 'o', 'c', 'k', 'e', 'd', '(', 0,
  /* 399 */ 'm', 'e', 'm', 'w', '_', 'l', 'o', 'c', 'k', 'e', 'd', '(', 0,
  /* 412 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 'm', 'e', 'm', 'd', '(', 0,
  /* 426 */ 't', 'r', 'a', 'c', 'e', '(', 0,
  /* 433 */ 'd', 'c', 'f', 'e', 't', 'c', 'h', '(', 0,
  /* 442 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 'm', 'e', 'm', 'h', '(', 0,
  /* 456 */ 'p', '0', 32, '=', 32, 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 469 */ 'p', '1', 32, '=', 32, 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 482 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 495 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 507 */ 'h', 'i', 'n', 't', 'j', 'r', '(', 0,
  /* 515 */ 'p', '0', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 528 */ 'p', '1', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 541 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 554 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 566 */ 'p', '0', 32, '=', 32, 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 579 */ 'p', '1', 32, '=', 32, 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 592 */ 'i', 'f', 32, '(', '!', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 605 */ 'i', 'f', 32, '(', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 617 */ 'p', '0', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 631 */ 'p', '1', 32, '=', 32, 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 645 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 659 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 672 */ '.', 'e', 'r', 'r', 'o', 'r', 32, '"', 'm', 'e', 'm', 'w', '(', 0,
  /* 686 */ ':', 'e', 'n', 'd', 'l', 'o', 'o', 'p', '0', 0,
  /* 696 */ ':', 'e', 'n', 'd', 'l', 'o', 'o', 'p', '1', 0,
  /* 706 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 719 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 726 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 736 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 751 */ 'd', 'e', 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', 0,
  /* 764 */ 'd', 'e', 'a', 'l', 'l', 'o', 'c', '_', 'r', 'e', 't', 'u', 'r', 'n', 0,
  /* 779 */ 'n', 'o', 'p', 0,
  /* 783 */ 'b', 'a', 'r', 'r', 'i', 'e', 'r', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 1023)-1;


  // Fragment 0 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 10) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, A2_nop, ADJCALLSTACKD...
    return;
    break;
  case 1:
    // A2_abs, A2_absp, A2_abssat, A2_add, A2_addh_h16_hh, A2_addh_h16_hl, A2...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // A2_paddf, A2_paddfnew, A2_paddif, A2_paddifnew, A2_paddit, A2_padditne...
    printOperand(MI, 1, O); 
    break;
  case 3:
    // A4_ext, S2_allocframe, S2_storerbabs, S2_storerbnewabs, S2_storerbnewg...
    printImmOperand(MI, 0, O); 
    break;
  case 4:
    // A4_ext_g, S2_storerbgp, S2_storerdgp, S2_storerfgp, S2_storerhgp, S2_s...
    printGlobalOperand(MI, 0, O); 
    break;
  case 5:
    // L2_ploadrbf_pi, L2_ploadrbfnew_pi, L2_ploadrbt_pi, L2_ploadrbtnew_pi, ...
    printOperand(MI, 2, O); 
    break;
  }


  // Fragment 1 encoded into 9 bits for 451 unique commands.
  switch ((Bits >> 13) & 511) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_abs, A2_absp, A2_abssat
    O << " = abs("; 
    printOperand(MI, 1, O); 
    break;
  case 1:
    // A2_add, A2_addh_h16_hh, A2_addh_h16_hl, A2_addh_h16_lh, A2_addh_h16_ll...
    O << " = add("; 
    break;
  case 2:
    // A2_and, A2_andir, A2_andp, A4_andn, A4_andnp, C2_and, C2_andn, C4_and_...
    O << " = and("; 
    printOperand(MI, 1, O); 
    break;
  case 3:
    // A2_aslh
    O << " = aslh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 4:
    // A2_asrh
    O << " = asrh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 5:
    // A2_combine_hh, A2_combine_hl, A2_combine_lh, A2_combine_ll, A2_combine...
    O << " = combine("; 
    printOperand(MI, 1, O); 
    break;
  case 6:
    // A2_combineii, A4_combineii, A4_combineir
    O << " = combine(#"; 
    break;
  case 7:
    // A2_max, A2_maxp
    O << " = max("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // A2_maxu, A2_maxup
    O << " = maxu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 9:
    // A2_min, A2_minp
    O << " = min("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 10:
    // A2_minu, A2_minup
    O << " = minu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 11:
    // A2_negp, A2_negsat
    O << " = neg("; 
    printOperand(MI, 1, O); 
    break;
  case 12:
    // A2_not, A2_notp, C2_not
    O << " = not("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 13:
    // A2_or, A2_orir, A2_orp, A4_orn, A4_ornp, C2_or, C2_orn, C4_or_and, C4_...
    O << " = or("; 
    printOperand(MI, 1, O); 
    break;
  case 14:
    // A2_paddf, A2_paddif, A2_paddit, A2_paddt, A2_pandf, A2_pandt, A2_porf,...
    O << ") "; 
    printOperand(MI, 0, O); 
    break;
  case 15:
    // A2_paddfnew, A2_paddifnew, A2_padditnew, A2_paddtnew, A2_pandfnew, A2_...
    O << ".new) "; 
    printOperand(MI, 0, O); 
    break;
  case 16:
    // A2_roundsat, A4_round_ri, A4_round_ri_sat, A4_round_rr, A4_round_rr_sa...
    O << " = round("; 
    printOperand(MI, 1, O); 
    break;
  case 17:
    // A2_sat
    O << " = sat("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 18:
    // A2_satb
    O << " = satb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 19:
    // A2_sath
    O << " = sath("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 20:
    // A2_satub
    O << " = satub("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 21:
    // A2_satuh
    O << " = satuh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 22:
    // A2_sub, A2_subh_h16_hh, A2_subh_h16_hl, A2_subh_h16_lh, A2_subh_h16_ll...
    O << " = sub("; 
    break;
  case 23:
    // A2_subri, S4_subi_asl_ri, S4_subi_lsr_ri
    O << " = sub(#"; 
    printExtOperand(MI, 1, O); 
    break;
  case 24:
    // A2_svaddh, A2_svaddhs, A2_vaddh, A2_vaddhs
    O << " = vaddh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 25:
    // A2_svadduhs, A2_vadduhs
    O << " = vadduh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 26:
    // A2_svavgh, A2_svavghs, A2_vavgh, A2_vavghcr, A2_vavghr
    O << " = vavgh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 27:
    // A2_svnavgh, A2_vnavgh, A2_vnavghcr, A2_vnavghr
    O << " = vnavgh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 28:
    // A2_svsubh, A2_svsubhs, A2_vsubh, A2_vsubhs
    O << " = vsubh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 29:
    // A2_svsubuhs, A2_vsubuhs
    O << " = vsubuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 30:
    // A2_swiz
    O << " = swiz("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 31:
    // A2_sxtb
    O << " = sxtb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 32:
    // A2_sxth
    O << " = sxth("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 33:
    // A2_sxtw
    O << " = sxtw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 34:
    // A2_tfr, A2_tfrcrr, A2_tfrp, A2_tfrrcr, A4_tfrcpp, A4_tfrpcp, ARGEXTEND...
    O << " = "; 
    printOperand(MI, 1, O); 
    break;
  case 35:
    // A2_tfrih
    O << ".h = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 36:
    // A2_tfril
    O << ".l = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 37:
    // A2_tfrpi, A2_tfrsi, J4_jumpseti, S4_storerb_ap, S4_storerbnew_ap, S4_s...
    O << " = #"; 
    break;
  case 38:
    // A2_vabsh, A2_vabshsat
    O << " = vabsh("; 
    printOperand(MI, 1, O); 
    break;
  case 39:
    // A2_vabsw, A2_vabswsat
    O << " = vabsw("; 
    printOperand(MI, 1, O); 
    break;
  case 40:
    // A2_vaddub, A2_vaddubs
    O << " = vaddub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 41:
    // A2_vaddw, A2_vaddws
    O << " = vaddw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 42:
    // A2_vavgub, A2_vavgubr
    O << " = vavgub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 43:
    // A2_vavguh, A2_vavguhr
    O << " = vavguh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 44:
    // A2_vavguw, A2_vavguwr
    O << " = vavguw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 45:
    // A2_vavgw, A2_vavgwcr, A2_vavgwr
    O << " = vavgw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 46:
    // A2_vcmpbeq, A4_vcmpbeqi
    O << " = vcmpb.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 47:
    // A2_vcmpbgtu, A4_vcmpbgtui
    O << " = vcmpb.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 48:
    // A2_vcmpheq, A4_vcmpheqi
    O << " = vcmph.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 49:
    // A2_vcmphgt, A4_vcmphgti
    O << " = vcmph.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 50:
    // A2_vcmphgtu, A4_vcmphgtui
    O << " = vcmph.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 51:
    // A2_vcmpweq, A4_vcmpweqi
    O << " = vcmpw.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 52:
    // A2_vcmpwgt, A4_vcmpwgti
    O << " = vcmpw.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 53:
    // A2_vcmpwgtu, A4_vcmpwgtui
    O << " = vcmpw.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 54:
    // A2_vconj
    O << " = vconj("; 
    printOperand(MI, 1, O); 
    O << "):sat"; 
    return;
    break;
  case 55:
    // A2_vmaxb
    O << " = vmaxb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 56:
    // A2_vmaxh
    O << " = vmaxh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 57:
    // A2_vmaxub
    O << " = vmaxub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 58:
    // A2_vmaxuh
    O << " = vmaxuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 59:
    // A2_vmaxuw
    O << " = vmaxuw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 60:
    // A2_vmaxw
    O << " = vmaxw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 61:
    // A2_vminb
    O << " = vminb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 62:
    // A2_vminh
    O << " = vminh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 63:
    // A2_vminub
    O << " = vminub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 64:
    // A2_vminuh
    O << " = vminuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 65:
    // A2_vminuw
    O << " = vminuw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 66:
    // A2_vminw
    O << " = vminw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 67:
    // A2_vnavgw, A2_vnavgwcr, A2_vnavgwr
    O << " = vnavgw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 68:
    // A2_vraddub
    O << " = vraddub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 69:
    // A2_vraddub_acc
    O << " += vraddub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 70:
    // A2_vrsadub
    O << " = vrsadub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 71:
    // A2_vrsadub_acc
    O << " += vrsadub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 72:
    // A2_vsubub, A2_vsububs
    O << " = vsubub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 73:
    // A2_vsubw, A2_vsubws
    O << " = vsubw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 74:
    // A2_xor, A2_xorp, C2_xor, TFR_PdFalse
    O << " = xor("; 
    break;
  case 75:
    // A2_zxtb
    O << " = zxtb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 76:
    // A2_zxth
    O << " = zxth("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 77:
    // A4_bitsplit, A4_bitspliti
    O << " = bitsplit("; 
    printOperand(MI, 1, O); 
    break;
  case 78:
    // A4_boundscheck
    O << "=boundscheck("; 
    printOperand(MI, 1, O); 
    O << ','; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 79:
    // A4_boundscheck_hi, A4_boundscheck_lo
    O << " = boundscheck("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 80:
    // A4_cmpbeq, A4_cmpbeqi
    O << " = cmpb.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 81:
    // A4_cmpbgt, A4_cmpbgti
    O << " = cmpb.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 82:
    // A4_cmpbgtu, A4_cmpbgtui
    O << " = cmpb.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 83:
    // A4_cmpheq, A4_cmpheqi
    O << " = cmph.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 84:
    // A4_cmphgt, A4_cmphgti
    O << " = cmph.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 85:
    // A4_cmphgtu, A4_cmphgtui
    O << " = cmph.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 86:
    // A4_cround_ri, A4_cround_rr
    O << " = cround("; 
    printOperand(MI, 1, O); 
    break;
  case 87:
    // A4_ext, A4_ext_b, A4_ext_c, A4_ext_g, J4_hintjumpr, S2_allocframe, Y4_...
    O << ')'; 
    return;
    break;
  case 88:
    // A4_modwrapu
    O << " = modwrap("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 89:
    // A4_rcmpeq, A4_rcmpeqi, C2_cmpeq, C2_cmpeqi, C2_cmpeqp
    O << " = cmp.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 90:
    // A4_rcmpneq, A4_rcmpneqi, C4_cmpneq, C4_cmpneqi
    O << " = !cmp.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 91:
    // A4_tlbmatch
    O << " = tlbmatch("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 92:
    // A4_vcmpbeq_any
    O << " = any8(vcmpb.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "))"; 
    return;
    break;
  case 93:
    // A4_vcmpbgt, A4_vcmpbgti
    O << " = vcmpb.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 94:
    // A4_vrmaxh
    O << " = vrmaxh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 95:
    // A4_vrmaxuh
    O << " = vrmaxuh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 96:
    // A4_vrmaxuw
    O << " = vrmaxuw("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 97:
    // A4_vrmaxw
    O << " = vrmaxw("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 98:
    // A4_vrminh
    O << " = vrminh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 99:
    // A4_vrminuh
    O << " = vrminuh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 100:
    // A4_vrminuw
    O << " = vrminuw("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 101:
    // A4_vrminw
    O << " = vrminw("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 102:
    // A5_vaddhubs
    O << " = vaddhub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 103:
    // C2_all8
    O << " = all8("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 104:
    // C2_any8
    O << " = any8("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 105:
    // C2_bitsclr, C2_bitsclri
    O << " = bitsclr("; 
    printOperand(MI, 1, O); 
    break;
  case 106:
    // C2_bitsset
    O << " = bitsset("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 107:
    // C2_cmpgei
    O << " = cmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 108:
    // C2_cmpgeui
    O << " = cmp.geu("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 109:
    // C2_cmpgt, C2_cmpgti, C2_cmpgtp
    O << " = cmp.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 110:
    // C2_cmpgtu, C2_cmpgtui, C2_cmpgtup
    O << " = cmp.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 111:
    // C2_mask
    O << " = mask("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 112:
    // C2_mux, C2_muxii, C2_muxir, C2_muxri, MUX_ir_f, MUX_ri_f
    O << " = mux("; 
    printOperand(MI, 1, O); 
    break;
  case 113:
    // C2_vitpack
    O << " = vitpack("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 114:
    // C2_vmux
    O << " = vmux("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 115:
    // C4_addipc
    O << " = add(pc, #"; 
    printExtOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 116:
    // C4_cmplte, C4_cmpltei
    O << " = !cmp.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 117:
    // C4_cmplteu, C4_cmplteui
    O << " = !cmp.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 118:
    // C4_fastcorner9
    O << " = fastcorner9("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 119:
    // C4_fastcorner9_not
    O << " = !fastcorner9("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 120:
    // C4_nbitsclr, C4_nbitsclri
    O << " = !bitsclr("; 
    printOperand(MI, 1, O); 
    break;
  case 121:
    // C4_nbitsset
    O << " = !bitsset("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 122:
    // CALLRv3nr, CALLv3nr, EH_RETURN_JMPR, J2_call, J2_callr, J2_jump, J2_ju...
    return;
    break;
  case 123:
    // CONST32, CONST32_Float_Real, CONST32_Int_Real, CONST32_set_jt, FCONST3...
    O << " = CONST32(#"; 
    break;
  case 124:
    // CONST32_Label
    O << " = CONST32("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 125:
    // CONST64_Float_Real, CONST64_Int_Real
    O << " = CONST64(#"; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 126:
    // F2_conv_d2df
    O << " = convert_d2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 127:
    // F2_conv_d2sf
    O << " = convert_d2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 128:
    // F2_conv_df2d, F2_conv_df2d_chop
    O << " = convert_df2d("; 
    printOperand(MI, 1, O); 
    break;
  case 129:
    // F2_conv_df2sf
    O << " = convert_df2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 130:
    // F2_conv_df2ud, F2_conv_df2ud_chop
    O << " = convert_df2ud("; 
    printOperand(MI, 1, O); 
    break;
  case 131:
    // F2_conv_df2uw, F2_conv_df2uw_chop
    O << " = convert_df2uw("; 
    printOperand(MI, 1, O); 
    break;
  case 132:
    // F2_conv_df2w, F2_conv_df2w_chop
    O << " = convert_df2w("; 
    printOperand(MI, 1, O); 
    break;
  case 133:
    // F2_conv_sf2d, F2_conv_sf2d_chop
    O << " = convert_sf2d("; 
    printOperand(MI, 1, O); 
    break;
  case 134:
    // F2_conv_sf2df
    O << " = convert_sf2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 135:
    // F2_conv_sf2ud, F2_conv_sf2ud_chop
    O << " = convert_sf2ud("; 
    printOperand(MI, 1, O); 
    break;
  case 136:
    // F2_conv_sf2uw, F2_conv_sf2uw_chop
    O << " = convert_sf2uw("; 
    printOperand(MI, 1, O); 
    break;
  case 137:
    // F2_conv_sf2w, F2_conv_sf2w_chop
    O << " = convert_sf2w("; 
    printOperand(MI, 1, O); 
    break;
  case 138:
    // F2_conv_ud2df
    O << " = convert_ud2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 139:
    // F2_conv_ud2sf
    O << " = convert_ud2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 140:
    // F2_conv_uw2df
    O << " = convert_uw2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 141:
    // F2_conv_uw2sf
    O << " = convert_uw2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 142:
    // F2_conv_w2df
    O << " = convert_w2df("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 143:
    // F2_conv_w2sf
    O << " = convert_w2sf("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 144:
    // F2_dfclass
    O << " = dfclass("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 145:
    // F2_dfcmpeq
    O << " = dfcmp.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 146:
    // F2_dfcmpge
    O << " = dfcmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 147:
    // F2_dfcmpgt
    O << " = dfcmp.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 148:
    // F2_dfcmpuo
    O << " = dfcmp.uo("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 149:
    // F2_dfimm_n, F2_dfimm_p
    O << " = dfmake(#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 150:
    // F2_sfadd
    O << " = sfadd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 151:
    // F2_sfclass
    O << " = sfclass("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 152:
    // F2_sfcmpeq
    O << " = sfcmp.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 153:
    // F2_sfcmpge
    O << " = sfcmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 154:
    // F2_sfcmpgt
    O << " = sfcmp.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 155:
    // F2_sfcmpuo
    O << " = sfcmp.uo("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 156:
    // F2_sffixupd
    O << " = sffixupd("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 157:
    // F2_sffixupn
    O << " = sffixupn("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 158:
    // F2_sffixupr
    O << " = sffixupr("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 159:
    // F2_sffma, F2_sffma_lib, F2_sffma_sc
    O << " += sfmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 160:
    // F2_sffms, F2_sffms_lib
    O << " -= sfmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 161:
    // F2_sfimm_n, F2_sfimm_p
    O << " = sfmake(#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 162:
    // F2_sfinvsqrta, F2_sfrecipa, J2_loop0r, J2_loop0rext, J2_loop1r, J2_loo...
    O << ", "; 
    break;
  case 163:
    // F2_sfmax
    O << " = sfmax("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 164:
    // F2_sfmin
    O << " = sfmin("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 165:
    // F2_sfmpy
    O << " = sfmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 166:
    // F2_sfsub
    O << " = sfsub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 167:
    // HI, HI_GOT, HI_GOTREL, HI_PIC
    O << ".h = #HI("; 
    break;
  case 168:
    // HI_L
    O << ".h = #LO("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 169:
    // J2_callf, J2_callt
    O << ") call "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 170:
    // J2_callrf, J2_callrt
    O << ") callr "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 171:
    // J2_jump_extf, J2_jump_extt
    O << ") jump ##"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 172:
    // J2_jump_extfnew, J2_jump_exttnew
    O << ".new) jump:nt ##"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 173:
    // J2_jump_extfnewpt, J2_jump_exttnewpt
    O << ".new) jump:t ##"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 174:
    // J2_jump_noextf, J2_jump_noextt
    O << ") jump #"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 175:
    // J2_jump_noextfnew, J2_jump_noexttnew
    O << ".new) jump:nt #"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 176:
    // J2_jump_noextfnewpt, J2_jump_noexttnewpt
    O << ".new) jump:t #"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 177:
    // J2_jumpf, J2_jumpt
    O << ") jump "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 178:
    // J2_jumpfnew, J2_jumptnew
    O << ".new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 179:
    // J2_jumpfnewpt, J2_jumptnewpt
    O << ".new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 180:
    // J2_jumprf, J2_jumprt, JMPretf, JMPrett
    O << ") jumpr "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 181:
    // J2_jumprfnew, J2_jumprtnew, JMPretfnew, JMPrettnew
    O << ".new) jumpr:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 182:
    // J2_jumprfnewpt, J2_jumprtnewpt, JMPretfnewpt, JMPrettnewpt
    O << ".new) jumpr:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 183:
    // J2_jumprgtez
    O << ">=#0) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 184:
    // J2_jumprgtezpt
    O << ">=#0) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 185:
    // J2_jumprltez
    O << "<=#0) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 186:
    // J2_jumprltezpt
    O << "<=#0) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 187:
    // J2_jumprnz
    O << "==#0) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 188:
    // J2_jumprnzpt
    O << "==#0) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 189:
    // J2_jumprz
    O << "!=#0) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 190:
    // J2_jumprzpt
    O << "!=#0) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 191:
    // J2_loop0i, J2_loop0iext, J2_loop1i, J2_loop1iext, J2_ploop1si, J2_ploo...
    O << ", #"; 
    printImmOperand(MI, 1, O); 
    break;
  case 192:
    // J4_cmpeq_f_jumpnv_nt, J4_cmpeq_f_jumpnv_t, J4_cmpeq_t_jumpnv_nt, J4_cm...
    O << ".new, "; 
    printOperand(MI, 1, O); 
    break;
  case 193:
    // J4_cmpeqi_f_jumpnv_nt, J4_cmpeqi_f_jumpnv_t, J4_cmpeqi_t_jumpnv_nt, J4...
    O << ".new, #"; 
    printImmOperand(MI, 1, O); 
    break;
  case 194:
    // J4_cmpeqn1_f_jumpnv_nt, J4_cmpeqn1_t_jumpnv_nt, J4_cmpgtn1_f_jumpnv_nt...
    O << ".new, #-1)) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 195:
    // J4_cmpeqn1_f_jumpnv_t, J4_cmpeqn1_t_jumpnv_t, J4_cmpgtn1_f_jumpnv_t, J...
    O << ".new, #-1)) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 196:
    // J4_cmpeqn1_fp0_jump_nt, J4_cmpgtn1_fp0_jump_nt
    O << ",#-1); if (!p0.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 197:
    // J4_cmpeqn1_fp0_jump_t, J4_cmpgtn1_fp0_jump_t
    O << ",#-1); if (!p0.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 198:
    // J4_cmpeqn1_fp1_jump_nt, J4_cmpgtn1_fp1_jump_nt
    O << ",#-1); if (!p1.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 199:
    // J4_cmpeqn1_fp1_jump_t, J4_cmpgtn1_fp1_jump_t
    O << ",#-1); if (!p1.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 200:
    // J4_cmpeqn1_tp0_jump_nt, J4_cmpgtn1_tp0_jump_nt
    O << ",#-1); if (p0.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 201:
    // J4_cmpeqn1_tp0_jump_t, J4_cmpgtn1_tp0_jump_t
    O << ",#-1); if (p0.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 202:
    // J4_cmpeqn1_tp1_jump_nt, J4_cmpgtn1_tp1_jump_nt
    O << ",#-1); if (p1.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 203:
    // J4_cmpeqn1_tp1_jump_t, J4_cmpgtn1_tp1_jump_t
    O << ",#-1); if (p1.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 204:
    // J4_tstbit0_f_jumpnv_nt, J4_tstbit0_t_jumpnv_nt
    O << ".new, #0)) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 205:
    // J4_tstbit0_f_jumpnv_t, J4_tstbit0_t_jumpnv_t
    O << ".new, #0)) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 206:
    // J4_tstbit0_fp0_jump_nt
    O << ", #0); if (!p0.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 207:
    // J4_tstbit0_fp0_jump_t
    O << ", #0); if (!p0.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 208:
    // J4_tstbit0_fp1_jump_nt
    O << ", #0); if (!p1.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 209:
    // J4_tstbit0_fp1_jump_t
    O << ", #0); if (!p1.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 210:
    // J4_tstbit0_tp0_jump_nt
    O << ", #0); if (p0.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 211:
    // J4_tstbit0_tp0_jump_t
    O << ", #0); if (p0.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 212:
    // J4_tstbit0_tp1_jump_nt
    O << ", #0); if (p1.new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 213:
    // J4_tstbit0_tp1_jump_t
    O << ", #0); if (p1.new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 214:
    // L2_loadalignb_io, L2_loadalignb_pbr, L2_loadalignb_pci, L2_loadalignb_...
    O << " = memb_fifo("; 
    break;
  case 215:
    // L2_loadalignh_io, L2_loadalignh_pbr, L2_loadalignh_pci, L2_loadalignh_...
    O << " = memh_fifo("; 
    break;
  case 216:
    // L2_loadbsw2_io, L2_loadbsw2_pbr, L2_loadbsw2_pci, L2_loadbsw2_pcr, L2_...
    O << " = membh("; 
    break;
  case 217:
    // L2_loadbzw2_io, L2_loadbzw2_pbr, L2_loadbzw2_pci, L2_loadbzw2_pcr, L2_...
    O << " = memubh("; 
    break;
  case 218:
    // L2_loadrb_io, L2_loadrb_pbr, L2_loadrb_pbr_pseudo, L2_loadrb_pci, L2_l...
    O << " = memb("; 
    break;
  case 219:
    // L2_loadrbgp
    O << " = memb(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 220:
    // L2_loadrd_io, L2_loadrd_pbr, L2_loadrd_pbr_pseudo, L2_loadrd_pci, L2_l...
    O << " = memd("; 
    break;
  case 221:
    // L2_loadrdgp
    O << " = memd(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 222:
    // L2_loadrh_io, L2_loadrh_pbr, L2_loadrh_pbr_pseudo, L2_loadrh_pci, L2_l...
    O << " = memh("; 
    break;
  case 223:
    // L2_loadrhgp
    O << " = memh(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 224:
    // L2_loadri_io, L2_loadri_pbr, L2_loadri_pbr_pseudo, L2_loadri_pci, L2_l...
    O << " = memw("; 
    break;
  case 225:
    // L2_loadrigp
    O << " = memw(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 226:
    // L2_loadrub_io, L2_loadrub_pbr, L2_loadrub_pbr_pseudo, L2_loadrub_pci, ...
    O << " = memub("; 
    break;
  case 227:
    // L2_loadrubgp
    O << " = memub(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 228:
    // L2_loadruh_io, L2_loadruh_pbr, L2_loadruh_pbr_pseudo, L2_loadruh_pci, ...
    O << " = memuh("; 
    break;
  case 229:
    // L2_loadruhgp
    O << " = memuh(#"; 
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 230:
    // L2_loadw_locked
    O << " = memw_locked("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 231:
    // L4_add_memopb_io, L4_add_memoph_io, L4_add_memopw_io, L4_and_memopb_io...
    O << "+#"; 
    break;
  case 232:
    // L4_loadd_locked
    O << " = memd_locked("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 233:
    // L4_loadrb_abs
    O << " = memb(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 234:
    // L4_loadrd_abs
    O << " = memd(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 235:
    // L4_loadrh_abs
    O << " = memh(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 236:
    // L4_loadri_abs
    O << " = memw(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 237:
    // L4_loadrub_abs
    O << " = memub(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 238:
    // L4_loadruh_abs
    O << " = memuh(##"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 239:
    // L4_return_f, L4_return_t
    O << ") dealloc_return"; 
    return;
    break;
  case 240:
    // L4_return_fnew_pnt, L4_return_tnew_pnt
    O << ".new) dealloc_return:nt"; 
    return;
    break;
  case 241:
    // L4_return_fnew_pt, L4_return_tnew_pt
    O << ".new) dealloc_return:t"; 
    return;
    break;
  case 242:
    // LO, LO_GOT, LO_GOTREL, LO_PIC
    O << ".l = #LO("; 
    break;
  case 243:
    // LO_H
    O << ".l = #HI("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 244:
    // M2_acci, M2_accii
    O << " += add("; 
    printOperand(MI, 2, O); 
    break;
  case 245:
    // M2_cmaci_s0
    O << " += cmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 246:
    // M2_cmacr_s0
    O << " += cmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 247:
    // M2_cmacs_s0, M2_cmacs_s1, M2_cmacsc_s0, M2_cmacsc_s1
    O << " += cmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 248:
    // M2_cmpyi_s0
    O << " = cmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 249:
    // M2_cmpyr_s0
    O << " = cmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 250:
    // M2_cmpyrs_s0, M2_cmpyrs_s1, M2_cmpyrsc_s0, M2_cmpyrsc_s1, M2_cmpys_s0,...
    O << " = cmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 251:
    // M2_cnacs_s0, M2_cnacs_s1, M2_cnacsc_s0, M2_cnacsc_s1
    O << " -= cmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 252:
    // M2_dpmpyss_acc_s0, M2_mpy_acc_hh_s0, M2_mpy_acc_hh_s1, M2_mpy_acc_hl_s...
    O << " += mpy("; 
    printOperand(MI, 2, O); 
    break;
  case 253:
    // M2_dpmpyss_nac_s0, M2_mpy_nac_hh_s0, M2_mpy_nac_hh_s1, M2_mpy_nac_hl_s...
    O << " -= mpy("; 
    printOperand(MI, 2, O); 
    break;
  case 254:
    // M2_dpmpyss_rnd_s0, M2_dpmpyss_s0, M2_hmmpyh_rs1, M2_hmmpyh_s1, M2_hmmp...
    O << " = mpy("; 
    printOperand(MI, 1, O); 
    break;
  case 255:
    // M2_dpmpyuu_acc_s0, M2_mpyu_acc_hh_s0, M2_mpyu_acc_hh_s1, M2_mpyu_acc_h...
    O << " += mpyu("; 
    printOperand(MI, 2, O); 
    break;
  case 256:
    // M2_dpmpyuu_nac_s0, M2_mpyu_nac_hh_s0, M2_mpyu_nac_hh_s1, M2_mpyu_nac_h...
    O << " -= mpyu("; 
    printOperand(MI, 2, O); 
    break;
  case 257:
    // M2_dpmpyuu_s0, M2_mpyu_hh_s0, M2_mpyu_hh_s1, M2_mpyu_hl_s0, M2_mpyu_hl...
    O << " = mpyu("; 
    printOperand(MI, 1, O); 
    break;
  case 258:
    // M2_maci, M2_macsip
    O << " += mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 259:
    // M2_macsin
    O << " -= mpyi("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printExtOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 260:
    // M2_mmachs_rs0, M2_mmachs_rs1, M2_mmachs_s0, M2_mmachs_s1
    O << " += vmpywoh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 261:
    // M2_mmacls_rs0, M2_mmacls_rs1, M2_mmacls_s0, M2_mmacls_s1
    O << " += vmpyweh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 262:
    // M2_mmacuhs_rs0, M2_mmacuhs_rs1, M2_mmacuhs_s0, M2_mmacuhs_s1
    O << " += vmpywouh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 263:
    // M2_mmaculs_rs0, M2_mmaculs_rs1, M2_mmaculs_s0, M2_mmaculs_s1
    O << " += vmpyweuh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 264:
    // M2_mmpyh_rs0, M2_mmpyh_rs1, M2_mmpyh_s0, M2_mmpyh_s1
    O << " = vmpywoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 265:
    // M2_mmpyl_rs0, M2_mmpyl_rs1, M2_mmpyl_s0, M2_mmpyl_s1
    O << " = vmpyweh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 266:
    // M2_mmpyuh_rs0, M2_mmpyuh_rs1, M2_mmpyuh_s0, M2_mmpyuh_s1
    O << " = vmpywouh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 267:
    // M2_mmpyul_rs0, M2_mmpyul_rs1, M2_mmpyul_s0, M2_mmpyul_s1
    O << " = vmpyweuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 268:
    // M2_mpyi, M2_mpysmi
    O << " = mpyi("; 
    printOperand(MI, 1, O); 
    break;
  case 269:
    // M2_mpysin
    O << " =- mpyi("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 270:
    // M2_mpysip
    O << " =+ mpyi("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 271:
    // M2_mpysu_up
    O << " = mpysu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 272:
    // M2_mpyui
    O << " = mpyui("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 273:
    // M2_nacci, M2_naccii
    O << " -= add("; 
    printOperand(MI, 2, O); 
    break;
  case 274:
    // M2_subacc
    O << " += sub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 275:
    // M2_vabsdiffh
    O << " = vabsdiffh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 276:
    // M2_vabsdiffw
    O << " = vabsdiffw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 277:
    // M2_vcmac_s0_sat_i
    O << " += vcmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 278:
    // M2_vcmac_s0_sat_r
    O << " += vcmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 279:
    // M2_vcmpy_s0_sat_i, M2_vcmpy_s1_sat_i
    O << " = vcmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 280:
    // M2_vcmpy_s0_sat_r, M2_vcmpy_s1_sat_r
    O << " = vcmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 281:
    // M2_vdmacs_s0, M2_vdmacs_s1
    O << " += vdmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 282:
    // M2_vdmpyrs_s0, M2_vdmpyrs_s1, M2_vdmpys_s0, M2_vdmpys_s1
    O << " = vdmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 283:
    // M2_vmac2, M2_vmac2s_s0, M2_vmac2s_s1
    O << " += vmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 284:
    // M2_vmac2es, M2_vmac2es_s0, M2_vmac2es_s1
    O << " += vmpyeh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 285:
    // M2_vmac2su_s0, M2_vmac2su_s1
    O << " += vmpyhsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 286:
    // M2_vmpy2es_s0, M2_vmpy2es_s1
    O << " = vmpyeh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 287:
    // M2_vmpy2s_s0, M2_vmpy2s_s0pack, M2_vmpy2s_s1, M2_vmpy2s_s1pack
    O << " = vmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 288:
    // M2_vmpy2su_s0, M2_vmpy2su_s1
    O << " = vmpyhsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 289:
    // M2_vraddh
    O << " = vraddh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 290:
    // M2_vradduh
    O << " = vradduh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 291:
    // M2_vrcmaci_s0, M2_vrcmaci_s0c
    O << " += vrcmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 292:
    // M2_vrcmacr_s0, M2_vrcmacr_s0c
    O << " += vrcmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 293:
    // M2_vrcmpyi_s0, M2_vrcmpyi_s0c
    O << " = vrcmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 294:
    // M2_vrcmpyr_s0, M2_vrcmpyr_s0c
    O << " = vrcmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 295:
    // M2_vrcmpys_acc_s1, M2_vrcmpys_acc_s1_h, M2_vrcmpys_acc_s1_l
    O << " += vrcmpys("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 296:
    // M2_vrcmpys_s1, M2_vrcmpys_s1rp
    O << "=vrcmpys("; 
    printOperand(MI, 1, O); 
    O << ','; 
    printOperand(MI, 2, O); 
    break;
  case 297:
    // M2_vrcmpys_s1_h, M2_vrcmpys_s1_l, M2_vrcmpys_s1rp_h, M2_vrcmpys_s1rp_l
    O << " = vrcmpys("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 298:
    // M2_vrmac_s0
    O << " += vrmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 299:
    // M2_vrmpy_s0
    O << " = vrmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 300:
    // M2_xor_xacc, M4_xor_xacc
    O << " ^= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 301:
    // M4_and_and, M4_and_andn
    O << " &= and("; 
    printOperand(MI, 2, O); 
    break;
  case 302:
    // M4_and_or
    O << " &= or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 303:
    // M4_and_xor
    O << " &= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 304:
    // M4_cmpyi_wh, M4_cmpyi_whc
    O << " = cmpyiwh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 305:
    // M4_cmpyr_wh, M4_cmpyr_whc
    O << " = cmpyrwh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 306:
    // M4_mpyri_addi, M4_mpyrr_addi, S4_addi_asl_ri, S4_addi_lsr_ri
    O << " = add(#"; 
    printExtOperand(MI, 1, O); 
    break;
  case 307:
    // M4_or_and, M4_or_andn, S4_or_andi
    O << " |= and("; 
    printOperand(MI, 2, O); 
    break;
  case 308:
    // M4_or_or, S4_or_ori
    O << " |= or("; 
    printOperand(MI, 2, O); 
    break;
  case 309:
    // M4_or_xor
    O << " |= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 310:
    // M4_pmpyw
    O << " = pmpyw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 311:
    // M4_pmpyw_acc
    O << " ^= pmpyw("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 312:
    // M4_vpmpyh
    O << " = vpmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 313:
    // M4_vpmpyh_acc
    O << " ^= vpmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 314:
    // M4_vrmpyeh_acc_s0, M4_vrmpyeh_acc_s1
    O << " += vrmpyweh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 315:
    // M4_vrmpyeh_s0, M4_vrmpyeh_s1
    O << " = vrmpyweh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 316:
    // M4_vrmpyoh_acc_s0, M4_vrmpyoh_acc_s1
    O << " += vrmpywoh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 317:
    // M4_vrmpyoh_s0, M4_vrmpyoh_s1
    O << " = vrmpywoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 318:
    // M4_xor_and, M4_xor_andn
    O << " ^= and("; 
    printOperand(MI, 2, O); 
    break;
  case 319:
    // M4_xor_or
    O << " ^= or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 320:
    // M5_vdmacbsu
    O << " += vdmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 321:
    // M5_vdmpybsu
    O << " = vdmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 322:
    // M5_vmacbsu
    O << " += vmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 323:
    // M5_vmacbuu
    O << " += vmpybu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 324:
    // M5_vmpybsu
    O << " = vmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 325:
    // M5_vmpybuu
    O << " = vmpybu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 326:
    // M5_vrmacbsu
    O << " += vrmpybsu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 327:
    // M5_vrmacbuu
    O << " += vrmpybu("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 328:
    // M5_vrmpybsu
    O << " = vrmpybsu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 329:
    // M5_vrmpybuu
    O << " = vrmpybu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 330:
    // S2_addasl_rrri
    O << " = addasl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 331:
    // S2_asl_i_p, S2_asl_i_r, S2_asl_i_r_sat, S2_asl_r_p, S2_asl_r_r, S2_asl...
    O << " = asl("; 
    printOperand(MI, 1, O); 
    break;
  case 332:
    // S2_asl_i_p_acc, S2_asl_i_r_acc, S2_asl_r_p_acc, S2_asl_r_r_acc
    O << " += asl("; 
    printOperand(MI, 2, O); 
    break;
  case 333:
    // S2_asl_i_p_and, S2_asl_i_r_and, S2_asl_r_p_and, S2_asl_r_r_and
    O << " &= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 334:
    // S2_asl_i_p_nac, S2_asl_i_r_nac, S2_asl_r_p_nac, S2_asl_r_r_nac
    O << " -= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 335:
    // S2_asl_i_p_or, S2_asl_i_r_or, S2_asl_r_p_or, S2_asl_r_r_or
    O << " |= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 336:
    // S2_asl_i_p_xacc, S2_asl_i_r_xacc, S2_asl_r_p_xor
    O << " ^= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 337:
    // S2_asl_i_vh, S2_asl_r_vh
    O << " = vaslh("; 
    printOperand(MI, 1, O); 
    break;
  case 338:
    // S2_asl_i_vw, S2_asl_r_vw
    O << " = vaslw("; 
    printOperand(MI, 1, O); 
    break;
  case 339:
    // S2_asr_i_p, S2_asr_i_p_rnd, S2_asr_i_r, S2_asr_i_r_rnd, S2_asr_r_p, S2...
    O << " = asr("; 
    printOperand(MI, 1, O); 
    break;
  case 340:
    // S2_asr_i_p_acc, S2_asr_i_r_acc, S2_asr_r_p_acc, S2_asr_r_r_acc
    O << " += asr("; 
    printOperand(MI, 2, O); 
    break;
  case 341:
    // S2_asr_i_p_and, S2_asr_i_r_and, S2_asr_r_p_and, S2_asr_r_r_and
    O << " &= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 342:
    // S2_asr_i_p_nac, S2_asr_i_r_nac, S2_asr_r_p_nac, S2_asr_r_r_nac
    O << " -= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 343:
    // S2_asr_i_p_or, S2_asr_i_r_or, S2_asr_r_p_or, S2_asr_r_r_or
    O << " |= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 344:
    // S2_asr_i_p_rnd_goodsyntax, S2_asr_i_r_rnd_goodsyntax
    O << " = asrrnd("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 345:
    // S2_asr_i_svw_trun, S2_asr_i_vw, S2_asr_r_svw_trun, S2_asr_r_vw
    O << " = vasrw("; 
    printOperand(MI, 1, O); 
    break;
  case 346:
    // S2_asr_i_vh, S2_asr_r_vh, S5_vasrhrnd, S5_vasrhrnd_goodsyntax
    O << " = vasrh("; 
    printOperand(MI, 1, O); 
    break;
  case 347:
    // S2_asr_r_p_xor
    O << " ^= asr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 348:
    // S2_brev, S2_brevp
    O << " = brev("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 349:
    // S2_cabacdecbin
    O << " = decbin("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 350:
    // S2_cl0, S2_cl0p
    O << " = cl0("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 351:
    // S2_cl1, S2_cl1p
    O << " = cl1("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 352:
    // S2_clb, S2_clbp
    O << " = clb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 353:
    // S2_clbnorm, S4_clbpnorm
    O << " = normamt("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 354:
    // S2_clrbit_i, S2_clrbit_r
    O << " = clrbit("; 
    printOperand(MI, 1, O); 
    break;
  case 355:
    // S2_ct0, S2_ct0p
    O << " = ct0("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 356:
    // S2_ct1, S2_ct1p
    O << " = ct1("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 357:
    // S2_deinterleave
    O << " = deinterleave("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 358:
    // S2_extractu, S2_extractu_rp, S2_extractup, S2_extractup_rp
    O << " = extractu("; 
    printOperand(MI, 1, O); 
    break;
  case 359:
    // S2_insert, S2_insert_rp, S2_insertp, S2_insertp_rp
    O << " = insert("; 
    printOperand(MI, 2, O); 
    break;
  case 360:
    // S2_interleave
    O << " = interleave("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 361:
    // S2_lfsp
    O << " = lfs("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 362:
    // S2_lsl_r_p, S2_lsl_r_r
    O << " = lsl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 363:
    // S2_lsl_r_p_acc, S2_lsl_r_r_acc
    O << " += lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 364:
    // S2_lsl_r_p_and, S2_lsl_r_r_and
    O << " &= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 365:
    // S2_lsl_r_p_nac, S2_lsl_r_r_nac
    O << " -= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 366:
    // S2_lsl_r_p_or, S2_lsl_r_r_or
    O << " |= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 367:
    // S2_lsl_r_p_xor
    O << " ^= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 368:
    // S2_lsl_r_vh
    O << " = vlslh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 369:
    // S2_lsl_r_vw
    O << " = vlslw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 370:
    // S2_lsr_i_p, S2_lsr_i_r, S2_lsr_r_p, S2_lsr_r_r
    O << " = lsr("; 
    printOperand(MI, 1, O); 
    break;
  case 371:
    // S2_lsr_i_p_acc, S2_lsr_i_r_acc, S2_lsr_r_p_acc, S2_lsr_r_r_acc
    O << " += lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 372:
    // S2_lsr_i_p_and, S2_lsr_i_r_and, S2_lsr_r_p_and, S2_lsr_r_r_and
    O << " &= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 373:
    // S2_lsr_i_p_nac, S2_lsr_i_r_nac, S2_lsr_r_p_nac, S2_lsr_r_r_nac
    O << " -= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 374:
    // S2_lsr_i_p_or, S2_lsr_i_r_or, S2_lsr_r_p_or, S2_lsr_r_r_or
    O << " |= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 375:
    // S2_lsr_i_p_xacc, S2_lsr_i_r_xacc, S2_lsr_r_p_xor
    O << " ^= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 376:
    // S2_lsr_i_vh, S2_lsr_r_vh
    O << " = vlsrh("; 
    printOperand(MI, 1, O); 
    break;
  case 377:
    // S2_lsr_i_vw, S2_lsr_r_vw
    O << " = vlsrw("; 
    printOperand(MI, 1, O); 
    break;
  case 378:
    // S2_packhl, dep_S2_packhl
    O << " = packhl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 379:
    // S2_parityp, S4_parity
    O << " = parity("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 380:
    // S2_pstorerbf_io, S2_pstorerbf_pi, S2_pstorerbnewf_io, S2_pstorerbnewf_...
    O << ") memb("; 
    break;
  case 381:
    // S2_pstorerbfnew_pi, S2_pstorerbnewfnew_pi, S2_pstorerbnewtnew_pi, S2_p...
    O << ".new) memb("; 
    break;
  case 382:
    // S2_pstorerdf_io, S2_pstorerdf_pi, S2_pstorerdt_io, S2_pstorerdt_pi, S4...
    O << ") memd("; 
    break;
  case 383:
    // S2_pstorerdfnew_pi, S2_pstorerdtnew_pi, S4_pstorerdfnew_io, S4_pstorer...
    O << ".new) memd("; 
    break;
  case 384:
    // S2_pstorerff_io, S2_pstorerff_pi, S2_pstorerft_io, S2_pstorerft_pi, S2...
    O << ") memh("; 
    break;
  case 385:
    // S2_pstorerffnew_pi, S2_pstorerftnew_pi, S2_pstorerhfnew_pi, S2_pstorer...
    O << ".new) memh("; 
    break;
  case 386:
    // S2_pstorerif_io, S2_pstorerif_pi, S2_pstorerinewf_io, S2_pstorerinewf_...
    O << ") memw("; 
    break;
  case 387:
    // S2_pstorerifnew_pi, S2_pstorerinewfnew_pi, S2_pstorerinewtnew_pi, S2_p...
    O << ".new) memw("; 
    break;
  case 388:
    // S2_setbit_i, S2_setbit_r
    O << " = setbit("; 
    printOperand(MI, 1, O); 
    break;
  case 389:
    // S2_shuffeb
    O << " = shuffeb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 390:
    // S2_shuffeh
    O << " = shuffeh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 391:
    // S2_shuffob
    O << " = shuffob("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 392:
    // S2_shuffoh
    O << " = shuffoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 393:
    // S2_storerb_pbr, S2_storerbnew_pbr, S2_storerd_pbr, S2_storerf_pbr, S2_...
    O << " ++ "; 
    printOperand(MI, 2, O); 
    O << ":brev) = "; 
    printOperand(MI, 3, O); 
    break;
  case 394:
    // S2_storerb_pbr_pseudo, S2_storerb_pr, S2_storerbnew_pr, S2_storerd_pbr...
    O << "++"; 
    break;
  case 395:
    // S2_storerb_pci, S2_storerbnew_pci, S2_storerd_pci, S2_storerf_pci, S2_...
    O << " ++ #"; 
    printImmOperand(MI, 2, O); 
    O << ":circ("; 
    printOperand(MI, 3, O); 
    O << ")) = "; 
    printOperand(MI, 4, O); 
    break;
  case 396:
    // S2_storerb_pci_pseudo, S2_storerb_pi, S2_storerbnew_pi, S2_storerd_pci...
    O << "++#"; 
    break;
  case 397:
    // S2_storerb_pcr, S2_storerbnew_pcr, S2_storerd_pcr, S2_storerf_pcr, S2_...
    O << " ++ I:circ("; 
    printOperand(MI, 2, O); 
    O << ")) = "; 
    printOperand(MI, 3, O); 
    break;
  case 398:
    // S2_storerbabs, S2_storerbgp, S2_storerbnewabs, S2_storerbnewgp, S2_sto...
    O << ") = "; 
    printOperand(MI, 1, O); 
    break;
  case 399:
    // S2_svsathb, S2_vsathb, S2_vsathb_nopack
    O << " = vsathb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 400:
    // S2_svsathub, S2_vsathub, S2_vsathub_nopack
    O << " = vsathub("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 401:
    // S2_tableidxb, S2_tableidxb_goodsyntax
    O << " = tableidxb("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    break;
  case 402:
    // S2_tableidxd, S2_tableidxd_goodsyntax
    O << " = tableidxd("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    break;
  case 403:
    // S2_tableidxh, S2_tableidxh_goodsyntax
    O << " = tableidxh("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    break;
  case 404:
    // S2_tableidxw, S2_tableidxw_goodsyntax
    O << " = tableidxw("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    break;
  case 405:
    // S2_togglebit_i, S2_togglebit_r
    O << " = togglebit("; 
    printOperand(MI, 1, O); 
    break;
  case 406:
    // S2_tstbit_i, S2_tstbit_r
    O << " = tstbit("; 
    printOperand(MI, 1, O); 
    break;
  case 407:
    // S2_valignib, S2_valignrb
    O << " = valignb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 408:
    // S2_vcnegh
    O << " = vcnegh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 409:
    // S2_vcrotate
    O << " = vcrotate("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 410:
    // S2_vrcnegh
    O << " += vrcnegh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 411:
    // S2_vrndpackwh, S2_vrndpackwhs
    O << " = vrndwh("; 
    printOperand(MI, 1, O); 
    break;
  case 412:
    // S2_vsatwh, S2_vsatwh_nopack
    O << " = vsatwh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 413:
    // S2_vsatwuh, S2_vsatwuh_nopack
    O << " = vsatwuh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 414:
    // S2_vsplatrb
    O << " = vsplatb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 415:
    // S2_vsplatrh
    O << " = vsplath("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 416:
    // S2_vspliceib, S2_vsplicerb
    O << " = vspliceb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 417:
    // S2_vsxtbh
    O << " = vsxtbh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 418:
    // S2_vsxthw
    O << " = vsxthw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 419:
    // S2_vtrunehb
    O << " = vtrunehb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 420:
    // S2_vtrunewh
    O << " = vtrunewh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 421:
    // S2_vtrunohb
    O << " = vtrunohb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 422:
    // S2_vtrunowh
    O << " = vtrunowh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 423:
    // S2_vzxtbh
    O << " = vzxtbh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 424:
    // S2_vzxthw
    O << " = vzxthw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 425:
    // S4_andi_asl_ri, S4_andi_lsr_ri
    O << " = and(#"; 
    printExtOperand(MI, 1, O); 
    break;
  case 426:
    // S4_clbaddi, S4_clbpaddi
    O << " = add(clb("; 
    printOperand(MI, 1, O); 
    O << "), #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 427:
    // S4_extract, S4_extract_rp, S4_extractp, S4_extractp_rp
    O << " = extract("; 
    printOperand(MI, 1, O); 
    break;
  case 428:
    // S4_lsli
    O << " = lsl(#"; 
    printImmOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 429:
    // S4_ntstbit_i, S4_ntstbit_r
    O << " = !tstbit("; 
    printOperand(MI, 1, O); 
    break;
  case 430:
    // S4_ori_asl_ri, S4_ori_lsr_ri
    O << " = or(#"; 
    printExtOperand(MI, 1, O); 
    break;
  case 431:
    // S4_pstorerbf_abs, S4_pstorerbnewf_abs, S4_pstorerbnewt_abs, S4_pstorer...
    O << ") memb(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 432:
    // S4_pstorerbfnew_abs, S4_pstorerbnewfnew_abs, S4_pstorerbnewtnew_abs, S...
    O << ".new) memb(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 433:
    // S4_pstorerdf_abs, S4_pstorerdt_abs
    O << ") memd(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 434:
    // S4_pstorerdfnew_abs, S4_pstorerdtnew_abs
    O << ".new) memd(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 435:
    // S4_pstorerff_abs, S4_pstorerft_abs, S4_pstorerhf_abs, S4_pstorerhnewf_...
    O << ") memh(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 436:
    // S4_pstorerffnew_abs, S4_pstorerftnew_abs, S4_pstorerhfnew_abs, S4_psto...
    O << ".new) memh(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 437:
    // S4_pstorerif_abs, S4_pstorerinewf_abs, S4_pstorerinewt_abs, S4_pstorer...
    O << ") memw(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 438:
    // S4_pstorerifnew_abs, S4_pstorerinewfnew_abs, S4_pstorerinewtnew_abs, S...
    O << ".new) memw(#"; 
    printExtOperand(MI, 1, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 439:
    // S4_storerb_rr, S4_storerbnew_rr, S4_storerd_rr, S4_storerf_rr, S4_stor...
    O << " + "; 
    printOperand(MI, 1, O); 
    O << "<<#"; 
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 440:
    // S4_storerb_ur, S4_storerbnew_ur, S4_storerd_ur, S4_storerf_ur, S4_stor...
    O << "<<#"; 
    printImmOperand(MI, 1, O); 
    O << " + #"; 
    printExtOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 441:
    // S4_vrcrotate
    O << " = vrcrotate("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 442:
    // S4_vrcrotate_acc
    O << " += vrcrotate("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 443:
    // S4_vxaddsubh, S4_vxaddsubhr
    O << " = vxaddsubh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 444:
    // S4_vxaddsubw
    O << " = vxaddsubw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 445:
    // S4_vxsubaddh, S4_vxsubaddhr
    O << " = vxsubaddh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 446:
    // S4_vxsubaddw
    O << " = vxsubaddw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 447:
    // S5_asrhub_rnd_sat, S5_asrhub_rnd_sat_goodsyntax, S5_asrhub_sat
    O << " = vasrhub("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    break;
  case 448:
    // S5_popcountp
    O << " = popcount("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 449:
    // TFRI64_V2_ext
    O << " = combine(##"; 
    printExtOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 450:
    // Y2_dcfetchbo
    O << " + #"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 2 encoded into 7 bits for 89 unique commands.
  switch ((Bits >> 22) & 127) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_abs, A2_absp, A2_negp, A2_svaddh, A2_svavgh, A2_svnavgh, A2_svsubh,...
    O << ')'; 
    return;
    break;
  case 1:
    // A2_abssat, A2_negsat, A2_roundsat, A2_svaddhs, A2_svsubhs, A2_vabshsat...
    O << "):sat"; 
    return;
    break;
  case 2:
    // A2_add, A2_addh_h16_hh, A2_addh_h16_hl, A2_addh_h16_lh, A2_addh_h16_ll...
    printOperand(MI, 1, O); 
    break;
  case 3:
    // A2_and, A2_andp, A2_combinew, A2_or, A2_orp, A2_subri, A2_vcmpbeq, A2_...
    O << ", "; 
    break;
  case 4:
    // A2_andir, A2_orir, A4_bitspliti, A4_cmpbeqi, A4_cmpbgti, A4_cmpbgtui, ...
    O << ", #"; 
    break;
  case 5:
    // A2_combine_hh, A2_combine_hl, M2_mpy_acc_hh_s0, M2_mpy_acc_hh_s1, M2_m...
    O << ".h, "; 
    break;
  case 6:
    // A2_combine_lh, A2_combine_ll, M2_mpy_acc_lh_s0, M2_mpy_acc_lh_s1, M2_m...
    O << ".l, "; 
    break;
  case 7:
    // A2_combineii, A2_tfrsi, A4_combineir, L4_add_memopb_io, L4_add_memoph_...
    printExtOperand(MI, 1, O); 
    break;
  case 8:
    // A2_paddf, A2_paddfnew, A2_paddif, A2_paddifnew, A2_paddit, A2_padditne...
    O << " = add("; 
    printOperand(MI, 2, O); 
    break;
  case 9:
    // A2_pandf, A2_pandfnew, A2_pandt, A2_pandtnew
    O << " = and("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 10:
    // A2_porf, A2_porfnew, A2_port, A2_portnew
    O << " = or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 11:
    // A2_psubf, A2_psubfnew, A2_psubt, A2_psubtnew
    O << " = sub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // A2_pxorf, A2_pxorfnew, A2_pxort, A2_pxortnew
    O << " = xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 13:
    // A2_svavghs, A2_vavghr, A2_vavgubr, A2_vavguhr, A2_vavguwr, A2_vavgwr
    O << "):rnd"; 
    return;
    break;
  case 14:
    // A2_tfr, A2_tfrcrr, A2_tfrp, A2_tfrrcr, A4_tfrcpp, A4_tfrpcp, ARGEXTEND...
    return;
    break;
  case 15:
    // A2_tfrf, A2_tfrfnew, A2_tfrpf, A2_tfrpfnew, A2_tfrpt, A2_tfrptnew, A2_...
    O << " = "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 16:
    // A2_tfrpi, A4_combineii, J4_jumpseti, S4_storeirb_io, S4_storeirh_io, S...
    printImmOperand(MI, 1, O); 
    break;
  case 17:
    // A2_vavghcr, A2_vavgwcr
    O << "):crnd"; 
    return;
    break;
  case 18:
    // A2_vnavghcr, A2_vnavgwcr
    O << "):crnd:sat"; 
    return;
    break;
  case 19:
    // A2_vnavghr, A2_vnavgwr, M2_cmpyrs_s0, M2_mmachs_rs0, M2_mmacls_rs0, M2...
    O << "):rnd:sat"; 
    return;
    break;
  case 20:
    // A4_addp_c, A4_subp_c, L2_loadalignb_io, L2_loadalignb_pbr, L2_loadalig...
    printOperand(MI, 2, O); 
    break;
  case 21:
    // A4_andn, A4_andnp, A4_orn, A4_ornp, M4_and_andn, M4_or_andn, M4_xor_an...
    O << ", ~"; 
    break;
  case 22:
    // A4_boundscheck_hi
    O << "):raw:hi"; 
    return;
    break;
  case 23:
    // A4_boundscheck_lo
    O << "):raw:lo"; 
    return;
    break;
  case 24:
    // A4_paslhf, A4_paslhfnew, A4_paslht, A4_paslhtnew
    O << " = aslh("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 25:
    // A4_pasrhf, A4_pasrhfnew, A4_pasrht, A4_pasrhtnew
    O << " = asrh("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 26:
    // A4_psxtbf, A4_psxtbfnew, A4_psxtbt, A4_psxtbtnew
    O << " = sxtb("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 27:
    // A4_psxthf, A4_psxthfnew, A4_psxtht, A4_psxthtnew
    O << " = sxth("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 28:
    // A4_pzxtbf, A4_pzxtbfnew, A4_pzxtbt, A4_pzxtbtnew
    O << " = zxtb("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 29:
    // A4_pzxthf, A4_pzxthfnew, A4_pzxtht, A4_pzxthtnew
    O << " = zxth("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 30:
    // C2_andn, C2_orn
    O << ", !"; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 31:
    // C2_ccombinewf, C2_ccombinewnewf, C2_ccombinewnewt, C2_ccombinewt
    O << " = combine("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 32:
    // C2_cmoveif, C2_cmoveit, C2_cmovenewif, C2_cmovenewit, TFRI_cNotPt_f, T...
    O << " = #"; 
    break;
  case 33:
    // C4_and_and, C4_and_andn, C4_or_and, C4_or_andn, S4_or_andix
    O << ", and("; 
    printOperand(MI, 2, O); 
    break;
  case 34:
    // C4_and_or, C4_and_orn, C4_or_or, C4_or_orn
    O << ", or("; 
    printOperand(MI, 2, O); 
    break;
  case 35:
    // CONST32, FCONST32_nsdata, HI_GOT, HI_GOTREL, LO_GOT, LO_GOTREL
    printGlobalOperand(MI, 1, O); 
    break;
  case 36:
    // CONST32_set_jt
    printJumpTable(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 37:
    // F2_conv_df2d_chop, F2_conv_df2ud_chop, F2_conv_df2uw_chop, F2_conv_df2...
    O << "):chop"; 
    return;
    break;
  case 38:
    // F2_dfimm_n, F2_sfimm_n
    O << "):neg"; 
    return;
    break;
  case 39:
    // F2_dfimm_p, F2_sfimm_p
    O << "):pos"; 
    return;
    break;
  case 40:
    // F2_sffma_lib, F2_sffms_lib
    O << "):lib"; 
    return;
    break;
  case 41:
    // J4_cmpeq_f_jumpnv_nt, J4_cmpeq_t_jumpnv_nt, J4_cmpeqi_f_jumpnv_nt, J4_...
    O << ")) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 42:
    // J4_cmpeq_f_jumpnv_t, J4_cmpeq_t_jumpnv_t, J4_cmpeqi_f_jumpnv_t, J4_cmp...
    O << ")) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 43:
    // J4_cmpeqi_fp0_jump_nt, J4_cmpgti_fp0_jump_nt, J4_cmpgtui_fp0_jump_nt
    O << "); if (!p0.new) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 44:
    // J4_cmpeqi_fp0_jump_t, J4_cmpgti_fp0_jump_t, J4_cmpgtui_fp0_jump_t
    O << "); if (!p0.new) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 45:
    // J4_cmpeqi_fp1_jump_nt, J4_cmpgti_fp1_jump_nt, J4_cmpgtui_fp1_jump_nt
    O << "); if (!p1.new) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 46:
    // J4_cmpeqi_fp1_jump_t, J4_cmpgti_fp1_jump_t, J4_cmpgtui_fp1_jump_t
    O << "); if (!p1.new) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 47:
    // J4_cmpeqi_tp0_jump_nt, J4_cmpgti_tp0_jump_nt, J4_cmpgtui_tp0_jump_nt
    O << "); if (p0.new) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 48:
    // J4_cmpeqi_tp0_jump_t, J4_cmpgti_tp0_jump_t, J4_cmpgtui_tp0_jump_t
    O << "); if (p0.new) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 49:
    // J4_cmpeqi_tp1_jump_nt, J4_cmpgti_tp1_jump_nt, J4_cmpgtui_tp1_jump_nt
    O << "); if (p1.new) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 50:
    // J4_cmpeqi_tp1_jump_t, J4_cmpgti_tp1_jump_t, J4_cmpgtui_tp1_jump_t
    O << "); if (p1.new) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 51:
    // J4_jumpsetr
    O << " ; jump "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 52:
    // L2_loadalignb_pcr, L2_loadalignb_pi, L2_loadalignb_pr, L2_loadalignh_p...
    printOperand(MI, 3, O); 
    break;
  case 53:
    // L2_ploadrbf_io, L2_ploadrbf_pi, L2_ploadrbfnew_io, L2_ploadrbfnew_pi, ...
    O << " = memb("; 
    break;
  case 54:
    // L2_ploadrdf_io, L2_ploadrdf_pi, L2_ploadrdfnew_io, L2_ploadrdfnew_pi, ...
    O << " = memd("; 
    break;
  case 55:
    // L2_ploadrhf_io, L2_ploadrhf_pi, L2_ploadrhfnew_io, L2_ploadrhfnew_pi, ...
    O << " = memh("; 
    break;
  case 56:
    // L2_ploadrif_io, L2_ploadrif_pi, L2_ploadrifnew_io, L2_ploadrifnew_pi, ...
    O << " = memw("; 
    break;
  case 57:
    // L2_ploadrubf_io, L2_ploadrubf_pi, L2_ploadrubfnew_io, L2_ploadrubfnew_...
    O << " = memub("; 
    break;
  case 58:
    // L2_ploadruhf_io, L2_ploadruhf_pi, L2_ploadruhfnew_io, L2_ploadruhfnew_...
    O << " = memuh("; 
    break;
  case 59:
    // L4_ploadrbf_abs, L4_ploadrbfnew_abs, L4_ploadrbt_abs, L4_ploadrbtnew_a...
    O << " = memb(#"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 60:
    // L4_ploadrdf_abs, L4_ploadrdfnew_abs, L4_ploadrdt_abs, L4_ploadrdtnew_a...
    O << " = memd(#"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 61:
    // L4_ploadrhf_abs, L4_ploadrhfnew_abs, L4_ploadrht_abs, L4_ploadrhtnew_a...
    O << " = memh(#"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 62:
    // L4_ploadrif_abs, L4_ploadrifnew_abs, L4_ploadrit_abs, L4_ploadritnew_a...
    O << " = memw(#"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 63:
    // L4_ploadrubf_abs, L4_ploadrubfnew_abs, L4_ploadrubt_abs, L4_ploadrubtn...
    O << " = memub(#"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 64:
    // L4_ploadruhf_abs, L4_ploadruhfnew_abs, L4_ploadruht_abs, L4_ploadruhtn...
    O << " = memuh(#"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 65:
    // M2_cmacs_s1, M2_cmpys_s1, M2_cnacs_s1, M2_mmachs_s1, M2_mmacls_s1, M2_...
    O << "):<<1:sat"; 
    return;
    break;
  case 66:
    // M2_cmacsc_s0, M2_cmpysc_s0, M2_cnacsc_s0
    O << "*):sat"; 
    return;
    break;
  case 67:
    // M2_cmacsc_s1, M2_cmpysc_s1, M2_cnacsc_s1
    O << "*):<<1:sat"; 
    return;
    break;
  case 68:
    // M2_cmpyrs_s1, M2_mmachs_rs1, M2_mmacls_rs1, M2_mmacuhs_rs1, M2_mmaculs...
    O << "):<<1:rnd:sat"; 
    return;
    break;
  case 69:
    // M2_cmpyrsc_s0
    O << "*):rnd:sat"; 
    return;
    break;
  case 70:
    // M2_cmpyrsc_s1, M4_cmpyi_whc, M4_cmpyr_whc
    O << "*):<<1:rnd:sat"; 
    return;
    break;
  case 71:
    // M2_vrcmaci_s0c, M2_vrcmacr_s0c, M2_vrcmpyi_s0c, M2_vrcmpyr_s0c
    O << "*)"; 
    return;
    break;
  case 72:
    // M2_vrcmpys_acc_s1_h, M2_vrcmpys_s1_h
    O << "):<<1:sat:raw:hi"; 
    return;
    break;
  case 73:
    // M2_vrcmpys_acc_s1_l, M2_vrcmpys_s1_l
    O << "):<<1:sat:raw:lo"; 
    return;
    break;
  case 74:
    // M2_vrcmpys_s1rp_h
    O << "):<<1:rnd:sat:raw:hi"; 
    return;
    break;
  case 75:
    // M2_vrcmpys_s1rp_l
    O << "):<<1:rnd:sat:raw:lo"; 
    return;
    break;
  case 76:
    // M4_mpyri_addi, M4_mpyrr_addi
    O << ", mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 77:
    // M4_vrmpyeh_acc_s1, M4_vrmpyeh_s1, M4_vrmpyoh_acc_s1, M4_vrmpyoh_s1
    O << "):<<1"; 
    return;
    break;
  case 78:
    // S2_storerb_pci_pseudo, S2_storerd_pci_pseudo, S2_storerf_pci_pseudo, S...
    printImmOperand(MI, 4, O); 
    O << ":circ("; 
    printOperand(MI, 3, O); 
    O << ")) = "; 
    printOperand(MI, 2, O); 
    O << "\""; 
    return;
    break;
  case 79:
    // S2_storerb_pi, S2_storerbnew_pi, S2_storerd_pi, S2_storerf_pi, S2_stor...
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 80:
    // S2_storerbnew_pbr, S2_storerbnew_pci, S2_storerbnew_pcr, S2_storerbnew...
    O << ".new"; 
    return;
    break;
  case 81:
    // S2_storerf_pbr, S2_storerf_pci, S2_storerf_pcr, S2_storerfabs, S2_stor...
    O << ".h"; 
    return;
    break;
  case 82:
    // S2_storew_locked, S4_stored_locked, TFR_PdFalse
    printOperand(MI, 0, O); 
    break;
  case 83:
    // S2_tableidxb, S2_tableidxd, S2_tableidxh, S2_tableidxw, S5_asrhub_rnd_...
    O << "):raw"; 
    return;
    break;
  case 84:
    // S4_addi_asl_ri, S4_andi_asl_ri, S4_ori_asl_ri, S4_subi_asl_ri
    O << ", asl("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 85:
    // S4_addi_lsr_ri, S4_andi_lsr_ri, S4_ori_lsr_ri, S4_subi_lsr_ri
    O << ", lsr("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 86:
    // S4_vxaddsubhr, S4_vxsubaddhr
    O << "):rnd:>>1:sat"; 
    return;
    break;
  case 87:
    // S5_vasrhrnd_goodsyntax
    O << ",#"; 
    printImmOperand(MI, 2, O); 
    O << "):rnd"; 
    return;
    break;
  case 88:
    // dep_S2_packhl
    O << "):deprecated"; 
    return;
    break;
  }


  // Fragment 3 encoded into 6 bits for 57 unique commands.
  switch ((Bits >> 29) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_add, A2_addp, A2_addpsat, A2_addsat, A2_addsp, A2_addsph, A2_addspl...
    O << ", "; 
    break;
  case 1:
    // A2_addh_h16_hh, A2_addh_h16_hl, A2_addh_h16_sat_hh, A2_addh_h16_sat_hl...
    O << ".h, "; 
    printOperand(MI, 2, O); 
    break;
  case 2:
    // A2_addh_h16_lh, A2_addh_h16_ll, A2_addh_h16_sat_lh, A2_addh_h16_sat_ll...
    O << ".l, "; 
    printOperand(MI, 2, O); 
    break;
  case 3:
    // A2_addi, A2_combineii, A2_paddif, A2_paddifnew, A2_paddit, A2_padditne...
    O << ", #"; 
    break;
  case 4:
    // A2_and, A2_andp, A2_combine_hh, A2_combine_hl, A2_combine_lh, A2_combi...
    printOperand(MI, 2, O); 
    break;
  case 5:
    // A2_andir, A2_orir, A4_cmpbgtui, A4_cmpheqi, A4_cmphgti, A4_cmphgtui, A...
    printExtOperand(MI, 2, O); 
    break;
  case 6:
    // A2_tfrpi, A2_tfrsi, S2_storerb_pi, S2_storerd_pi, S2_storerh_pi, S2_st...
    return;
    break;
  case 7:
    // A4_bitspliti, A4_cmpbeqi, A4_cmpbgti, A4_cround_ri, A4_round_ri, A4_ro...
    printImmOperand(MI, 2, O); 
    break;
  case 8:
    // C4_and_andn, C4_and_orn, C4_or_andn, C4_or_orn
    O << ", !"; 
    printOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 9:
    // CONST32, CONST32_Float_Real, CONST32_Int_Real, FCONST32_nsdata, HI, J2...
    O << ')'; 
    return;
    break;
  case 10:
    // F2_sffma_sc
    printOperand(MI, 4, O); 
    O << "):scale"; 
    return;
    break;
  case 11:
    // F2_sfinvsqrta
    O << " = sfinvsqrta("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // F2_sfrecipa
    O << " = sfrecipa("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 13:
    // HI_GOT, LO_GOT
    O << "@GOT)"; 
    return;
    break;
  case 14:
    // HI_GOTREL, HI_PIC, LO_GOTREL, LO_PIC
    O << "@GOTREL)"; 
    return;
    break;
  case 15:
    // J4_cmpeq_fp0_jump_nt, J4_cmpgt_fp0_jump_nt, J4_cmpgtu_fp0_jump_nt
    O << "); if (!p0.new) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 16:
    // J4_cmpeq_fp0_jump_t, J4_cmpgt_fp0_jump_t, J4_cmpgtu_fp0_jump_t
    O << "); if (!p0.new) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 17:
    // J4_cmpeq_fp1_jump_nt, J4_cmpgt_fp1_jump_nt, J4_cmpgtu_fp1_jump_nt
    O << "); if (!p1.new) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 18:
    // J4_cmpeq_fp1_jump_t, J4_cmpgt_fp1_jump_t, J4_cmpgtu_fp1_jump_t
    O << "); if (!p1.new) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 19:
    // J4_cmpeq_tp0_jump_nt, J4_cmpgt_tp0_jump_nt, J4_cmpgtu_tp0_jump_nt
    O << "); if (p0.new) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 20:
    // J4_cmpeq_tp0_jump_t, J4_cmpgt_tp0_jump_t, J4_cmpgtu_tp0_jump_t
    O << "); if (p0.new) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 21:
    // J4_cmpeq_tp1_jump_nt, J4_cmpgt_tp1_jump_nt, J4_cmpgtu_tp1_jump_nt
    O << "); if (p1.new) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 22:
    // J4_cmpeq_tp1_jump_t, J4_cmpgt_tp1_jump_t, J4_cmpgtu_tp1_jump_t
    O << "); if (p1.new) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 23:
    // J4_cmplt_f_jumpnv_nt, J4_cmplt_t_jumpnv_nt, J4_cmpltu_f_jumpnv_nt, J4_...
    O << ".new)) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 24:
    // J4_cmplt_f_jumpnv_t, J4_cmplt_t_jumpnv_t, J4_cmpltu_f_jumpnv_t, J4_cmp...
    O << ".new)) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 25:
    // J4_jumpseti
    O << " ; jump "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 26:
    // L2_loadalignb_io, L2_loadalignh_io, L2_loadbsw2_io, L2_loadbsw4_io, L2...
    O << " + #"; 
    break;
  case 27:
    // L2_loadalignb_pbr, L2_loadalignh_pbr, L2_loadbsw2_pbr, L2_loadbsw4_pbr...
    O << " ++ "; 
    printOperand(MI, 3, O); 
    O << ":brev)"; 
    return;
    break;
  case 28:
    // L2_loadalignb_pci, L2_loadalignh_pci, L2_loadbsw2_pci, L2_loadbsw4_pci...
    O << " ++ #"; 
    printImmOperand(MI, 3, O); 
    O << ":circ("; 
    printOperand(MI, 4, O); 
    O << "))"; 
    return;
    break;
  case 29:
    // L2_loadalignb_pcr, L2_loadalignh_pcr, L2_loadbsw2_pcr, L2_loadbsw4_pcr...
    O << " ++ I:circ("; 
    break;
  case 30:
    // L2_loadalignb_pi, L2_loadalignh_pi, L2_loadbsw2_pi, L2_loadbsw4_pi, L2...
    O << "++#"; 
    break;
  case 31:
    // L2_loadalignb_pr, L2_loadalignh_pr, L2_loadbsw2_pr, L2_loadbsw4_pr, L2...
    O << "++"; 
    break;
  case 32:
    // L2_ploadrbf_pi, L2_ploadrbfnew_pi, L2_ploadrbt_pi, L2_ploadrbtnew_pi, ...
    printOperand(MI, 3, O); 
    break;
  case 33:
    // L4_add_memopb_io, L4_add_memoph_io, L4_add_memopw_io
    O << ") += "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 34:
    // L4_and_memopb_io, L4_and_memoph_io, L4_and_memopw_io
    O << ") &= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 35:
    // L4_iadd_memopb_io, L4_iadd_memoph_io, L4_iadd_memopw_io
    O << ") += #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 36:
    // L4_iand_memopb_io, L4_iand_memoph_io, L4_iand_memopw_io
    O << ") = clrbit(#"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 37:
    // L4_ior_memopb_io, L4_ior_memoph_io, L4_ior_memopw_io
    O << ") = setbit(#"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 38:
    // L4_isub_memopb_io, L4_isub_memoph_io, L4_isub_memopw_io
    O << ") -= #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 39:
    // L4_loadalignb_ap, L4_loadalignh_ap, L4_loadbsw2_ap, L4_loadbsw4_ap, L4...
    O << " = #"; 
    printExtOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 40:
    // L4_loadalignb_ur, L4_loadalignh_ur, L4_loadbsw2_ur, L4_loadbsw4_ur, L4...
    O << "<<#"; 
    printImmOperand(MI, 2, O); 
    O << " + #"; 
    printExtOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 41:
    // L4_loadrb_rr, L4_loadrd_rr, L4_loadrh_rr, L4_loadri_rr, L4_loadrub_rr,...
    O << " + "; 
    printOperand(MI, 2, O); 
    O << "<<#"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 42:
    // L4_or_memopb_io, L4_or_memoph_io, L4_or_memopw_io
    O << ") |= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 43:
    // L4_sub_memopb_io, L4_sub_memoph_io, L4_sub_memopw_io
    O << ") -= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 44:
    // M2_accii, M2_macsip, M2_naccii, S4_or_andi, S4_or_ori
    printExtOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 45:
    // M4_mpyri_addr, M4_mpyrr_addr
    O << ", mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 46:
    // M4_mpyri_addr_u2
    O << ", mpyi(#"; 
    printImmOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 47:
    // S2_asl_i_p_acc, S2_asl_i_p_and, S2_asl_i_p_nac, S2_asl_i_p_or, S2_asl_...
    printImmOperand(MI, 3, O); 
    break;
  case 48:
    // S2_pstorerbf_io, S2_pstorerbnewf_io, S2_pstorerbnewt_io, S2_pstorerbt_...
    O << "+#"; 
    break;
  case 49:
    // S2_storerb_io, S2_storerb_pr, S2_storerbnew_io, S2_storerbnew_pr, S2_s...
    O << ") = "; 
    break;
  case 50:
    // S2_storerb_pbr_pseudo, S2_storerd_pbr_pseudo, S2_storerf_pbr_pseudo, S...
    O << ":brev) = "; 
    printOperand(MI, 2, O); 
    O << "\""; 
    return;
    break;
  case 51:
    // S2_storerbnew_pi, S2_storerhnew_pi, S2_storerinew_pi
    O << ".new"; 
    return;
    break;
  case 52:
    // S2_storerf_pi
    O << ".h"; 
    return;
    break;
  case 53:
    // S4_addaddi
    O << ", add("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printExtOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 54:
    // S4_pstorerbf_rr, S4_pstorerbfnew_rr, S4_pstorerbnewf_rr, S4_pstorerbne...
    O << '+'; 
    printOperand(MI, 2, O); 
    O << "<<#"; 
    printImmOperand(MI, 3, O); 
    O << ") = "; 
    printOperand(MI, 4, O); 
    break;
  case 55:
    // S4_storeirb_io, S4_storeirh_io, S4_storeiri_io
    O << ")=#"; 
    printExtOperand(MI, 2, O); 
    return;
    break;
  case 56:
    // S4_subaddi
    O << ", sub(#"; 
    printExtOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  }


  // Fragment 4 encoded into 6 bits for 44 unique commands.
  switch ((Bits >> 35) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_add, A2_addp, A2_addpsat, A2_addsat, A2_addsp, A2_addsph, A2_addspl...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // A2_addh_h16_hh, A2_addh_h16_lh, A2_subh_h16_hh, A2_subh_h16_lh
    O << ".h):<<16"; 
    return;
    break;
  case 2:
    // A2_addh_h16_hl, A2_addh_h16_ll, A2_subh_h16_hl, A2_subh_h16_ll
    O << ".l):<<16"; 
    return;
    break;
  case 3:
    // A2_addh_h16_sat_hh, A2_addh_h16_sat_lh, A2_subh_h16_sat_hh, A2_subh_h1...
    O << ".h):sat:<<16"; 
    return;
    break;
  case 4:
    // A2_addh_h16_sat_hl, A2_addh_h16_sat_ll, A2_subh_h16_sat_hl, A2_subh_h1...
    O << ".l):sat:<<16"; 
    return;
    break;
  case 5:
    // A2_addh_l16_hl, A2_combine_hh, A2_combine_lh, A2_subh_l16_hl, M2_mpy_a...
    O << ".h)"; 
    return;
    break;
  case 6:
    // A2_addh_l16_ll, A2_combine_hl, A2_combine_ll, A2_subh_l16_ll, M2_mpy_a...
    O << ".l)"; 
    return;
    break;
  case 7:
    // A2_addh_l16_sat_hl, A2_subh_l16_sat_hl, M2_mpy_acc_sat_hh_s0, M2_mpy_a...
    O << ".h):sat"; 
    return;
    break;
  case 8:
    // A2_addh_l16_sat_ll, A2_subh_l16_sat_ll, M2_mpy_acc_sat_hl_s0, M2_mpy_a...
    O << ".l):sat"; 
    return;
    break;
  case 9:
    // A2_addi, A4_combineii, L2_loadbsw2_io, L2_loadbsw4_io, L2_loadbzw2_io,...
    printExtOperand(MI, 2, O); 
    break;
  case 10:
    // A2_and, A2_andir, A2_andp, A2_combinew, A2_or, A2_orir, A2_orp, A2_sub...
    O << ')'; 
    return;
    break;
  case 11:
    // A2_combineii, ADJDYNALLOC, S4_storeirbf_io, S4_storeirbfnew_io, S4_sto...
    printImmOperand(MI, 2, O); 
    break;
  case 12:
    // A2_paddf, A2_paddfnew, A2_paddt, A2_paddtnew, A4_addp_c, A4_subp_c, C4...
    printOperand(MI, 3, O); 
    break;
  case 13:
    // A2_paddif, A2_paddifnew, A2_paddit, A2_padditnew, L2_loadalignb_io, L2...
    printExtOperand(MI, 3, O); 
    break;
  case 14:
    // A4_round_ri_sat, A4_round_rr_sat, S2_asl_i_r_sat, S2_asl_r_r_sat, S2_a...
    O << "):sat"; 
    return;
    break;
  case 15:
    // C2_cmoveif, C2_cmoveit, C2_cmovenewif, C2_cmovenewit, S4_pstorerbf_rr,...
    return;
    break;
  case 16:
    // C2_mux, C2_muxri, M4_mpyrr_addr, MUX_ri_f
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 17:
    // C2_muxii, C2_muxir, M4_mpyri_addr, MUX_ir_f, S2_extractu, S2_extractup...
    O << ", #"; 
    break;
  case 18:
    // L2_loadalignb_pcr, L2_loadalignb_pr, L2_loadalignh_pcr, L2_loadalignh_...
    printOperand(MI, 4, O); 
    break;
  case 19:
    // L2_loadalignb_pi, L2_loadalignh_pi
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 20:
    // L2_loadbsw2_pi, L2_loadbsw4_pi, L2_loadbzw2_pi, L2_loadbzw4_pi, L2_loa...
    printImmOperand(MI, 3, O); 
    break;
  case 21:
    // L2_loadrb_pci_pseudo, L2_loadrd_pci_pseudo, L2_loadrh_pci_pseudo, L2_l...
    printImmOperand(MI, 5, O); 
    O << ":circ("; 
    printOperand(MI, 4, O); 
    O << "))\""; 
    return;
    break;
  case 22:
    // L2_ploadrbf_io, L2_ploadrbfnew_io, L2_ploadrbt_io, L2_ploadrbtnew_io, ...
    O << " + #"; 
    printExtOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 23:
    // L2_ploadrbf_pi, L2_ploadrbfnew_pi, L2_ploadrbt_pi, L2_ploadrbtnew_pi, ...
    O << "++#"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 24:
    // L4_ploadrbf_rr, L4_ploadrbfnew_rr, L4_ploadrbt_rr, L4_ploadrbtnew_rr, ...
    O << '+'; 
    printOperand(MI, 3, O); 
    O << "<<#"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 25:
    // M2_dpmpyss_rnd_s0, S2_asr_i_p_rnd, S2_asr_i_r_rnd
    O << "):rnd"; 
    return;
    break;
  case 26:
    // M2_hmmpyh_rs1, M2_mpy_sat_rnd_hh_s1, M2_mpy_sat_rnd_lh_s1
    O << ".h):<<1:rnd:sat"; 
    return;
    break;
  case 27:
    // M2_hmmpyh_s1, M2_mpy_acc_sat_hh_s1, M2_mpy_acc_sat_lh_s1, M2_mpy_nac_s...
    O << ".h):<<1:sat"; 
    return;
    break;
  case 28:
    // M2_hmmpyl_rs1, M2_mpy_sat_rnd_hl_s1, M2_mpy_sat_rnd_ll_s1
    O << ".l):<<1:rnd:sat"; 
    return;
    break;
  case 29:
    // M2_hmmpyl_s1, M2_mpy_acc_sat_hl_s1, M2_mpy_acc_sat_ll_s1, M2_mpy_nac_s...
    O << ".l):<<1:sat"; 
    return;
    break;
  case 30:
    // M2_mpy_acc_hh_s1, M2_mpy_acc_lh_s1, M2_mpy_hh_s1, M2_mpy_lh_s1, M2_mpy...
    O << ".h):<<1"; 
    return;
    break;
  case 31:
    // M2_mpy_acc_hl_s1, M2_mpy_acc_ll_s1, M2_mpy_hl_s1, M2_mpy_ll_s1, M2_mpy...
    O << ".l):<<1"; 
    return;
    break;
  case 32:
    // M2_mpy_rnd_hh_s0, M2_mpy_rnd_lh_s0, M2_mpyd_rnd_hh_s0, M2_mpyd_rnd_lh_...
    O << ".h):rnd"; 
    return;
    break;
  case 33:
    // M2_mpy_rnd_hh_s1, M2_mpy_rnd_lh_s1, M2_mpyd_rnd_hh_s1, M2_mpyd_rnd_lh_...
    O << ".h):<<1:rnd"; 
    return;
    break;
  case 34:
    // M2_mpy_rnd_hl_s0, M2_mpy_rnd_ll_s0, M2_mpyd_rnd_hl_s0, M2_mpyd_rnd_ll_...
    O << ".l):rnd"; 
    return;
    break;
  case 35:
    // M2_mpy_rnd_hl_s1, M2_mpy_rnd_ll_s1, M2_mpyd_rnd_hl_s1, M2_mpyd_rnd_ll_...
    O << ".l):<<1:rnd"; 
    return;
    break;
  case 36:
    // M2_mpy_sat_rnd_hh_s0, M2_mpy_sat_rnd_lh_s0
    O << ".h):rnd:sat"; 
    return;
    break;
  case 37:
    // M2_mpy_sat_rnd_hl_s0, M2_mpy_sat_rnd_ll_s0
    O << ".l):rnd:sat"; 
    return;
    break;
  case 38:
    // M2_mpy_up_s1
    O << "):<<1"; 
    return;
    break;
  case 39:
    // M2_mpy_up_s1_sat, M4_mac_up_s1_sat, M4_nac_up_s1_sat
    O << "):<<1:sat"; 
    return;
    break;
  case 40:
    // S4_pstorerbnewf_rr, S4_pstorerbnewfnew_rr, S4_pstorerbnewt_rr, S4_psto...
    O << ".new"; 
    return;
    break;
  case 41:
    // S4_pstorerff_rr, S4_pstorerffnew_rr, S4_pstorerft_rr, S4_pstorerftnew_...
    O << ".h"; 
    return;
    break;
  case 42:
    // S5_vasrhrnd
    O << "):raw"; 
    return;
    break;
  case 43:
    // TFR_PdFalse
    printOperand(MI, 0, O); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 41) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // A2_add, A2_addi, A2_addp, A2_addsp, A2_combineii, A2_paddf, A2_paddfne...
    O << ')'; 
    return;
    break;
  case 1:
    // A2_addpsat, A2_addsat, A2_subsat
    O << "):sat"; 
    return;
    break;
  case 2:
    // A2_addsph
    O << "):raw:hi"; 
    return;
    break;
  case 3:
    // A2_addspl
    O << "):raw:lo"; 
    return;
    break;
  case 4:
    // A4_addp_c, A4_subp_c
    O << ", "; 
    printOperand(MI, 4, O); 
    O << "):carry"; 
    return;
    break;
  case 5:
    // C2_muxii, MUX_ir_f, S2_extractu, S2_extractup, S4_extract, S4_extractp
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 6:
    // C2_muxir, M4_mpyri_addr
    printExtOperand(MI, 3, O); 
    break;
  case 7:
    // C4_and_and, C4_and_or, C4_or_and, C4_or_or, L2_loadalignb_pcr, L2_load...
    O << "))"; 
    return;
    break;
  case 8:
    // L2_loadrb_pbr_pseudo, L2_loadrd_pbr_pseudo, L2_loadrh_pbr_pseudo, L2_l...
    O << ":brev)\""; 
    return;
    break;
  case 9:
    // S2_insert, S2_insertp
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 10:
    // S2_pstorerbf_io, S2_pstorerbf_pi, S2_pstorerbfnew_pi, S2_pstorerbnewf_...
    O << ") = "; 
    break;
  case 11:
    // S2_storerb_io, S2_storerb_pr, S2_storerd_io, S2_storerd_pr, S2_storerh...
    return;
    break;
  case 12:
    // S2_storerbnew_io, S2_storerbnew_pr, S2_storerhnew_io, S2_storerhnew_pr...
    O << ".new"; 
    return;
    break;
  case 13:
    // S2_storerf_io, S2_storerf_pr, S4_storerf_ap
    O << ".h"; 
    return;
    break;
  case 14:
    // S4_storeirbf_io, S4_storeirbfnew_io, S4_storeirbt_io, S4_storeirbtnew_...
    O << ")=#"; 
    printExtOperand(MI, 3, O); 
    return;
    break;
  case 15:
    // dep_A2_addsat, dep_A2_subsat
    O << "):sat:deprecated"; 
    return;
    break;
  }


  // Fragment 6 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 45) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // C2_muxir
    O << ')'; 
    return;
    break;
  case 1:
    // M4_mpyri_addr
    O << "))"; 
    return;
    break;
  case 2:
    // S2_pstorerbf_io, S2_pstorerbnewf_io, S2_pstorerbnewt_io, S2_pstorerbt_...
    printOperand(MI, 3, O); 
    break;
  case 3:
    // S2_pstorerbf_pi, S2_pstorerbfnew_pi, S2_pstorerbnewf_pi, S2_pstorerbne...
    printOperand(MI, 4, O); 
    break;
  }


  // Fragment 7 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 47) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // S2_pstorerbf_io, S2_pstorerbf_pi, S2_pstorerbfnew_pi, S2_pstorerbt_io,...
    return;
    break;
  case 1:
    // S2_pstorerbnewf_io, S2_pstorerbnewf_pi, S2_pstorerbnewfnew_pi, S2_psto...
    O << ".new"; 
    return;
    break;
  case 2:
    // S2_pstorerff_io, S2_pstorerff_pi, S2_pstorerffnew_pi, S2_pstorerft_io,...
    O << ".h"; 
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *HexagonInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 78 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'c', '1', '1', ':', '1', '0', 0,
  /* 7 */ 'r', '1', '1', ':', '1', '0', 0,
  /* 14 */ 'r', '1', '0', 0,
  /* 18 */ 'r', '2', '1', ':', '2', '0', 0,
  /* 25 */ 'r', '2', '0', 0,
  /* 29 */ 'r', '3', '1', ':', '3', '0', 0,
  /* 36 */ 'r', '3', '0', 0,
  /* 40 */ 'c', '1', ':', '0', 0,
  /* 45 */ 'r', '1', ':', '0', 0,
  /* 50 */ 'p', '3', ':', '0', 0,
  /* 55 */ 's', 'a', '0', 0,
  /* 59 */ 'l', 'c', '0', 0,
  /* 63 */ 'm', '0', 0,
  /* 66 */ 'p', '0', 0,
  /* 69 */ 'r', '0', 0,
  /* 72 */ 'c', 's', '0', 0,
  /* 76 */ 'r', '1', '1', 0,
  /* 80 */ 'r', '2', '1', 0,
  /* 84 */ 'r', '3', '1', 0,
  /* 88 */ 's', 'a', '1', 0,
  /* 92 */ 'l', 'c', '1', 0,
  /* 96 */ 'm', '1', 0,
  /* 99 */ 'p', '1', 0,
  /* 102 */ 'r', '1', 0,
  /* 105 */ 'c', 's', '1', 0,
  /* 109 */ 'c', '1', '3', ':', '1', '2', 0,
  /* 116 */ 'r', '1', '3', ':', '1', '2', 0,
  /* 123 */ 'r', '1', '2', 0,
  /* 127 */ 'r', '2', '3', ':', '2', '2', 0,
  /* 134 */ 'r', '2', '2', 0,
  /* 138 */ 'c', '3', ':', '2', 0,
  /* 143 */ 'r', '3', ':', '2', 0,
  /* 148 */ 'p', '2', 0,
  /* 151 */ 'r', '2', 0,
  /* 154 */ 'r', '1', '3', 0,
  /* 158 */ 'r', '2', '3', 0,
  /* 162 */ 'p', '3', 0,
  /* 165 */ 'r', '3', 0,
  /* 168 */ 'c', '1', '5', ':', '1', '4', 0,
  /* 175 */ 'r', '1', '5', ':', '1', '4', 0,
  /* 182 */ 'r', '1', '4', 0,
  /* 186 */ 'r', '2', '5', ':', '2', '4', 0,
  /* 193 */ 'r', '2', '4', 0,
  /* 197 */ 'r', '5', ':', '4', 0,
  /* 202 */ 'r', '4', 0,
  /* 205 */ 'r', '1', '5', 0,
  /* 209 */ 'r', '2', '5', 0,
  /* 213 */ 'r', '5', 0,
  /* 216 */ 'r', '1', '7', ':', '1', '6', 0,
  /* 223 */ 'r', '1', '6', 0,
  /* 227 */ 'r', '2', '7', ':', '2', '6', 0,
  /* 234 */ 'r', '2', '6', 0,
  /* 238 */ 'c', '7', ':', '6', 0,
  /* 243 */ 'r', '7', ':', '6', 0,
  /* 248 */ 'c', '6', 0,
  /* 251 */ 'r', '6', 0,
  /* 254 */ 'r', '1', '7', 0,
  /* 258 */ 'r', '2', '7', 0,
  /* 262 */ 'c', '7', 0,
  /* 265 */ 'r', '7', 0,
  /* 268 */ 'r', '1', '9', ':', '1', '8', 0,
  /* 275 */ 'r', '1', '8', 0,
  /* 279 */ 'r', '2', '9', ':', '2', '8', 0,
  /* 286 */ 'r', '2', '8', 0,
  /* 290 */ 'c', '9', ':', '8', 0,
  /* 295 */ 'r', '9', ':', '8', 0,
  /* 300 */ 'r', '8', 0,
  /* 303 */ 'r', '1', '9', 0,
  /* 307 */ 'r', '2', '9', 0,
  /* 311 */ 'r', '9', 0,
  /* 314 */ 'p', 'c', 0,
  /* 317 */ 'u', 's', 'r', '.', 'o', 'v', 'f', 0,
  /* 325 */ 'u', 'p', 'c', 'y', 'c', 'l', 'e', 'h', 'i', 0,
  /* 335 */ 'u', 'p', 'c', 'y', 'c', 'l', 'e', 'l', 'o', 0,
  /* 345 */ 'u', 'g', 'p', 0,
  /* 349 */ 'u', 's', 'r', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    109, 346, 314, 345, 168, 325, 335, 349, 317, 248, 262, 72, 105, 45, 
    143, 197, 243, 295, 7, 116, 175, 216, 268, 18, 127, 186, 227, 279, 
    29, 59, 92, 63, 96, 66, 99, 148, 162, 69, 102, 151, 165, 202, 
    213, 251, 265, 300, 311, 14, 76, 123, 154, 182, 205, 223, 254, 275, 
    303, 25, 80, 134, 158, 193, 209, 234, 258, 286, 307, 36, 84, 55, 
    88, 40, 138, 238, 290, 0, 50, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool HexagonInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case Hexagon::A2_tfrcrr:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Hexagon::C6) {
      // (A2_tfrcrr IntRegs:$Rd, C6)
      AsmString = "$\x01 = m0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Hexagon::C7) {
      // (A2_tfrcrr IntRegs:$Rd, C7)
      AsmString = "$\x01 = m1";
      break;
    }
    return false;
  case Hexagon::A2_tfrrcr:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Hexagon::C6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (A2_tfrrcr C6, IntRegs:$Rs)
      AsmString = "m0 = $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == Hexagon::C7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Hexagon::IntRegsRegClassID).contains(MI->getOperand(1).getReg())) {
      // (A2_tfrrcr C7, IntRegs:$Rs)
      AsmString = "m1 = $\x02";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '	' &&
         AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void HexagonInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  llvm_unreachable("Unknown PrintMethod kind");
}

#endif // PRINT_ALIAS_INSTR
